[
    {
        "question": "Given the DNA sequence 'AGGCTGTCCAAGCCTTTCCATGACCTGCGCGTCGGTGAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGGCTGTCCAAGCCTTTCCATGACCTGCGCGTCGGTGAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCTGCGCG"
    },
    {
        "question": "Using the DNA sequence 'AGGCTGTCCAAGCCTTTCCATGACCTGCGCGTCGGTGAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGGCTGTCCAAGCCTTTCCATGACCTGCGCGTCGGTGAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLSKPFHDLRVGE",
            "GCPSLSMTCASVN",
            "AVQAFP"
        ]
    },
    {
        "question": "For the protein sequence 'GTAESWAESLGWICNYKVILYC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GTAESWAESLGWICNYKVILYC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GTAESWAESLGWICNYKVILYC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'GTAESWAESLGWICNYKVILYC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTAESWAESLGWICNYKVILYC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            12
        ]
    },
    {
        "question": "For the protein sequence 'GTAESWAESLGWICNYKVILYC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTAESWAESLGWICNYKVILYC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'GTAESWAESLGWICNYKVILYC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTAESWAESLGWICNYKVILYC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GTCTTCACGATTTCTAGGCCGACGACACTGATCCTCCGCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTCTTCACGATTTCTAGGCCGACGACACTGATCCTCCGCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCCGACGAC"
    },
    {
        "question": "Using the DNA sequence 'GTCTTCACGATTTCTAGGCCGACGACACTGATCCTCCGCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTCTTCACGATTTCTAGGCCGACGACACTGATCCTCCGCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VFTISRPTTLILR",
            "SSRFLGRRH",
            "LHDF"
        ]
    },
    {
        "question": "For the protein sequence 'YVNFVWPDGKKRGECRWYFVMS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YVNFVWPDGKKRGECRWYFVMS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YVNFVWPDGKKRGECRWYFVMS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'YVNFVWPDGKKRGECRWYFVMS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVNFVWPDGKKRGECRWYFVMS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            11
        ]
    },
    {
        "question": "For the protein sequence 'YVNFVWPDGKKRGECRWYFVMS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVNFVWPDGKKRGECRWYFVMS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'YVNFVWPDGKKRGECRWYFVMS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVNFVWPDGKKRGECRWYFVMS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GTCTAAAAAACGGTCTGTTAGAATGCTTGGATTGCTGGAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTCTAAAAAACGGTCTGTTAGAATGCTTGGATTGCTGGAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGATTGCTGG"
    },
    {
        "question": "Using the DNA sequence 'GTCTAAAAAACGGTCTGTTAGAATGCTTGGATTGCTGGAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTCTAAAAAACGGTCTGTTAGAATGCTTGGATTGCTGGAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "V",
            "SKKRSVRMLGLLD",
            "LKNGLLECLDCW"
        ]
    },
    {
        "question": "For the protein sequence 'HQKIAMDEIQTKQRKWTQVIMP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HQKIAMDEIQTKQRKWTQVIMP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HQKIAMDEIQTKQRKWTQVIMP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'HQKIAMDEIQTKQRKWTQVIMP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HQKIAMDEIQTKQRKWTQVIMP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            10
        ]
    },
    {
        "question": "For the protein sequence 'HQKIAMDEIQTKQRKWTQVIMP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HQKIAMDEIQTKQRKWTQVIMP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'HQKIAMDEIQTKQRKWTQVIMP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HQKIAMDEIQTKQRKWTQVIMP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AGACTGATTGGACTATGCGAACCTGTTAGCTGTGACAGGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGACTGATTGGACTATGCGAACCTGTTAGCTGTGACAGGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGACTATGCG"
    },
    {
        "question": "Using the DNA sequence 'AGACTGATTGGACTATGCGAACCTGTTAGCTGTGACAGGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGACTGATTGGACTATGCGAACCTGTTAGCTGTGACAGGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLIGLCEPVSCDR",
            "D",
            "TDWTMRTC"
        ]
    },
    {
        "question": "For the protein sequence 'LERLLHSWNHCRTAQKISIPFF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LERLLHSWNHCRTAQKISIPFF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LERLLHSWNHCRTAQKISIPFF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'LERLLHSWNHCRTAQKISIPFF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LERLLHSWNHCRTAQKISIPFF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            2
        ]
    },
    {
        "question": "For the protein sequence 'LERLLHSWNHCRTAQKISIPFF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LERLLHSWNHCRTAQKISIPFF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LERLLHSWNHCRTAQKISIPFF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LERLLHSWNHCRTAQKISIPFF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CTAAATTCGTCCGATCGTGTAACCAGGCTTTTTATCGCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAAATTCGTCCGATCGTGTAACCAGGCTTTTTATCGCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTCCGATCG"
    },
    {
        "question": "Using the DNA sequence 'CTAAATTCGTCCGATCGTGTAACCAGGCTTTTTATCGCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAAATTCGTCCGATCGTGTAACCAGGCTTTTTATCGCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LNSSDRVTRLFIA",
            "",
            "KFVRSCNQAFYR"
        ]
    },
    {
        "question": "For the protein sequence 'SGKEMLANAQKYKKKNWLLCKR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SGKEMLANAQKYKKKNWLLCKR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SGKEMLANAQKYKKKNWLLCKR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'SGKEMLANAQKYKKKNWLLCKR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGKEMLANAQKYKKKNWLLCKR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            11
        ]
    },
    {
        "question": "For the protein sequence 'SGKEMLANAQKYKKKNWLLCKR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGKEMLANAQKYKKKNWLLCKR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'SGKEMLANAQKYKKKNWLLCKR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGKEMLANAQKYKKKNWLLCKR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TATTAAACTCAAGCTCCACCACTCGGTACGCGCCACCTTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TATTAAACTCAAGCTCCACCACTCGGTACGCGCCACCTTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGTACGCGC"
    },
    {
        "question": "Using the DNA sequence 'TATTAAACTCAAGCTCCACCACTCGGTACGCGCCACCTTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TATTAAACTCAAGCTCCACCACTCGGTACGCGCCACCTTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "Y",
            "IKLKLHHSVRATL",
            "LNSSSTTRYAPP"
        ]
    },
    {
        "question": "For the protein sequence 'FMYPKWHIIIHWCMQATMKDLN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FMYPKWHIIIHWCMQATMKDLN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FMYPKWHIIIHWCMQATMKDLN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'FMYPKWHIIIHWCMQATMKDLN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMYPKWHIIIHWCMQATMKDLN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'FMYPKWHIIIHWCMQATMKDLN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMYPKWHIIIHWCMQATMKDLN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'FMYPKWHIIIHWCMQATMKDLN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMYPKWHIIIHWCMQATMKDLN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TTTCCCCCCACGCATATACCTCTACAACTATATGTCCTTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTTCCCCCCACGCATATACCTCTACAACTATATGTCCTTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCCCCACGC"
    },
    {
        "question": "Using the DNA sequence 'TTTCCCCCCACGCATATACCTCTACAACTATATGTCCTTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTTCCCCCCACGCATATACCTCTACAACTATATGTCCTTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "FPPTHIPLQLYVL",
            "FPPRIYLYNYMSL",
            "SPHAYTSTTICP"
        ]
    },
    {
        "question": "For the protein sequence 'KELTMTPFEIEFDDNQPHLLGF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KELTMTPFEIEFDDNQPHLLGF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KELTMTPFEIEFDDNQPHLLGF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'KELTMTPFEIEFDDNQPHLLGF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KELTMTPFEIEFDDNQPHLLGF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            2
        ]
    },
    {
        "question": "For the protein sequence 'KELTMTPFEIEFDDNQPHLLGF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KELTMTPFEIEFDDNQPHLLGF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'KELTMTPFEIEFDDNQPHLLGF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KELTMTPFEIEFDDNQPHLLGF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GCATCTGTCTAGAGAAAGAGGCAGGATCCTCGTGACCCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCATCTGTCTAGAGAAAGAGGCAGGATCCTCGTGACCCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCAGGATCC"
    },
    {
        "question": "Using the DNA sequence 'GCATCTGTCTAGAGAAAGAGGCAGGATCCTCGTGACCCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCATCTGTCTAGAGAAAGAGGCAGGATCCTCGTGACCCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASV",
            "HLSRERGRILVTP",
            "ICLEKEAGSS"
        ]
    },
    {
        "question": "For the protein sequence 'MIREGPHRDEVNCQVPYVNDHL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MIREGPHRDEVNCQVPYVNDHL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MIREGPHRDEVNCQVPYVNDHL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'MIREGPHRDEVNCQVPYVNDHL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MIREGPHRDEVNCQVPYVNDHL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            11
        ]
    },
    {
        "question": "For the protein sequence 'MIREGPHRDEVNCQVPYVNDHL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MIREGPHRDEVNCQVPYVNDHL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'MIREGPHRDEVNCQVPYVNDHL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MIREGPHRDEVNCQVPYVNDHL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GCTCCCGTTAAAACTACGGGATTCAGTATACATATTTTTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCTCCCGTTAAAACTACGGGATTCAGTATACATATTTTTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTCCCGTTA"
    },
    {
        "question": "Using the DNA sequence 'GCTCCCGTTAAAACTACGGGATTCAGTATACATATTTTTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCTCCCGTTAAAACTACGGGATTCAGTATACATATTTTTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "APVKTTGFSIHIF",
            "LPLKLRDSVYIFL",
            "SR"
        ]
    },
    {
        "question": "For the protein sequence 'SWIPGIMEWPKDIETVMCPRQN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SWIPGIMEWPKDIETVMCPRQN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SWIPGIMEWPKDIETVMCPRQN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'SWIPGIMEWPKDIETVMCPRQN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWIPGIMEWPKDIETVMCPRQN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'SWIPGIMEWPKDIETVMCPRQN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWIPGIMEWPKDIETVMCPRQN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'SWIPGIMEWPKDIETVMCPRQN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWIPGIMEWPKDIETVMCPRQN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CGACACAGCGGGGGACGAGGCGGGCCAGAGTCTCAACGAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGACACAGCGGGGGACGAGGCGGGCCAGAGTCTCAACGAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGGGGGACG"
    },
    {
        "question": "Using the DNA sequence 'CGACACAGCGGGGGACGAGGCGGGCCAGAGTCTCAACGAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGACACAGCGGGGGACGAGGCGGGCCAGAGTCTCAACGAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RHSGGRGGPESQR",
            "DTAGDEAGQSLND",
            "TQRGTRRARVST"
        ]
    },
    {
        "question": "For the protein sequence 'SIPHFRGLGRGEGYRSFFKRLA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SIPHFRGLGRGEGYRSFFKRLA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SIPHFRGLGRGEGYRSFFKRLA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'SIPHFRGLGRGEGYRSFFKRLA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SIPHFRGLGRGEGYRSFFKRLA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            11
        ]
    },
    {
        "question": "For the protein sequence 'SIPHFRGLGRGEGYRSFFKRLA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SIPHFRGLGRGEGYRSFFKRLA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'SIPHFRGLGRGEGYRSFFKRLA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SIPHFRGLGRGEGYRSFFKRLA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CGGTTGACTCTTTCCTTATCCATTGACGCTGAAAAGGTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGGTTGACTCTTTCCTTATCCATTGACGCTGAAAAGGTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGTTGACTC"
    },
    {
        "question": "Using the DNA sequence 'CGGTTGACTCTTTCCTTATCCATTGACGCTGAAAAGGTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGGTTGACTCTTTCCTTATCCATTGACGCTGAAAAGGTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLTLSLSIDAEKV",
            "G",
            "VDSFLIH"
        ]
    },
    {
        "question": "For the protein sequence 'KWDPDIPDHDTWHDGHKNPSIL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KWDPDIPDHDTWHDGHKNPSIL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KWDPDIPDHDTWHDGHKNPSIL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'KWDPDIPDHDTWHDGHKNPSIL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KWDPDIPDHDTWHDGHKNPSIL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'KWDPDIPDHDTWHDGHKNPSIL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KWDPDIPDHDTWHDGHKNPSIL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'KWDPDIPDHDTWHDGHKNPSIL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KWDPDIPDHDTWHDGHKNPSIL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTTCAGGCGGATAAGAGCACTTCCGCTTAGTCAGCCGTTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTCAGGCGGATAAGAGCACTTCCGCTTAGTCAGCCGTTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTTCAGGCGG"
    },
    {
        "question": "Using the DNA sequence 'CTTCAGGCGGATAAGAGCACTTCCGCTTAGTCAGCCGTTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTCAGGCGGATAAGAGCACTTCCGCTTAGTCAGCCGTTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LQADKSTSA",
            "FRRIRALPLSQPF",
            "SGG"
        ]
    },
    {
        "question": "For the protein sequence 'LKKQPDWPVRDLQCQPMCSENA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LKKQPDWPVRDLQCQPMCSENA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LKKQPDWPVRDLQCQPMCSENA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'LKKQPDWPVRDLQCQPMCSENA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LKKQPDWPVRDLQCQPMCSENA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            6
        ]
    },
    {
        "question": "For the protein sequence 'LKKQPDWPVRDLQCQPMCSENA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LKKQPDWPVRDLQCQPMCSENA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'LKKQPDWPVRDLQCQPMCSENA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LKKQPDWPVRDLQCQPMCSENA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GGACGAGACTGAATACCCCGGCCCGCATGAGGTCATCGAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGACGAGACTGAATACCCCGGCCCGCATGAGGTCATCGAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCCGGCCCG"
    },
    {
        "question": "Using the DNA sequence 'GGACGAGACTGAATACCCCGGCCCGCATGAGGTCATCGAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGACGAGACTGAATACCCCGGCCCGCATGAGGTCATCGAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GRD",
            "DETEYPGPHEVID",
            "TRLNTPARMRSS"
        ]
    },
    {
        "question": "For the protein sequence 'HEHRWQQQVSRPGEDKVVGCPD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HEHRWQQQVSRPGEDKVVGCPD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HEHRWQQQVSRPGEDKVVGCPD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'HEHRWQQQVSRPGEDKVVGCPD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHRWQQQVSRPGEDKVVGCPD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            3
        ]
    },
    {
        "question": "For the protein sequence 'HEHRWQQQVSRPGEDKVVGCPD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHRWQQQVSRPGEDKVVGCPD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'HEHRWQQQVSRPGEDKVVGCPD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHRWQQQVSRPGEDKVVGCPD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AAGCGTGCGAGATCACGGCGTTTTTCATCGAAGATCCCTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAGCGTGCGAGATCACGGCGTTTTTCATCGAAGATCCCTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGCGTGCGAG"
    },
    {
        "question": "Using the DNA sequence 'AAGCGTGCGAGATCACGGCGTTTTTCATCGAAGATCCCTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAGCGTGCGAGATCACGGCGTTTTTCATCGAAGATCCCTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KRARSRRFSSKIP",
            "SVRDHGVFHRRSL",
            "ACEITAFFIEDP"
        ]
    },
    {
        "question": "For the protein sequence 'IPGAYWAQRLSLVDGKLLISSK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IPGAYWAQRLSLVDGKLLISSK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IPGAYWAQRLSLVDGKLLISSK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'IPGAYWAQRLSLVDGKLLISSK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPGAYWAQRLSLVDGKLLISSK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            4
        ]
    },
    {
        "question": "For the protein sequence 'IPGAYWAQRLSLVDGKLLISSK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPGAYWAQRLSLVDGKLLISSK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'IPGAYWAQRLSLVDGKLLISSK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPGAYWAQRLSLVDGKLLISSK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CTTATTTAAAAAGAAACGTGATAGCCGGTGTTAATCTTCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTATTTAAAAAGAAACGTGATAGCCGGTGTTAATCTTCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTGATAGCC"
    },
    {
        "question": "Using the DNA sequence 'CTTATTTAAAAAGAAACGTGATAGCCGGTGTTAATCTTCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTATTTAAAAAGAAACGTGATAGCCGGTGTTAATCTTCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LI",
            "LFKKKRDSRC",
            "YLKRNVIAGVNL"
        ]
    },
    {
        "question": "For the protein sequence 'QNRPDNKCSARYGPAGQGHCAE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QNRPDNKCSARYGPAGQGHCAE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QNRPDNKCSARYGPAGQGHCAE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'QNRPDNKCSARYGPAGQGHCAE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QNRPDNKCSARYGPAGQGHCAE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            6
        ]
    },
    {
        "question": "For the protein sequence 'QNRPDNKCSARYGPAGQGHCAE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QNRPDNKCSARYGPAGQGHCAE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'QNRPDNKCSARYGPAGQGHCAE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QNRPDNKCSARYGPAGQGHCAE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCATTGAATAACTACATGGCGCACGAATATAAGTGCGCGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCATTGAATAACTACATGGCGCACGAATATAAGTGCGCGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CATGGCGCAC"
    },
    {
        "question": "Using the DNA sequence 'TCATTGAATAACTACATGGCGCACGAATATAAGTGCGCGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCATTGAATAACTACATGGCGCACGAATATAAGTGCGCGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SLNNYMAHEYKCA",
            "H",
            "IE"
        ]
    },
    {
        "question": "For the protein sequence 'VWDAFQQKHMTRKTIHVYVKPN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VWDAFQQKHMTRKTIHVYVKPN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VWDAFQQKHMTRKTIHVYVKPN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'VWDAFQQKHMTRKTIHVYVKPN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDAFQQKHMTRKTIHVYVKPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            11
        ]
    },
    {
        "question": "For the protein sequence 'VWDAFQQKHMTRKTIHVYVKPN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDAFQQKHMTRKTIHVYVKPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'VWDAFQQKHMTRKTIHVYVKPN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDAFQQKHMTRKTIHVYVKPN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GAAAGCATTCTGCTGTTGGTGAGGACATTGATAGTTCCGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAAAGCATTCTGCTGTTGGTGAGGACATTGATAGTTCCGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTGCTGTTGG"
    },
    {
        "question": "Using the DNA sequence 'GAAAGCATTCTGCTGTTGGTGAGGACATTGATAGTTCCGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAAAGCATTCTGCTGTTGGTGAGGACATTGATAGTTCCGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ESILLLVRTLIVP",
            "KAFCCW",
            "KHSAVGEDIDSS"
        ]
    },
    {
        "question": "For the protein sequence 'IWFFSSYQHMPMEAMMYTSTYI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IWFFSSYQHMPMEAMMYTSTYI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IWFFSSYQHMPMEAMMYTSTYI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'IWFFSSYQHMPMEAMMYTSTYI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IWFFSSYQHMPMEAMMYTSTYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            1
        ]
    },
    {
        "question": "For the protein sequence 'IWFFSSYQHMPMEAMMYTSTYI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IWFFSSYQHMPMEAMMYTSTYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'IWFFSSYQHMPMEAMMYTSTYI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IWFFSSYQHMPMEAMMYTSTYI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GAAATTCGGATCCATCCGAGGGAAGGCATGTATCAACCTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAAATTCGGATCCATCCGAGGGAAGGCATGTATCAACCTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCATCCGAGG"
    },
    {
        "question": "Using the DNA sequence 'GAAATTCGGATCCATCCGAGGGAAGGCATGTATCAACCTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAAATTCGGATCCATCCGAGGGAAGGCATGTATCAACCTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "EIRIHPREGMYQP",
            "KFGSIRGKACINL",
            "NSDPSEGRHVST"
        ]
    },
    {
        "question": "For the protein sequence 'TGHAYPAQEPQETIMEDDRQMM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TGHAYPAQEPQETIMEDDRQMM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TGHAYPAQEPQETIMEDDRQMM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'TGHAYPAQEPQETIMEDDRQMM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TGHAYPAQEPQETIMEDDRQMM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            1
        ]
    },
    {
        "question": "For the protein sequence 'TGHAYPAQEPQETIMEDDRQMM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TGHAYPAQEPQETIMEDDRQMM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'TGHAYPAQEPQETIMEDDRQMM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TGHAYPAQEPQETIMEDDRQMM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AGTCCAAGATGGCGGGCTTCGTAGAAGAGACTTGTGGCCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGTCCAAGATGGCGGGCTTCGTAGAAGAGACTTGTGGCCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GATGGCGGGC"
    },
    {
        "question": "Using the DNA sequence 'AGTCCAAGATGGCGGGCTTCGTAGAAGAGACTTGTGGCCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGTCCAAGATGGCGGGCTTCGTAGAAGAGACTTGTGGCCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SPRWRAS",
            "VQDGGLRRRDLWP",
            "SKMAGFVEETCG"
        ]
    },
    {
        "question": "For the protein sequence 'SNYVWPHCANGCCLPEKPWAHK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SNYVWPHCANGCCLPEKPWAHK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SNYVWPHCANGCCLPEKPWAHK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'SNYVWPHCANGCCLPEKPWAHK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SNYVWPHCANGCCLPEKPWAHK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            1
        ]
    },
    {
        "question": "For the protein sequence 'SNYVWPHCANGCCLPEKPWAHK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SNYVWPHCANGCCLPEKPWAHK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'SNYVWPHCANGCCLPEKPWAHK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SNYVWPHCANGCCLPEKPWAHK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GTGCACGCTATAAGGCAGAAGAAACATGGGAATATCCATG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTGCACGCTATAAGGCAGAAGAAACATGGGAATATCCATG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCACGCTA"
    },
    {
        "question": "Using the DNA sequence 'GTGCACGCTATAAGGCAGAAGAAACATGGGAATATCCATG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTGCACGCTATAAGGCAGAAGAAACATGGGAATATCCATG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VHAIRQKKHGNIH",
            "CTL",
            "ARYKAEETWEYP"
        ]
    },
    {
        "question": "For the protein sequence 'NLYMGNVICYTELWIKKDPHKG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NLYMGNVICYTELWIKKDPHKG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NLYMGNVICYTELWIKKDPHKG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'NLYMGNVICYTELWIKKDPHKG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLYMGNVICYTELWIKKDPHKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            7
        ]
    },
    {
        "question": "For the protein sequence 'NLYMGNVICYTELWIKKDPHKG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLYMGNVICYTELWIKKDPHKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'NLYMGNVICYTELWIKKDPHKG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLYMGNVICYTELWIKKDPHKG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GCGAGTAACGCGAGCGTATGTTCGTCAGCGCTAGCCAAGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCGAGTAACGCGAGCGTATGTTCGTCAGCGCTAGCCAAGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AACGCGAGCG"
    },
    {
        "question": "Using the DNA sequence 'GCGAGTAACGCGAGCGTATGTTCGTCAGCGCTAGCCAAGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCGAGTAACGCGAGCGTATGTTCGTCAGCGCTAGCCAAGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASNASVCSSALAK",
            "RVTRAYVRQR",
            "E"
        ]
    },
    {
        "question": "For the protein sequence 'SRCKANIGNVYHDRSLPFRVPE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SRCKANIGNVYHDRSLPFRVPE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SRCKANIGNVYHDRSLPFRVPE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'SRCKANIGNVYHDRSLPFRVPE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SRCKANIGNVYHDRSLPFRVPE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            4
        ]
    },
    {
        "question": "For the protein sequence 'SRCKANIGNVYHDRSLPFRVPE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SRCKANIGNVYHDRSLPFRVPE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'SRCKANIGNVYHDRSLPFRVPE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SRCKANIGNVYHDRSLPFRVPE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCCTATCTGATAAAACATATCGGCTCATGCTAGGAACCCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCCTATCTGATAAAACATATCGGCTCATGCTAGGAACCCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGCTCATGC"
    },
    {
        "question": "Using the DNA sequence 'TCCTATCTGATAAAACATATCGGCTCATGCTAGGAACCCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCCTATCTGATAAAACATATCGGCTCATGCTAGGAACCCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SYLIKHIGSC",
            "PI",
            "LSDKTYRLMLGT"
        ]
    },
    {
        "question": "For the protein sequence 'QERTSISEACIWHQVPENVKKC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QERTSISEACIWHQVPENVKKC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QERTSISEACIWHQVPENVKKC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'QERTSISEACIWHQVPENVKKC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QERTSISEACIWHQVPENVKKC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            6
        ]
    },
    {
        "question": "For the protein sequence 'QERTSISEACIWHQVPENVKKC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QERTSISEACIWHQVPENVKKC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'QERTSISEACIWHQVPENVKKC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QERTSISEACIWHQVPENVKKC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TTATAACGCAACTAACTACGAGGTCATCATGTTCTTAAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTATAACGCAACTAACTACGAGGTCATCATGTTCTTAAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTACGAGGTC"
    },
    {
        "question": "Using the DNA sequence 'TTATAACGCAACTAACTACGAGGTCATCATGTTCTTAAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTATAACGCAACTAACTACGAGGTCATCATGTTCTTAAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "L",
            "YNATNYEVIMFLN",
            "ITQLTTRSSCS"
        ]
    },
    {
        "question": "For the protein sequence 'CQIKIPDCKCFHPTDPAPQMYI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CQIKIPDCKCFHPTDPAPQMYI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CQIKIPDCKCFHPTDPAPQMYI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'CQIKIPDCKCFHPTDPAPQMYI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CQIKIPDCKCFHPTDPAPQMYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            4
        ]
    },
    {
        "question": "For the protein sequence 'CQIKIPDCKCFHPTDPAPQMYI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CQIKIPDCKCFHPTDPAPQMYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'CQIKIPDCKCFHPTDPAPQMYI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CQIKIPDCKCFHPTDPAPQMYI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TGACGGTACATAGAGGGTAAGCACGGTCTCTCTGTGTTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGACGGTACATAGAGGGTAAGCACGGTCTCTCTGTGTTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCACGGTCTC"
    },
    {
        "question": "Using the DNA sequence 'TGACGGTACATAGAGGGTAAGCACGGTCTCTCTGTGTTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGACGGTACATAGAGGGTAAGCACGGTCTCTCTGTGTTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "DGT",
            "TVHRG"
        ]
    },
    {
        "question": "For the protein sequence 'DWYCFCTYASHNSMCKQYAVAV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DWYCFCTYASHNSMCKQYAVAV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DWYCFCTYASHNSMCKQYAVAV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'DWYCFCTYASHNSMCKQYAVAV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWYCFCTYASHNSMCKQYAVAV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            0
        ]
    },
    {
        "question": "For the protein sequence 'DWYCFCTYASHNSMCKQYAVAV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWYCFCTYASHNSMCKQYAVAV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'DWYCFCTYASHNSMCKQYAVAV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWYCFCTYASHNSMCKQYAVAV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ATTATCTGCATTCTTTCGCAAAATGACTCGGACCTTACAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATTATCTGCATTCTTTCGCAAAATGACTCGGACCTTACAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACTCGGACC"
    },
    {
        "question": "Using the DNA sequence 'ATTATCTGCATTCTTTCGCAAAATGACTCGGACCTTACAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATTATCTGCATTCTTTCGCAAAATGACTCGGACCTTACAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IICILSQNDSDLT",
            "LSAFFRKMTRTLQ",
            "YLHSFAK"
        ]
    },
    {
        "question": "For the protein sequence 'SMRRYFYNGQMANNGESTLINA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SMRRYFYNGQMANNGESTLINA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SMRRYFYNGQMANNGESTLINA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'SMRRYFYNGQMANNGESTLINA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SMRRYFYNGQMANNGESTLINA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            0
        ]
    },
    {
        "question": "For the protein sequence 'SMRRYFYNGQMANNGESTLINA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SMRRYFYNGQMANNGESTLINA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'SMRRYFYNGQMANNGESTLINA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SMRRYFYNGQMANNGESTLINA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GGAGCTTGTCAGGATCATTCAATGGGAGGCGTGGACCGAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGAGCTTGTCAGGATCATTCAATGGGAGGCGTGGACCGAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGAGGCGTG"
    },
    {
        "question": "Using the DNA sequence 'GGAGCTTGTCAGGATCATTCAATGGGAGGCGTGGACCGAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGAGCTTGTCAGGATCATTCAATGGGAGGCGTGGACCGAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GACQDHSMGGVDR",
            "ELVRIIQWEAWTD",
            "SLSGSFNGRRGP"
        ]
    },
    {
        "question": "For the protein sequence 'LWYYGGMRVIQLWWNRKSHATW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LWYYGGMRVIQLWWNRKSHATW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LWYYGGMRVIQLWWNRKSHATW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'LWYYGGMRVIQLWWNRKSHATW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LWYYGGMRVIQLWWNRKSHATW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'LWYYGGMRVIQLWWNRKSHATW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LWYYGGMRVIQLWWNRKSHATW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'LWYYGGMRVIQLWWNRKSHATW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LWYYGGMRVIQLWWNRKSHATW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'AGTGGCATGGGTATAAACTCCACCCCACGAAGTCAGGCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGTGGCATGGGTATAAACTCCACCCCACGAAGTCAGGCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCACCCCACG"
    },
    {
        "question": "Using the DNA sequence 'AGTGGCATGGGTATAAACTCCACCCCACGAAGTCAGGCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGTGGCATGGGTATAAACTCCACCCCACGAAGTCAGGCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SGMGINSTPRSQA",
            "VAWV",
            "WHGYKLHPTKSG"
        ]
    },
    {
        "question": "For the protein sequence 'GHQYVAIHYVMFILDHTMIDYT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GHQYVAIHYVMFILDHTMIDYT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GHQYVAIHYVMFILDHTMIDYT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'GHQYVAIHYVMFILDHTMIDYT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHQYVAIHYVMFILDHTMIDYT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            6
        ]
    },
    {
        "question": "For the protein sequence 'GHQYVAIHYVMFILDHTMIDYT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHQYVAIHYVMFILDHTMIDYT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'GHQYVAIHYVMFILDHTMIDYT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHQYVAIHYVMFILDHTMIDYT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TACGCCCAACAGGGAACTAGATCGCTCACTGACACTGCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TACGCCCAACAGGGAACTAGATCGCTCACTGACACTGCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCCCAACAG"
    },
    {
        "question": "Using the DNA sequence 'TACGCCCAACAGGGAACTAGATCGCTCACTGACACTGCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TACGCCCAACAGGGAACTAGATCGCTCACTGACACTGCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YAQQGTRSLTDTA",
            "TPNRELDRSLTLH",
            "RPTGN"
        ]
    },
    {
        "question": "For the protein sequence 'CIAKDLAQKPLQRMLPERRFMG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CIAKDLAQKPLQRMLPERRFMG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CIAKDLAQKPLQRMLPERRFMG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'CIAKDLAQKPLQRMLPERRFMG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CIAKDLAQKPLQRMLPERRFMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            0
        ]
    },
    {
        "question": "For the protein sequence 'CIAKDLAQKPLQRMLPERRFMG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CIAKDLAQKPLQRMLPERRFMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'CIAKDLAQKPLQRMLPERRFMG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CIAKDLAQKPLQRMLPERRFMG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CTCCCTACCCTGATTGCAAAAAGACTTTACTTAGCAAGAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCCCTACCCTGATTGCAAAAAGACTTTACTTAGCAAGAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTCCCTACCC"
    },
    {
        "question": "Using the DNA sequence 'CTCCCTACCCTGATTGCAAAAAGACTTTACTTAGCAAGAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCCCTACCCTGATTGCAAAAAGACTTTACTTAGCAAGAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LPTLIAKRLYLAR",
            "SLP",
            "PYPDCKKTLLSK"
        ]
    },
    {
        "question": "For the protein sequence 'GKYAYKSHSILQYGFGQWILDM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GKYAYKSHSILQYGFGQWILDM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GKYAYKSHSILQYGFGQWILDM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'GKYAYKSHSILQYGFGQWILDM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GKYAYKSHSILQYGFGQWILDM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            12
        ]
    },
    {
        "question": "For the protein sequence 'GKYAYKSHSILQYGFGQWILDM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GKYAYKSHSILQYGFGQWILDM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'GKYAYKSHSILQYGFGQWILDM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GKYAYKSHSILQYGFGQWILDM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TATAACTCAACAACCCTGCACGTTTGTATGTTGTATCGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TATAACTCAACAACCCTGCACGTTTGTATGTTGTATCGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACCCTGCACG"
    },
    {
        "question": "Using the DNA sequence 'TATAACTCAACAACCCTGCACGTTTGTATGTTGTATCGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TATAACTCAACAACCCTGCACGTTTGTATGTTGTATCGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YNSTTLHVCMLYR",
            "ITQQPCTFVCCIA",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'YMNSMRRPGIFWHNGFECNPWW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YMNSMRRPGIFWHNGFECNPWW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YMNSMRRPGIFWHNGFECNPWW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'YMNSMRRPGIFWHNGFECNPWW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YMNSMRRPGIFWHNGFECNPWW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            4
        ]
    },
    {
        "question": "For the protein sequence 'YMNSMRRPGIFWHNGFECNPWW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YMNSMRRPGIFWHNGFECNPWW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'YMNSMRRPGIFWHNGFECNPWW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YMNSMRRPGIFWHNGFECNPWW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GTAGGGTCCGTCCTAGGACTTAGCAGGCATGGGAACACGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTAGGGTCCGTCCTAGGACTTAGCAGGCATGGGAACACGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGTCCGTCC"
    },
    {
        "question": "Using the DNA sequence 'GTAGGGTCCGTCCTAGGACTTAGCAGGCATGGGAACACGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTAGGGTCCGTCCTAGGACTTAGCAGGCATGGGAACACGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VGSVLGLSRHGNT",
            "",
            "RVRPRT"
        ]
    },
    {
        "question": "For the protein sequence 'TFFYFQDNIHWSEVFPGNNYWE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TFFYFQDNIHWSEVFPGNNYWE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TFFYFQDNIHWSEVFPGNNYWE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'TFFYFQDNIHWSEVFPGNNYWE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFFYFQDNIHWSEVFPGNNYWE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            8
        ]
    },
    {
        "question": "For the protein sequence 'TFFYFQDNIHWSEVFPGNNYWE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFFYFQDNIHWSEVFPGNNYWE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'TFFYFQDNIHWSEVFPGNNYWE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFFYFQDNIHWSEVFPGNNYWE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GACTACGAACTTCTCCCTGGTTTGGTATATGTCATAGAGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GACTACGAACTTCTCCCTGGTTTGGTATATGTCATAGAGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTTCTCCCTG"
    },
    {
        "question": "Using the DNA sequence 'GACTACGAACTTCTCCCTGGTTTGGTATATGTCATAGAGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GACTACGAACTTCTCCCTGGTTTGGTATATGTCATAGAGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DYELLPGLVYVIE",
            "TTNFSLVWYMS",
            "LRTSPWFGICHR"
        ]
    },
    {
        "question": "For the protein sequence 'ESEDCAPLHRLPSPCYLMHDDV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ESEDCAPLHRLPSPCYLMHDDV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ESEDCAPLHRLPSPCYLMHDDV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'ESEDCAPLHRLPSPCYLMHDDV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESEDCAPLHRLPSPCYLMHDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            9
        ]
    },
    {
        "question": "For the protein sequence 'ESEDCAPLHRLPSPCYLMHDDV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESEDCAPLHRLPSPCYLMHDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'ESEDCAPLHRLPSPCYLMHDDV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESEDCAPLHRLPSPCYLMHDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TGTTATGAACCATTGCCGGCCATGGGCTCGCGACTTCCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTTATGAACCATTGCCGGCCATGGGCTCGCGACTTCCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCGGCCATG"
    },
    {
        "question": "Using the DNA sequence 'TGTTATGAACCATTGCCGGCCATGGGCTCGCGACTTCCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTTATGAACCATTGCCGGCCATGGGCTCGCGACTTCCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CYEPLPAMGSRLP",
            "VMNHCRPWARDFQ",
            "L"
        ]
    },
    {
        "question": "For the protein sequence 'RVIPRQNVYRKTCTPTPIIQWF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RVIPRQNVYRKTCTPTPIIQWF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RVIPRQNVYRKTCTPTPIIQWF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'RVIPRQNVYRKTCTPTPIIQWF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RVIPRQNVYRKTCTPTPIIQWF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            12
        ]
    },
    {
        "question": "For the protein sequence 'RVIPRQNVYRKTCTPTPIIQWF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RVIPRQNVYRKTCTPTPIIQWF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'RVIPRQNVYRKTCTPTPIIQWF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RVIPRQNVYRKTCTPTPIIQWF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ATCCACATTAAGACCAGAGGCAAAACACGGGGTAGACCTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATCCACATTAAGACCAGAGGCAAAACACGGGGTAGACCTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCAGAGGC"
    },
    {
        "question": "Using the DNA sequence 'ATCCACATTAAGACCAGAGGCAAAACACGGGGTAGACCTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATCCACATTAAGACCAGAGGCAAAACACGGGGTAGACCTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IHIKTRGKTRGRP",
            "STLRPEAKHGVDL",
            "PH"
        ]
    },
    {
        "question": "For the protein sequence 'MDLNYADTYDGTKDNWVIFETN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MDLNYADTYDGTKDNWVIFETN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MDLNYADTYDGTKDNWVIFETN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'MDLNYADTYDGTKDNWVIFETN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDLNYADTYDGTKDNWVIFETN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            10
        ]
    },
    {
        "question": "For the protein sequence 'MDLNYADTYDGTKDNWVIFETN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDLNYADTYDGTKDNWVIFETN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'MDLNYADTYDGTKDNWVIFETN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDLNYADTYDGTKDNWVIFETN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'TGCGTGTAAAACTTCCGGCATCCATTATCTCACGACCGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGCGTGTAAAACTTCCGGCATCCATTATCTCACGACCGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCCGGCATCC"
    },
    {
        "question": "Using the DNA sequence 'TGCGTGTAAAACTTCCGGCATCCATTATCTCACGACCGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGCGTGTAAAACTTCCGGCATCCATTATCTCACGACCGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CV",
            "ACKTSGIHYLTTE",
            "RVKLPASIISRP"
        ]
    },
    {
        "question": "For the protein sequence 'AAFCMCPPHEGFRKHGHRFSRV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AAFCMCPPHEGFRKHGHRFSRV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AAFCMCPPHEGFRKHGHRFSRV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'AAFCMCPPHEGFRKHGHRFSRV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AAFCMCPPHEGFRKHGHRFSRV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            0
        ]
    },
    {
        "question": "For the protein sequence 'AAFCMCPPHEGFRKHGHRFSRV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AAFCMCPPHEGFRKHGHRFSRV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'AAFCMCPPHEGFRKHGHRFSRV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AAFCMCPPHEGFRKHGHRFSRV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CGTTTTTGAGGGAGAGAAACAACTCACGGCGACCTTCGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGTTTTTGAGGGAGAGAAACAACTCACGGCGACCTTCGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CACGGCGACC"
    },
    {
        "question": "Using the DNA sequence 'CGTTTTTGAGGGAGAGAAACAACTCACGGCGACCTTCGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGTTTTTGAGGGAGAGAAACAACTCACGGCGACCTTCGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RF",
            "VFEGEKQLTATFE",
            "FLRERNNSRRPS"
        ]
    },
    {
        "question": "For the protein sequence 'QHSKMMPDMTPGSYKLYFMWGG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QHSKMMPDMTPGSYKLYFMWGG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QHSKMMPDMTPGSYKLYFMWGG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'QHSKMMPDMTPGSYKLYFMWGG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QHSKMMPDMTPGSYKLYFMWGG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            12
        ]
    },
    {
        "question": "For the protein sequence 'QHSKMMPDMTPGSYKLYFMWGG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QHSKMMPDMTPGSYKLYFMWGG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'QHSKMMPDMTPGSYKLYFMWGG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QHSKMMPDMTPGSYKLYFMWGG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TTACCGTGGGTGTTGTGTATAACACCACTGTGTAAGGGCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTACCGTGGGTGTTGTGTATAACACCACTGTGTAAGGGCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACCGTGGGTG"
    },
    {
        "question": "Using the DNA sequence 'TTACCGTGGGTGTTGTGTATAACACCACTGTGTAAGGGCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTACCGTGGGTGTTGTGTATAACACCACTGTGTAAGGGCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LPWVLCITPLCKG",
            "YRGCCV",
            "TVGVVYNTTV"
        ]
    },
    {
        "question": "For the protein sequence 'YTCTICARKLNTADCDYDMSWL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YTCTICARKLNTADCDYDMSWL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YTCTICARKLNTADCDYDMSWL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'YTCTICARKLNTADCDYDMSWL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YTCTICARKLNTADCDYDMSWL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            0
        ]
    },
    {
        "question": "For the protein sequence 'YTCTICARKLNTADCDYDMSWL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YTCTICARKLNTADCDYDMSWL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'YTCTICARKLNTADCDYDMSWL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YTCTICARKLNTADCDYDMSWL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CGTGGGTTGCTGACGTACAGTTACGAAAGGCCTTTGATCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGTGGGTTGCTGACGTACAGTTACGAAAGGCCTTTGATCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTGGGTTGC"
    },
    {
        "question": "Using the DNA sequence 'CGTGGGTTGCTGACGTACAGTTACGAAAGGCCTTTGATCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGTGGGTTGCTGACGTACAGTTACGAAAGGCCTTTGATCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RGLLTYSYERPLI",
            "VGC",
            "WVADVQLRKAFD"
        ]
    },
    {
        "question": "For the protein sequence 'RHQFCYFCQMKNRQDSWRYLND', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RHQFCYFCQMKNRQDSWRYLND\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RHQFCYFCQMKNRQDSWRYLND\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'RHQFCYFCQMKNRQDSWRYLND', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHQFCYFCQMKNRQDSWRYLND\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            1
        ]
    },
    {
        "question": "For the protein sequence 'RHQFCYFCQMKNRQDSWRYLND', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHQFCYFCQMKNRQDSWRYLND\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'RHQFCYFCQMKNRQDSWRYLND', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHQFCYFCQMKNRQDSWRYLND\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'AGCATGACAGTTTCGTAGAAGTGGGCAATATTATAAACCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGCATGACAGTTTCGTAGAAGTGGGCAATATTATAAACCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGAAGTGGGC"
    },
    {
        "question": "Using the DNA sequence 'AGCATGACAGTTTCGTAGAAGTGGGCAATATTATAAACCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGCATGACAGTTTCGTAGAAGTGGGCAATATTATAAACCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SMTVS",
            "A",
            "HDSFVEVGNIIN"
        ]
    },
    {
        "question": "For the protein sequence 'WLGWGTFAPNGKQQDVFNSSRK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WLGWGTFAPNGKQQDVFNSSRK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WLGWGTFAPNGKQQDVFNSSRK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'WLGWGTFAPNGKQQDVFNSSRK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WLGWGTFAPNGKQQDVFNSSRK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            1
        ]
    },
    {
        "question": "For the protein sequence 'WLGWGTFAPNGKQQDVFNSSRK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WLGWGTFAPNGKQQDVFNSSRK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'WLGWGTFAPNGKQQDVFNSSRK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WLGWGTFAPNGKQQDVFNSSRK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CTAACTACCTAAGGACAACAGGTCCTTGACATCGAGAAGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAACTACCTAAGGACAACAGGTCCTTGACATCGAGAAGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGACAACAGG"
    },
    {
        "question": "Using the DNA sequence 'CTAACTACCTAAGGACAACAGGTCCTTGACATCGAGAAGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAACTACCTAAGGACAACAGGTCCTTGACATCGAGAAGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LTT",
            "",
            "NYLRTTGP"
        ]
    },
    {
        "question": "For the protein sequence 'IMWRAHALKSDQGWKKFCDGQF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IMWRAHALKSDQGWKKFCDGQF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IMWRAHALKSDQGWKKFCDGQF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'IMWRAHALKSDQGWKKFCDGQF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IMWRAHALKSDQGWKKFCDGQF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            0
        ]
    },
    {
        "question": "For the protein sequence 'IMWRAHALKSDQGWKKFCDGQF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IMWRAHALKSDQGWKKFCDGQF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'IMWRAHALKSDQGWKKFCDGQF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IMWRAHALKSDQGWKKFCDGQF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TAACAAGACCGCGGAGGGTATCCCGATGCGTTATCCTGTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAACAAGACCGCGGAGGGTATCCCGATGCGTTATCCTGTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGCGGAGGG"
    },
    {
        "question": "Using the DNA sequence 'TAACAAGACCGCGGAGGGTATCCCGATGCGTTATCCTGTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAACAAGACCGCGGAGGGTATCCCGATGCGTTATCCTGTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "NKTAEGIPMRYPV",
            "TRPRRVSRCVIL"
        ]
    },
    {
        "question": "For the protein sequence 'LIKWALEEQVDRCMIPCVQYQY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LIKWALEEQVDRCMIPCVQYQY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LIKWALEEQVDRCMIPCVQYQY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'LIKWALEEQVDRCMIPCVQYQY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LIKWALEEQVDRCMIPCVQYQY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            11
        ]
    },
    {
        "question": "For the protein sequence 'LIKWALEEQVDRCMIPCVQYQY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LIKWALEEQVDRCMIPCVQYQY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'LIKWALEEQVDRCMIPCVQYQY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LIKWALEEQVDRCMIPCVQYQY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CCTTTTGCTCAACCCCGCGATCATTCCAATACCTTGCTCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCTTTTGCTCAACCCCGCGATCATTCCAATACCTTGCTCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAACCCCGCG"
    },
    {
        "question": "Using the DNA sequence 'CCTTTTGCTCAACCCCGCGATCATTCCAATACCTTGCTCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCTTTTGCTCAACCCCGCGATCATTCCAATACCTTGCTCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PFAQPRDHSNTLL",
            "LLLNPAIIPIPCS",
            "FCSTPRSFQYLA"
        ]
    },
    {
        "question": "For the protein sequence 'QWHLMHNYEDFMDSYPCPDFCL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QWHLMHNYEDFMDSYPCPDFCL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QWHLMHNYEDFMDSYPCPDFCL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'QWHLMHNYEDFMDSYPCPDFCL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWHLMHNYEDFMDSYPCPDFCL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            0
        ]
    },
    {
        "question": "For the protein sequence 'QWHLMHNYEDFMDSYPCPDFCL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWHLMHNYEDFMDSYPCPDFCL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'QWHLMHNYEDFMDSYPCPDFCL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWHLMHNYEDFMDSYPCPDFCL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GATACCCACGCAATCCGTCTGGGTACAGGCAGGAGCACTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GATACCCACGCAATCCGTCTGGGTACAGGCAGGAGCACTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCCGTCTGGG"
    },
    {
        "question": "Using the DNA sequence 'GATACCCACGCAATCCGTCTGGGTACAGGCAGGAGCACTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GATACCCACGCAATCCGTCTGGGTACAGGCAGGAGCACTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DTHAIRLGTGRST",
            "IPTQSVWVQAGAL",
            "YPRNPSGYRQEH"
        ]
    },
    {
        "question": "For the protein sequence 'CAGYYLGFRTTAHIQVSYNHLT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CAGYYLGFRTTAHIQVSYNHLT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CAGYYLGFRTTAHIQVSYNHLT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'CAGYYLGFRTTAHIQVSYNHLT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CAGYYLGFRTTAHIQVSYNHLT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            2
        ]
    },
    {
        "question": "For the protein sequence 'CAGYYLGFRTTAHIQVSYNHLT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CAGYYLGFRTTAHIQVSYNHLT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'CAGYYLGFRTTAHIQVSYNHLT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CAGYYLGFRTTAHIQVSYNHLT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'AGTGTGCAAGCCCACCCCAATTGCCTTTGAACTAAATCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGTGTGCAAGCCCACCCCAATTGCCTTTGAACTAAATCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGCCCACCCC"
    },
    {
        "question": "Using the DNA sequence 'AGTGTGCAAGCCCACCCCAATTGCCTTTGAACTAAATCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGTGTGCAAGCCCACCCCAATTGCCTTTGAACTAAATCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SVQAHPNCL",
            "VCKPTPIAFELNQ",
            "CASPPQLPLN"
        ]
    },
    {
        "question": "For the protein sequence 'FDWEKQCSTMFKMILRTQNYNF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FDWEKQCSTMFKMILRTQNYNF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FDWEKQCSTMFKMILRTQNYNF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'FDWEKQCSTMFKMILRTQNYNF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDWEKQCSTMFKMILRTQNYNF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            7
        ]
    },
    {
        "question": "For the protein sequence 'FDWEKQCSTMFKMILRTQNYNF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDWEKQCSTMFKMILRTQNYNF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'FDWEKQCSTMFKMILRTQNYNF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDWEKQCSTMFKMILRTQNYNF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AAGCTAGTTGCCTTTGATGGGACTATAGTTAAAGTCCAGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAGCTAGTTGCCTTTGATGGGACTATAGTTAAAGTCCAGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTAGTTGCC"
    },
    {
        "question": "Using the DNA sequence 'AAGCTAGTTGCCTTTGATGGGACTATAGTTAAAGTCCAGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAGCTAGTTGCCTTTGATGGGACTATAGTTAAAGTCCAGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KLVAFDGTIVKVQ",
            "S",
            "ASCL"
        ]
    },
    {
        "question": "For the protein sequence 'FYMKCNCTNQMCTCASDESNSD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FYMKCNCTNQMCTCASDESNSD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FYMKCNCTNQMCTCASDESNSD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'FYMKCNCTNQMCTCASDESNSD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYMKCNCTNQMCTCASDESNSD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            8
        ]
    },
    {
        "question": "For the protein sequence 'FYMKCNCTNQMCTCASDESNSD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYMKCNCTNQMCTCASDESNSD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'FYMKCNCTNQMCTCASDESNSD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYMKCNCTNQMCTCASDESNSD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GGTTGGCTCTAGCAGTGTTCTCAGGGCCTAATCCCGGAAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTTGGCTCTAGCAGTGTTCTCAGGGCCTAATCCCGGAAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCTCAGGGCC"
    },
    {
        "question": "Using the DNA sequence 'GGTTGGCTCTAGCAGTGTTCTCAGGGCCTAATCCCGGAAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTTGGCTCTAGCAGTGTTCTCAGGGCCTAATCCCGGAAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GWL",
            "VGSSSVLRA",
            "LALAVFSGPNPG"
        ]
    },
    {
        "question": "For the protein sequence 'ADMIAGRQYGPIVIINIDKCWM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ADMIAGRQYGPIVIINIDKCWM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ADMIAGRQYGPIVIINIDKCWM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'ADMIAGRQYGPIVIINIDKCWM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADMIAGRQYGPIVIINIDKCWM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            6
        ]
    },
    {
        "question": "For the protein sequence 'ADMIAGRQYGPIVIINIDKCWM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADMIAGRQYGPIVIINIDKCWM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'ADMIAGRQYGPIVIINIDKCWM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADMIAGRQYGPIVIINIDKCWM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'TTGGAGGCATGAAGGTCCAGGCCCACCAAGCCTTGATATA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTGGAGGCATGAAGGTCCAGGCCCACCAAGCCTTGATATA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTCCAGGCC"
    },
    {
        "question": "Using the DNA sequence 'TTGGAGGCATGAAGGTCCAGGCCCACCAAGCCTTGATATA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTGGAGGCATGAAGGTCCAGGCCCACCAAGCCTTGATATA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LEA",
            "WRHEGPGPPSLDI",
            "GGMKVQAHQALI"
        ]
    },
    {
        "question": "For the protein sequence 'LLWWCICESQGYYDPHWMKFSW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LLWWCICESQGYYDPHWMKFSW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LLWWCICESQGYYDPHWMKFSW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'LLWWCICESQGYYDPHWMKFSW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LLWWCICESQGYYDPHWMKFSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'LLWWCICESQGYYDPHWMKFSW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LLWWCICESQGYYDPHWMKFSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'LLWWCICESQGYYDPHWMKFSW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LLWWCICESQGYYDPHWMKFSW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'ATACACCTTGTAAACACACGCGGCTTCTCCCTTCGCAAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATACACCTTGTAAACACACGCGGCTTCTCCCTTCGCAAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CACACGCGGC"
    },
    {
        "question": "Using the DNA sequence 'ATACACCTTGTAAACACACGCGGCTTCTCCCTTCGCAAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATACACCTTGTAAACACACGCGGCTTCTCCCTTCGCAAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IHLVNTRGFSLRK",
            "YTL",
            "TPCKHTRLLPSQ"
        ]
    },
    {
        "question": "For the protein sequence 'LTFANSTWSITVWTHPRNAALN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LTFANSTWSITVWTHPRNAALN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LTFANSTWSITVWTHPRNAALN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'LTFANSTWSITVWTHPRNAALN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LTFANSTWSITVWTHPRNAALN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            6
        ]
    },
    {
        "question": "For the protein sequence 'LTFANSTWSITVWTHPRNAALN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LTFANSTWSITVWTHPRNAALN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LTFANSTWSITVWTHPRNAALN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LTFANSTWSITVWTHPRNAALN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CTGGCCGAATTGTGCTTGCGTGTGGAAGGAGGGTAAGTCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTGGCCGAATTGTGCTTGCGTGTGGAAGGAGGGTAAGTCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGAAGGAGGG"
    },
    {
        "question": "Using the DNA sequence 'CTGGCCGAATTGTGCTTGCGTGTGGAAGGAGGGTAAGTCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTGGCCGAATTGTGCTTGCGTGTGGAAGGAGGGTAAGTCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LAELCLRVEGG",
            "WPNCACVWKEGKS",
            "GRIVLACGRRVS"
        ]
    },
    {
        "question": "For the protein sequence 'SFESWGMDNEHFFHDRKHWHPS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SFESWGMDNEHFFHDRKHWHPS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SFESWGMDNEHFFHDRKHWHPS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'SFESWGMDNEHFFHDRKHWHPS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SFESWGMDNEHFFHDRKHWHPS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            12
        ]
    },
    {
        "question": "For the protein sequence 'SFESWGMDNEHFFHDRKHWHPS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SFESWGMDNEHFFHDRKHWHPS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'SFESWGMDNEHFFHDRKHWHPS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SFESWGMDNEHFFHDRKHWHPS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CTATGTTTAAGGGTCCGTATCGAATTAACAACGGCCGTAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTATGTTTAAGGGTCCGTATCGAATTAACAACGGCCGTAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACAACGGCCG"
    },
    {
        "question": "Using the DNA sequence 'CTATGTTTAAGGGTCCGTATCGAATTAACAACGGCCGTAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTATGTTTAAGGGTCCGTATCGAATTAACAACGGCCGTAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LCLRVRIELTTAV",
            "YV",
            "MFKGPYRINNGR"
        ]
    },
    {
        "question": "For the protein sequence 'NTVMPIGGEPCDQWSRQVHWKE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NTVMPIGGEPCDQWSRQVHWKE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NTVMPIGGEPCDQWSRQVHWKE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'NTVMPIGGEPCDQWSRQVHWKE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTVMPIGGEPCDQWSRQVHWKE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'NTVMPIGGEPCDQWSRQVHWKE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTVMPIGGEPCDQWSRQVHWKE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'NTVMPIGGEPCDQWSRQVHWKE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTVMPIGGEPCDQWSRQVHWKE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'AAGGTACTAGCCGGTCAAAGGCACCGAACCGGCCAACACT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAGGTACTAGCCGGTCAAAGGCACCGAACCGGCCAACACT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGAACCGGC"
    },
    {
        "question": "Using the DNA sequence 'AAGGTACTAGCCGGTCAAAGGCACCGAACCGGCCAACACT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAGGTACTAGCCGGTCAAAGGCACCGAACCGGCCAACACT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KVLAGQRHRTGQH",
            "RY",
            "GTSRSKAPNRPT"
        ]
    },
    {
        "question": "For the protein sequence 'QPSILNPALQVNKDPQSNVELH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QPSILNPALQVNKDPQSNVELH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QPSILNPALQVNKDPQSNVELH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'QPSILNPALQVNKDPQSNVELH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPSILNPALQVNKDPQSNVELH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            2
        ]
    },
    {
        "question": "For the protein sequence 'QPSILNPALQVNKDPQSNVELH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPSILNPALQVNKDPQSNVELH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'QPSILNPALQVNKDPQSNVELH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPSILNPALQVNKDPQSNVELH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CCGATGCGGGTTAGTGCTGTGCATGGCGAAACTTACGCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGATGCGGGTTAGTGCTGTGCATGGCGAAACTTACGCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGATGCGGG"
    },
    {
        "question": "Using the DNA sequence 'CCGATGCGGGTTAGTGCTGTGCATGGCGAAACTTACGCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGATGCGGGTTAGTGCTGTGCATGGCGAAACTTACGCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PMRVSAVHGETYA",
            "RCGLVLCMAKLTQ",
            "DAG"
        ]
    },
    {
        "question": "For the protein sequence 'CCRYKVQTYSYTAMRFHMKMAE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CCRYKVQTYSYTAMRFHMKMAE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CCRYKVQTYSYTAMRFHMKMAE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'CCRYKVQTYSYTAMRFHMKMAE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CCRYKVQTYSYTAMRFHMKMAE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            10
        ]
    },
    {
        "question": "For the protein sequence 'CCRYKVQTYSYTAMRFHMKMAE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CCRYKVQTYSYTAMRFHMKMAE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'CCRYKVQTYSYTAMRFHMKMAE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CCRYKVQTYSYTAMRFHMKMAE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TGTCACTGATGCCATATCATCGAGTTTGTGCCATCCCCTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTCACTGATGCCATATCATCGAGTTTGTGCCATCCCCTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCCATCCC"
    },
    {
        "question": "Using the DNA sequence 'TGTCACTGATGCCATATCATCGAGTTTGTGCCATCCCCTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTCACTGATGCCATATCATCGAGTTTGTGCCATCCCCTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CH",
            "VTDAISSSLCHPL",
            "SLMPYHRVCAIP"
        ]
    },
    {
        "question": "For the protein sequence 'TYTEDHRSAMIRIAEELVPNWQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TYTEDHRSAMIRIAEELVPNWQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TYTEDHRSAMIRIAEELVPNWQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'TYTEDHRSAMIRIAEELVPNWQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TYTEDHRSAMIRIAEELVPNWQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            7
        ]
    },
    {
        "question": "For the protein sequence 'TYTEDHRSAMIRIAEELVPNWQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TYTEDHRSAMIRIAEELVPNWQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'TYTEDHRSAMIRIAEELVPNWQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TYTEDHRSAMIRIAEELVPNWQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TATACTTGTTTTGGGTACGATCCGGAGCGATGTCAGTCTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TATACTTGTTTTGGGTACGATCCGGAGCGATGTCAGTCTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGATCCGGAG"
    },
    {
        "question": "Using the DNA sequence 'TATACTTGTTTTGGGTACGATCCGGAGCGATGTCAGTCTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TATACTTGTTTTGGGTACGATCCGGAGCGATGTCAGTCTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YTCFGYDPERCQS",
            "ILVLGTIRSDVSL",
            "YLFWVRSGAMSV"
        ]
    },
    {
        "question": "For the protein sequence 'PKKTVMYDHEYKNAKHKVHVIN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PKKTVMYDHEYKNAKHKVHVIN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PKKTVMYDHEYKNAKHKVHVIN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'PKKTVMYDHEYKNAKHKVHVIN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PKKTVMYDHEYKNAKHKVHVIN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'PKKTVMYDHEYKNAKHKVHVIN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PKKTVMYDHEYKNAKHKVHVIN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'PKKTVMYDHEYKNAKHKVHVIN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PKKTVMYDHEYKNAKHKVHVIN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'TCGTCGCGCAGTCGATATATCTCGGGAGTGAAGAATATCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGTCGCGCAGTCGATATATCTCGGGAGTGAAGAATATCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTCGCGCAG"
    },
    {
        "question": "Using the DNA sequence 'TCGTCGCGCAGTCGATATATCTCGGGAGTGAAGAATATCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGTCGCGCAGTCGATATATCTCGGGAGTGAAGAATATCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SSRSRYISGVKNI",
            "RRAVDISRE",
            "VAQSIYLGSEEY"
        ]
    },
    {
        "question": "For the protein sequence 'EDCLIREWLIMPRPGWQFWNFT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EDCLIREWLIMPRPGWQFWNFT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EDCLIREWLIMPRPGWQFWNFT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'EDCLIREWLIMPRPGWQFWNFT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDCLIREWLIMPRPGWQFWNFT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            2
        ]
    },
    {
        "question": "For the protein sequence 'EDCLIREWLIMPRPGWQFWNFT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDCLIREWLIMPRPGWQFWNFT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'EDCLIREWLIMPRPGWQFWNFT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDCLIREWLIMPRPGWQFWNFT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'GCTTACCCCACAATGTCAGCCATTCGCTCGCTGACTGGCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCTTACCCCACAATGTCAGCCATTCGCTCGCTGACTGGCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGCTCGCTG"
    },
    {
        "question": "Using the DNA sequence 'GCTTACCCCACAATGTCAGCCATTCGCTCGCTGACTGGCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCTTACCCCACAATGTCAGCCATTCGCTCGCTGACTGGCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "AYPTMSAIRSLTG",
            "LTPQCQPFAR",
            "LPHNVSHSLADW"
        ]
    },
    {
        "question": "For the protein sequence 'GTFGTWNNPKNYRNESQYFDPR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GTFGTWNNPKNYRNESQYFDPR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GTFGTWNNPKNYRNESQYFDPR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'GTFGTWNNPKNYRNESQYFDPR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTFGTWNNPKNYRNESQYFDPR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            0
        ]
    },
    {
        "question": "For the protein sequence 'GTFGTWNNPKNYRNESQYFDPR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTFGTWNNPKNYRNESQYFDPR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'GTFGTWNNPKNYRNESQYFDPR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTFGTWNNPKNYRNESQYFDPR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'CGGTTGACTTATATAGCATCCGCGTGATGAGCTCTTGCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGGTTGACTTATATAGCATCCGCGTGATGAGCTCTTGCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGCATCCGCG"
    },
    {
        "question": "Using the DNA sequence 'CGGTTGACTTATATAGCATCCGCGTGATGAGCTCTTGCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGGTTGACTTATATAGCATCCGCGTGATGAGCTCTTGCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLTYIASA",
            "G",
            "VDLYSIRVMSSC"
        ]
    },
    {
        "question": "For the protein sequence 'DWTTNRYWCGMYIQCATCFHSR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DWTTNRYWCGMYIQCATCFHSR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DWTTNRYWCGMYIQCATCFHSR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'DWTTNRYWCGMYIQCATCFHSR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWTTNRYWCGMYIQCATCFHSR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            9
        ]
    },
    {
        "question": "For the protein sequence 'DWTTNRYWCGMYIQCATCFHSR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWTTNRYWCGMYIQCATCFHSR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'DWTTNRYWCGMYIQCATCFHSR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DWTTNRYWCGMYIQCATCFHSR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CTCCTGTCACTTAATATAGACACCTTGCTACCGGGTGGTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCCTGTCACTTAATATAGACACCTTGCTACCGGGTGGTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGCTACCGGG"
    },
    {
        "question": "Using the DNA sequence 'CTCCTGTCACTTAATATAGACACCTTGCTACCGGGTGGTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCCTGTCACTTAATATAGACACCTTGCTACCGGGTGGTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LLSLNIDTLLPGG",
            "SCHLI",
            "PVT"
        ]
    },
    {
        "question": "For the protein sequence 'RWYFEYTRLPLFNAQTLAFGCM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RWYFEYTRLPLFNAQTLAFGCM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RWYFEYTRLPLFNAQTLAFGCM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'RWYFEYTRLPLFNAQTLAFGCM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RWYFEYTRLPLFNAQTLAFGCM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            0
        ]
    },
    {
        "question": "For the protein sequence 'RWYFEYTRLPLFNAQTLAFGCM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RWYFEYTRLPLFNAQTLAFGCM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'RWYFEYTRLPLFNAQTLAFGCM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RWYFEYTRLPLFNAQTLAFGCM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'AAAGTGTATTTACGCGAATATAGGGAAGCCACGCTACCTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAAGTGTATTTACGCGAATATAGGGAAGCCACGCTACCTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGAAGCCAC"
    },
    {
        "question": "Using the DNA sequence 'AAAGTGTATTTACGCGAATATAGGGAAGCCACGCTACCTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAAGTGTATTTACGCGAATATAGGGAAGCCACGCTACCTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KVYLREYREATLP",
            "KCIYANIGKPRYL",
            "SVFTRI"
        ]
    },
    {
        "question": "For the protein sequence 'YYWNTFINGMASKLQNDVGSTE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YYWNTFINGMASKLQNDVGSTE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YYWNTFINGMASKLQNDVGSTE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'YYWNTFINGMASKLQNDVGSTE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YYWNTFINGMASKLQNDVGSTE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            0
        ]
    },
    {
        "question": "For the protein sequence 'YYWNTFINGMASKLQNDVGSTE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YYWNTFINGMASKLQNDVGSTE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'YYWNTFINGMASKLQNDVGSTE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YYWNTFINGMASKLQNDVGSTE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TGCCGGTATACCAGAGCAGTGAAGACCCCTACTCGTATGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGCCGGTATACCAGAGCAGTGAAGACCCCTACTCGTATGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCCTACTCG"
    },
    {
        "question": "Using the DNA sequence 'TGCCGGTATACCAGAGCAGTGAAGACCCCTACTCGTATGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGCCGGTATACCAGAGCAGTGAAGACCCCTACTCGTATGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CRYTRAVKTPTRM",
            "AGIPEQ",
            "PVYQSSEDPYSY"
        ]
    },
    {
        "question": "For the protein sequence 'HGMRAFNYWLVPFTEQPQMDIV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HGMRAFNYWLVPFTEQPQMDIV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HGMRAFNYWLVPFTEQPQMDIV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'HGMRAFNYWLVPFTEQPQMDIV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGMRAFNYWLVPFTEQPQMDIV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            2
        ]
    },
    {
        "question": "For the protein sequence 'HGMRAFNYWLVPFTEQPQMDIV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGMRAFNYWLVPFTEQPQMDIV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'HGMRAFNYWLVPFTEQPQMDIV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGMRAFNYWLVPFTEQPQMDIV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TAAGCAAGCAAGACAGTATACACCACGTTGCGGAAATTAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAAGCAAGCAAGACAGTATACACCACGTTGCGGAAATTAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCACGTTGCG"
    },
    {
        "question": "Using the DNA sequence 'TAAGCAAGCAAGACAGTATACACCACGTTGCGGAAATTAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAAGCAAGCAAGACAGTATACACCACGTTGCGGAAATTAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "KQARQYTPRCGNY",
            "SKQDSIHHVAEI"
        ]
    },
    {
        "question": "For the protein sequence 'GQVYTREIRWCAMQVKSLDGKR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GQVYTREIRWCAMQVKSLDGKR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GQVYTREIRWCAMQVKSLDGKR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'GQVYTREIRWCAMQVKSLDGKR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GQVYTREIRWCAMQVKSLDGKR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            4
        ]
    },
    {
        "question": "For the protein sequence 'GQVYTREIRWCAMQVKSLDGKR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GQVYTREIRWCAMQVKSLDGKR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'GQVYTREIRWCAMQVKSLDGKR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GQVYTREIRWCAMQVKSLDGKR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'AAGTACGATGGCTTCCGCCCTCCGCGACCCTAGAAGGTGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAGTACGATGGCTTCCGCCCTCCGCGACCCTAGAAGGTGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGCCCTCCG"
    },
    {
        "question": "Using the DNA sequence 'AAGTACGATGGCTTCCGCCCTCCGCGACCCTAGAAGGTGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAGTACGATGGCTTCCGCCCTCCGCGACCCTAGAAGGTGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KYDGFRPPRP",
            "STMASALRDPRR",
            "VRWLPPSATLEG"
        ]
    },
    {
        "question": "For the protein sequence 'FVCDLPQQIAEITLRIGATSKG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FVCDLPQQIAEITLRIGATSKG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FVCDLPQQIAEITLRIGATSKG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'FVCDLPQQIAEITLRIGATSKG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FVCDLPQQIAEITLRIGATSKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            6
        ]
    },
    {
        "question": "For the protein sequence 'FVCDLPQQIAEITLRIGATSKG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FVCDLPQQIAEITLRIGATSKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'FVCDLPQQIAEITLRIGATSKG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FVCDLPQQIAEITLRIGATSKG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CGGGCGCTGGTGAGGCTCATCGCAAGAAATCGCTTTCCAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGGGCGCTGGTGAGGCTCATCGCAAGAAATCGCTTTCCAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGGCGCTGG"
    },
    {
        "question": "Using the DNA sequence 'CGGGCGCTGGTGAGGCTCATCGCAAGAAATCGCTTTCCAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGGGCGCTGGTGAGGCTCATCGCAAGAAATCGCTTTCCAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RALVRLIARNRFP",
            "GRW",
            "GAGEAHRKKSLS"
        ]
    },
    {
        "question": "For the protein sequence 'DGGSFCVWEHAWHEQTPHLQRG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DGGSFCVWEHAWHEQTPHLQRG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DGGSFCVWEHAWHEQTPHLQRG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'DGGSFCVWEHAWHEQTPHLQRG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DGGSFCVWEHAWHEQTPHLQRG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            4
        ]
    },
    {
        "question": "For the protein sequence 'DGGSFCVWEHAWHEQTPHLQRG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DGGSFCVWEHAWHEQTPHLQRG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'DGGSFCVWEHAWHEQTPHLQRG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DGGSFCVWEHAWHEQTPHLQRG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TTCGCCGAGTACCCCCTTTTCGTGGTTTGAGTGAATGCTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTCGCCGAGTACCCCCTTTTCGTGGTTTGAGTGAATGCTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCCGAGTAC"
    },
    {
        "question": "Using the DNA sequence 'TTCGCCGAGTACCCCCTTTTCGTGGTTTGAGTGAATGCTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTCGCCGAGTACCCCCTTTTCGTGGTTTGAGTGAATGCTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "FAEYPLFVV",
            "SPSTPFSWFE",
            "RRVPPFRGLSEC"
        ]
    },
    {
        "question": "For the protein sequence 'YCPVQRKGILVEPERYNIHVQC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YCPVQRKGILVEPERYNIHVQC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YCPVQRKGILVEPERYNIHVQC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'YCPVQRKGILVEPERYNIHVQC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YCPVQRKGILVEPERYNIHVQC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'YCPVQRKGILVEPERYNIHVQC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YCPVQRKGILVEPERYNIHVQC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'YCPVQRKGILVEPERYNIHVQC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YCPVQRKGILVEPERYNIHVQC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CCACGTGAATTAGCTTGCTAAGGCCTAAGCGGATAAGATC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCACGTGAATTAGCTTGCTAAGGCCTAAGCGGATAAGATC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCCTAAGCG"
    },
    {
        "question": "Using the DNA sequence 'CCACGTGAATTAGCTTGCTAAGGCCTAAGCGGATAAGATC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCACGTGAATTAGCTTGCTAAGGCCTAAGCGGATAAGATC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PRELAC",
            "HVN",
            "T"
        ]
    },
    {
        "question": "For the protein sequence 'IIRTHAHKIFVYFRKLKVPAVK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IIRTHAHKIFVYFRKLKVPAVK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IIRTHAHKIFVYFRKLKVPAVK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'IIRTHAHKIFVYFRKLKVPAVK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IIRTHAHKIFVYFRKLKVPAVK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            3
        ]
    },
    {
        "question": "For the protein sequence 'IIRTHAHKIFVYFRKLKVPAVK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IIRTHAHKIFVYFRKLKVPAVK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'IIRTHAHKIFVYFRKLKVPAVK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IIRTHAHKIFVYFRKLKVPAVK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TCGGACTTAAAGTGGCATACGTGCCAGACCCGCGGCGTAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGGACTTAAAGTGGCATACGTGCCAGACCCGCGGCGTAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCCGCGGC"
    },
    {
        "question": "Using the DNA sequence 'TCGGACTTAAAGTGGCATACGTGCCAGACCCGCGGCGTAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGGACTTAAAGTGGCATACGTGCCAGACCCGCGGCGTAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SDLKWHTCQTRGV",
            "RT",
            "GLKVAYVPDPRR"
        ]
    },
    {
        "question": "For the protein sequence 'HRYLKCEHTWPECPLHFACYPS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HRYLKCEHTWPECPLHFACYPS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HRYLKCEHTWPECPLHFACYPS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'HRYLKCEHTWPECPLHFACYPS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HRYLKCEHTWPECPLHFACYPS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            11
        ]
    },
    {
        "question": "For the protein sequence 'HRYLKCEHTWPECPLHFACYPS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HRYLKCEHTWPECPLHFACYPS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'HRYLKCEHTWPECPLHFACYPS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HRYLKCEHTWPECPLHFACYPS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CGATTGATGAACGGCTTGACAAGTTTAGATTGACTGGGTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGATTGATGAACGGCTTGACAAGTTTAGATTGACTGGGTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GATGAACGGC"
    },
    {
        "question": "Using the DNA sequence 'CGATTGATGAACGGCTTGACAAGTTTAGATTGACTGGGTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGATTGATGAACGGCTTGACAAGTTTAGATTGACTGGGTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLMNGLTSLD",
            "D",
            "IDERLDKFRLTG"
        ]
    },
    {
        "question": "For the protein sequence 'ESPYGRNSDYMKSRFEKWKEAL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ESPYGRNSDYMKSRFEKWKEAL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ESPYGRNSDYMKSRFEKWKEAL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'ESPYGRNSDYMKSRFEKWKEAL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESPYGRNSDYMKSRFEKWKEAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            12
        ]
    },
    {
        "question": "For the protein sequence 'ESPYGRNSDYMKSRFEKWKEAL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESPYGRNSDYMKSRFEKWKEAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'ESPYGRNSDYMKSRFEKWKEAL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ESPYGRNSDYMKSRFEKWKEAL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'CAGGATGTGAACGTCCTGGGCAGCTCAATACGTGTGGGTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAGGATGTGAACGTCCTGGGCAGCTCAATACGTGTGGGTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTCCTGGGC"
    },
    {
        "question": "Using the DNA sequence 'CAGGATGTGAACGTCCTGGGCAGCTCAATACGTGTGGGTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAGGATGTGAACGTCCTGGGCAGCTCAATACGTGTGGGTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QDVNVLGSSIRVG",
            "RM",
            "GCERPGQLNTCG"
        ]
    },
    {
        "question": "For the protein sequence 'HVIYRRTRHRECMHPIIQPSGP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HVIYRRTRHRECMHPIIQPSGP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HVIYRRTRHRECMHPIIQPSGP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'HVIYRRTRHRECMHPIIQPSGP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HVIYRRTRHRECMHPIIQPSGP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            10
        ]
    },
    {
        "question": "For the protein sequence 'HVIYRRTRHRECMHPIIQPSGP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HVIYRRTRHRECMHPIIQPSGP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'HVIYRRTRHRECMHPIIQPSGP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HVIYRRTRHRECMHPIIQPSGP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TGGGACATTGTGTAAGCTATGATCGTGTAACTAAGATGTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGGACATTGTGTAAGCTATGATCGTGTAACTAAGATGTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGGGACATTG"
    },
    {
        "question": "Using the DNA sequence 'TGGGACATTGTGTAAGCTATGATCGTGTAACTAAGATGTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGGACATTGTGTAAGCTATGATCGTGTAACTAAGATGTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WDIV",
            "GTLCKL",
            "GHCVSYDRVTKM"
        ]
    },
    {
        "question": "For the protein sequence 'TQKLQFWHKEDRNTTNKSNYWA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TQKLQFWHKEDRNTTNKSNYWA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TQKLQFWHKEDRNTTNKSNYWA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'TQKLQFWHKEDRNTTNKSNYWA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TQKLQFWHKEDRNTTNKSNYWA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            0
        ]
    },
    {
        "question": "For the protein sequence 'TQKLQFWHKEDRNTTNKSNYWA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TQKLQFWHKEDRNTTNKSNYWA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'TQKLQFWHKEDRNTTNKSNYWA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TQKLQFWHKEDRNTTNKSNYWA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 3.4
    },
    {
        "question": "Given the DNA sequence 'CCGGTTAATGGACCTAATCGCGCGCTCTAGGGTTCAGGTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGGTTAATGGACCTAATCGCGCGCTCTAGGGTTCAGGTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGCGCGCTC"
    },
    {
        "question": "Using the DNA sequence 'CCGGTTAATGGACCTAATCGCGCGCTCTAGGGTTCAGGTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGGTTAATGGACCTAATCGCGCGCTCTAGGGTTCAGGTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PVNGPNRAL",
            "RLMDLIARSRVQV",
            "G"
        ]
    },
    {
        "question": "For the protein sequence 'NTTEMEFCTFWFKIKNMPYLQH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NTTEMEFCTFWFKIKNMPYLQH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NTTEMEFCTFWFKIKNMPYLQH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'NTTEMEFCTFWFKIKNMPYLQH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTTEMEFCTFWFKIKNMPYLQH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            4
        ]
    },
    {
        "question": "For the protein sequence 'NTTEMEFCTFWFKIKNMPYLQH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTTEMEFCTFWFKIKNMPYLQH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'NTTEMEFCTFWFKIKNMPYLQH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NTTEMEFCTFWFKIKNMPYLQH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GCGTTTATATGGTTGTAGCAATCCCGTGCACCGTGAATGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCGTTTATATGGTTGTAGCAATCCCGTGCACCGTGAATGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCGTGCACC"
    },
    {
        "question": "Using the DNA sequence 'GCGTTTATATGGTTGTAGCAATCCCGTGCACCGTGAATGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCGTTTATATGGTTGTAGCAATCCCGTGCACCGTGAATGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "AFIWL",
            "RLYGCSNPVHREC",
            "VYMVVAIPCTVN"
        ]
    },
    {
        "question": "For the protein sequence 'MAKQDFRTTPKWGRMRKYRMLF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MAKQDFRTTPKWGRMRKYRMLF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MAKQDFRTTPKWGRMRKYRMLF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'MAKQDFRTTPKWGRMRKYRMLF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MAKQDFRTTPKWGRMRKYRMLF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            12
        ]
    },
    {
        "question": "For the protein sequence 'MAKQDFRTTPKWGRMRKYRMLF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MAKQDFRTTPKWGRMRKYRMLF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'MAKQDFRTTPKWGRMRKYRMLF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MAKQDFRTTPKWGRMRKYRMLF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TACACTTGACGAAAAGAGAGAGCGGAGAACCCGTAGAAGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TACACTTGACGAAAAGAGAGAGCGGAGAACCCGTAGAAGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGAGAGCGG"
    },
    {
        "question": "Using the DNA sequence 'TACACTTGACGAAAAGAGAGAGCGGAGAACCCGTAGAAGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TACACTTGACGAAAAGAGAGAGCGGAGAACCCGTAGAAGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YT",
            "TLDEKRERRTRRS",
            "HLTKRESGEPVE"
        ]
    },
    {
        "question": "For the protein sequence 'ACVLLSGTQKGDCLYQLTWRSY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ACVLLSGTQKGDCLYQLTWRSY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ACVLLSGTQKGDCLYQLTWRSY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'ACVLLSGTQKGDCLYQLTWRSY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ACVLLSGTQKGDCLYQLTWRSY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            11
        ]
    },
    {
        "question": "For the protein sequence 'ACVLLSGTQKGDCLYQLTWRSY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ACVLLSGTQKGDCLYQLTWRSY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'ACVLLSGTQKGDCLYQLTWRSY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ACVLLSGTQKGDCLYQLTWRSY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TTGGTGTGGCCGACAGCTACTCCATATTGATAGTGAACTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTGGTGTGGCCGACAGCTACTCCATATTGATAGTGAACTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTGTGGCCG"
    },
    {
        "question": "Using the DNA sequence 'TTGGTGTGGCCGACAGCTACTCCATATTGATAGTGAACTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTGGTGTGGCCGACAGCTACTCCATATTGATAGTGAACTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LVWPTATPY",
            "WCGRQLLHIDSEL",
            "GVADSYSILIVN"
        ]
    },
    {
        "question": "For the protein sequence 'GHCTGKFFMGCRCMIMCNGDSK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GHCTGKFFMGCRCMIMCNGDSK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GHCTGKFFMGCRCMIMCNGDSK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'GHCTGKFFMGCRCMIMCNGDSK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHCTGKFFMGCRCMIMCNGDSK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            7
        ]
    },
    {
        "question": "For the protein sequence 'GHCTGKFFMGCRCMIMCNGDSK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHCTGKFFMGCRCMIMCNGDSK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'GHCTGKFFMGCRCMIMCNGDSK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GHCTGKFFMGCRCMIMCNGDSK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'ATGCCTGGTAGGCGTCGCGCTGGAGGAGGTAGAACATCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGCCTGGTAGGCGTCGCGCTGGAGGAGGTAGAACATCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCGTCGCGC"
    },
    {
        "question": "Using the DNA sequence 'ATGCCTGGTAGGCGTCGCGCTGGAGGAGGTAGAACATCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGCCTGGTAGGCGTCGCGCTGGAGGAGGTAGAACATCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MPGRRRAGGGRTS",
            "CLVGVALEEVEHR",
            "AW"
        ]
    },
    {
        "question": "For the protein sequence 'MKHHVHWFYFKLRTFAYKKNHE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MKHHVHWFYFKLRTFAYKKNHE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MKHHVHWFYFKLRTFAYKKNHE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'MKHHVHWFYFKLRTFAYKKNHE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MKHHVHWFYFKLRTFAYKKNHE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            1
        ]
    },
    {
        "question": "For the protein sequence 'MKHHVHWFYFKLRTFAYKKNHE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MKHHVHWFYFKLRTFAYKKNHE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'MKHHVHWFYFKLRTFAYKKNHE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MKHHVHWFYFKLRTFAYKKNHE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CTAGCGGGAGATGCCCCCTGACACAGAGGTATCGTAAGTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAGCGGGAGATGCCCCCTGACACAGAGGTATCGTAAGTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCCCCTGAC"
    },
    {
        "question": "Using the DNA sequence 'CTAGCGGGAGATGCCCCCTGACACAGAGGTATCGTAAGTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAGCGGGAGATGCCCCCTGACACAGAGGTATCGTAAGTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LAGDAP",
            "",
            "SGRCPLTQRYRK"
        ]
    },
    {
        "question": "For the protein sequence 'NWFTMQDKRYCPCFVASSPQYM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NWFTMQDKRYCPCFVASSPQYM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NWFTMQDKRYCPCFVASSPQYM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'NWFTMQDKRYCPCFVASSPQYM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWFTMQDKRYCPCFVASSPQYM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            7
        ]
    },
    {
        "question": "For the protein sequence 'NWFTMQDKRYCPCFVASSPQYM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWFTMQDKRYCPCFVASSPQYM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'NWFTMQDKRYCPCFVASSPQYM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWFTMQDKRYCPCFVASSPQYM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TCAGCCCTGATGAAGCCAATAGAAAGTGCCGTCCTTGAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCAGCCCTGATGAAGCCAATAGAAAGTGCCGTCCTTGAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGTGCCGTCC"
    },
    {
        "question": "Using the DNA sequence 'TCAGCCCTGATGAAGCCAATAGAAAGTGCCGTCCTTGAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCAGCCCTGATGAAGCCAATAGAAAGTGCCGTCCTTGAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SALMKPIESAVLE",
            "QP",
            "SPDEANRKCRP"
        ]
    },
    {
        "question": "For the protein sequence 'HISEGLTWNPVREHQVDGGDDV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HISEGLTWNPVREHQVDGGDDV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HISEGLTWNPVREHQVDGGDDV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'HISEGLTWNPVREHQVDGGDDV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HISEGLTWNPVREHQVDGGDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            5
        ]
    },
    {
        "question": "For the protein sequence 'HISEGLTWNPVREHQVDGGDDV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HISEGLTWNPVREHQVDGGDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'HISEGLTWNPVREHQVDGGDDV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HISEGLTWNPVREHQVDGGDDV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CATAATGCTCAGCATTGCTGGAATGTTCCTCATGCAGAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CATAATGCTCAGCATTGCTGGAATGTTCCTCATGCAGAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCATTGCTGG"
    },
    {
        "question": "Using the DNA sequence 'CATAATGCTCAGCATTGCTGGAATGTTCCTCATGCAGAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CATAATGCTCAGCATTGCTGGAATGTTCCTCATGCAGAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "HNAQHCWNVPHAE",
            "IMLSIAGMFLMQN",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'LQKERAWSIMEIYGINVVYQPN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LQKERAWSIMEIYGINVVYQPN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LQKERAWSIMEIYGINVVYQPN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'LQKERAWSIMEIYGINVVYQPN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LQKERAWSIMEIYGINVVYQPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            11
        ]
    },
    {
        "question": "For the protein sequence 'LQKERAWSIMEIYGINVVYQPN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LQKERAWSIMEIYGINVVYQPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'LQKERAWSIMEIYGINVVYQPN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LQKERAWSIMEIYGINVVYQPN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TCGCTTCCCCTGTTTTTAATATGACGGCCAGAGTTGCCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGCTTCCCCTGTTTTTAATATGACGGCCAGAGTTGCCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGCTTCCCC"
    },
    {
        "question": "Using the DNA sequence 'TCGCTTCCCCTGTTTTTAATATGACGGCCAGAGTTGCCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGCTTCCCCTGTTTTTAATATGACGGCCAGAGTTGCCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SLPLFLI",
            "RFPCF",
            "ASPVFNMTARVA"
        ]
    },
    {
        "question": "For the protein sequence 'PATCSQAQKSNYPATATPGAVC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PATCSQAQKSNYPATATPGAVC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PATCSQAQKSNYPATATPGAVC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'PATCSQAQKSNYPATATPGAVC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PATCSQAQKSNYPATATPGAVC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            8
        ]
    },
    {
        "question": "For the protein sequence 'PATCSQAQKSNYPATATPGAVC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PATCSQAQKSNYPATATPGAVC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'PATCSQAQKSNYPATATPGAVC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PATCSQAQKSNYPATATPGAVC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CGCAGTGTTACCGGCCCGTAGCGGGTTCGGGGACCAGTGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGCAGTGTTACCGGCCCGTAGCGGGTTCGGGGACCAGTGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TACCGGCCCG"
    },
    {
        "question": "Using the DNA sequence 'CGCAGTGTTACCGGCCCGTAGCGGGTTCGGGGACCAGTGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGCAGTGTTACCGGCCCGTAGCGGGTTCGGGGACCAGTGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RSVTGP",
            "AVLPARSGFGDQC",
            "QCYRPVAGSGTS"
        ]
    },
    {
        "question": "For the protein sequence 'QWMFQGQNTSYIWKLWEVETGF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QWMFQGQNTSYIWKLWEVETGF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QWMFQGQNTSYIWKLWEVETGF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "I"
    },
    {
        "question": "Given the protein sequence 'QWMFQGQNTSYIWKLWEVETGF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWMFQGQNTSYIWKLWEVETGF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            9
        ]
    },
    {
        "question": "For the protein sequence 'QWMFQGQNTSYIWKLWEVETGF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWMFQGQNTSYIWKLWEVETGF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'QWMFQGQNTSYIWKLWEVETGF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWMFQGQNTSYIWKLWEVETGF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ATCGCTTGTCAAGCAAGCCAGCGGTATTGACTCGCTGTTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATCGCTTGTCAAGCAAGCCAGCGGTATTGACTCGCTGTTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCAAGCCAGC"
    },
    {
        "question": "Using the DNA sequence 'ATCGCTTGTCAAGCAAGCCAGCGGTATTGACTCGCTGTTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATCGCTTGTCAAGCAAGCCAGCGGTATTGACTCGCTGTTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IACQASQRY",
            "SLVKQASGIDSLL",
            "RLSSKPAVLTRC"
        ]
    },
    {
        "question": "For the protein sequence 'PWVINYNHEDQPCVKLGCRHKT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PWVINYNHEDQPCVKLGCRHKT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PWVINYNHEDQPCVKLGCRHKT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "I"
    },
    {
        "question": "Given the protein sequence 'PWVINYNHEDQPCVKLGCRHKT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PWVINYNHEDQPCVKLGCRHKT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            0
        ]
    },
    {
        "question": "For the protein sequence 'PWVINYNHEDQPCVKLGCRHKT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PWVINYNHEDQPCVKLGCRHKT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'PWVINYNHEDQPCVKLGCRHKT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PWVINYNHEDQPCVKLGCRHKT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CTCTGGTTGTTGATACTCTCCCTATTGTATATAAAGCCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCTGGTTGTTGATACTCTCCCTATTGTATATAAAGCCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTCTGGTTGT"
    },
    {
        "question": "Using the DNA sequence 'CTCTGGTTGTTGATACTCTCCCTATTGTATATAAAGCCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCTGGTTGTTGATACTCTCCCTATTGTATATAAAGCCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LWLLILSLLYIKP",
            "SGC",
            "LVVDTLPIVYKA"
        ]
    },
    {
        "question": "For the protein sequence 'CSIMPKHWDHATEYYGPSKSRI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CSIMPKHWDHATEYYGPSKSRI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CSIMPKHWDHATEYYGPSKSRI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'CSIMPKHWDHATEYYGPSKSRI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSIMPKHWDHATEYYGPSKSRI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            8
        ]
    },
    {
        "question": "For the protein sequence 'CSIMPKHWDHATEYYGPSKSRI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSIMPKHWDHATEYYGPSKSRI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'CSIMPKHWDHATEYYGPSKSRI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSIMPKHWDHATEYYGPSKSRI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AATAACAAATATGATCCCCCAACTATATACGTAGAGGGAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AATAACAAATATGATCCCCCAACTATATACGTAGAGGGAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATGATCCCCC"
    },
    {
        "question": "Using the DNA sequence 'AATAACAAATATGATCCCCCAACTATATACGTAGAGGGAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AATAACAAATATGATCCCCCAACTATATACGTAGAGGGAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NNKYDPPTIYVEG",
            "ITNMIPQLYT",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'EKDMQPILLNTHYGEIGISNGW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EKDMQPILLNTHYGEIGISNGW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EKDMQPILLNTHYGEIGISNGW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'EKDMQPILLNTHYGEIGISNGW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EKDMQPILLNTHYGEIGISNGW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            10
        ]
    },
    {
        "question": "For the protein sequence 'EKDMQPILLNTHYGEIGISNGW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EKDMQPILLNTHYGEIGISNGW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'EKDMQPILLNTHYGEIGISNGW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EKDMQPILLNTHYGEIGISNGW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'CCGGGGGCAACTGATGGACAACCACAGAACCCAGCGCGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGGGGGCAACTGATGGACAACCACAGAACCCAGCGCGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGGGGGCAA"
    },
    {
        "question": "Using the DNA sequence 'CCGGGGGCAACTGATGGACAACCACAGAACCCAGCGCGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGGGGGCAACTGATGGACAACCACAGAACCCAGCGCGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PGATDGQPQNPAR",
            "RGQLMDNHRTQRE",
            "GGN"
        ]
    },
    {
        "question": "For the protein sequence 'QFEIPCDLGCAVMMVNKYRSIM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QFEIPCDLGCAVMMVNKYRSIM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QFEIPCDLGCAVMMVNKYRSIM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'QFEIPCDLGCAVMMVNKYRSIM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFEIPCDLGCAVMMVNKYRSIM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            4
        ]
    },
    {
        "question": "For the protein sequence 'QFEIPCDLGCAVMMVNKYRSIM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFEIPCDLGCAVMMVNKYRSIM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'QFEIPCDLGCAVMMVNKYRSIM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFEIPCDLGCAVMMVNKYRSIM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'TCCTTGTTAGTAATCCGTAACCGTGATAGTATCCAGGCCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCCTTGTTAGTAATCCGTAACCGTGATAGTATCCAGGCCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCCGTAACCG"
    },
    {
        "question": "Using the DNA sequence 'TCCTTGTTAGTAATCCGTAACCGTGATAGTATCCAGGCCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCCTTGTTAGTAATCCGTAACCGTGATAGTATCCAGGCCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SLLVIRNRDSIQA",
            "PC",
            "LVSNP"
        ]
    },
    {
        "question": "For the protein sequence 'YVCAHQANPRPTSQWDAAADAC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YVCAHQANPRPTSQWDAAADAC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YVCAHQANPRPTSQWDAAADAC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'YVCAHQANPRPTSQWDAAADAC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVCAHQANPRPTSQWDAAADAC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            1
        ]
    },
    {
        "question": "For the protein sequence 'YVCAHQANPRPTSQWDAAADAC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVCAHQANPRPTSQWDAAADAC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'YVCAHQANPRPTSQWDAAADAC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YVCAHQANPRPTSQWDAAADAC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TCGTAGTTACATCTGGGAGTATTGATTAGTACAAATCGTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGTAGTTACATCTGGGAGTATTGATTAGTACAAATCGTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CATCTGGGAG"
    },
    {
        "question": "Using the DNA sequence 'TCGTAGTTACATCTGGGAGTATTGATTAGTACAAATCGTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGTAGTTACATCTGGGAGTATTGATTAGTACAAATCGTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "S",
            "RSYIWEY",
            "VVTSGSID"
        ]
    },
    {
        "question": "For the protein sequence 'LVRLDAGEPRHAMTVVPERELS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LVRLDAGEPRHAMTVVPERELS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LVRLDAGEPRHAMTVVPERELS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'LVRLDAGEPRHAMTVVPERELS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVRLDAGEPRHAMTVVPERELS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            9
        ]
    },
    {
        "question": "For the protein sequence 'LVRLDAGEPRHAMTVVPERELS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVRLDAGEPRHAMTVVPERELS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'LVRLDAGEPRHAMTVVPERELS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVRLDAGEPRHAMTVVPERELS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GAAGATGTGATTAAAGCGGTGTCATCGAGTGATCAAATGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAAGATGTGATTAAAGCGGTGTCATCGAGTGATCAAATGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AAGCGGTGTC"
    },
    {
        "question": "Using the DNA sequence 'GAAGATGTGATTAAAGCGGTGTCATCGAGTGATCAAATGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAAGATGTGATTAAAGCGGTGTCATCGAGTGATCAAATGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "EDVIKAVSSSDQM",
            "KM",
            "RCD"
        ]
    },
    {
        "question": "For the protein sequence 'FAIYERLNDRNRIFKNGWAMVQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FAIYERLNDRNRIFKNGWAMVQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FAIYERLNDRNRIFKNGWAMVQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'FAIYERLNDRNRIFKNGWAMVQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FAIYERLNDRNRIFKNGWAMVQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            12
        ]
    },
    {
        "question": "For the protein sequence 'FAIYERLNDRNRIFKNGWAMVQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FAIYERLNDRNRIFKNGWAMVQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'FAIYERLNDRNRIFKNGWAMVQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FAIYERLNDRNRIFKNGWAMVQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ATGGGAACCAACCGTAGTTCTATCTCTTAAGACGGCTGCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGGGAACCAACCGTAGTTCTATCTCTTAAGACGGCTGCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACGGCTGCC"
    },
    {
        "question": "Using the DNA sequence 'ATGGGAACCAACCGTAGTTCTATCTCTTAAGACGGCTGCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGGGAACCAACCGTAGTTCTATCTCTTAAGACGGCTGCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MGTNRSSIS",
            "WEPTVVLSLKTAA",
            "GNQP"
        ]
    },
    {
        "question": "For the protein sequence 'HEHCHHCVMVPPMCYIDWLMAP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HEHCHHCVMVPPMCYIDWLMAP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HEHCHHCVMVPPMCYIDWLMAP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'HEHCHHCVMVPPMCYIDWLMAP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHCHHCVMVPPMCYIDWLMAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            12
        ]
    },
    {
        "question": "For the protein sequence 'HEHCHHCVMVPPMCYIDWLMAP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHCHHCVMVPPMCYIDWLMAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'HEHCHHCVMVPPMCYIDWLMAP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEHCHHCVMVPPMCYIDWLMAP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'ATAAGACCTACGTGAGAAAGACGGAGCAAAGGAGTAGCCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATAAGACCTACGTGAGAAAGACGGAGCAAAGGAGTAGCCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGAGTAGCCC"
    },
    {
        "question": "Using the DNA sequence 'ATAAGACCTACGTGAGAAAGACGGAGCAAAGGAGTAGCCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATAAGACCTACGTGAGAAAGACGGAGCAAAGGAGTAGCCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IRPT",
            "",
            "KTYVRKTEQRSS"
        ]
    },
    {
        "question": "For the protein sequence 'STLVGQIEGYGLTEEWWMWPHQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"STLVGQIEGYGLTEEWWMWPHQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"STLVGQIEGYGLTEEWWMWPHQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'STLVGQIEGYGLTEEWWMWPHQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"STLVGQIEGYGLTEEWWMWPHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            10
        ]
    },
    {
        "question": "For the protein sequence 'STLVGQIEGYGLTEEWWMWPHQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"STLVGQIEGYGLTEEWWMWPHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'STLVGQIEGYGLTEEWWMWPHQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"STLVGQIEGYGLTEEWWMWPHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CAATTTGGGCGCTCCGGCGATGATCCTACTAAGACCCCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAATTTGGGCGCTCCGGCGATGATCCTACTAAGACCCCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGCGCTCCG"
    },
    {
        "question": "Using the DNA sequence 'CAATTTGGGCGCTCCGGCGATGATCCTACTAAGACCCCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAATTTGGGCGCTCCGGCGATGATCCTACTAAGACCCCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QFGRSGDDPTKTP",
            "NLGAPAMILLRPH",
            "IWALRR"
        ]
    },
    {
        "question": "For the protein sequence 'AMVVPHHQVTVLAWFNMYCQFY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AMVVPHHQVTVLAWFNMYCQFY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AMVVPHHQVTVLAWFNMYCQFY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'AMVVPHHQVTVLAWFNMYCQFY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AMVVPHHQVTVLAWFNMYCQFY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            8
        ]
    },
    {
        "question": "For the protein sequence 'AMVVPHHQVTVLAWFNMYCQFY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AMVVPHHQVTVLAWFNMYCQFY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'AMVVPHHQVTVLAWFNMYCQFY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AMVVPHHQVTVLAWFNMYCQFY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'TCTTTCAGCGATAATCCCTCCCACCCGGTAGACTTCCATC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTTTCAGCGATAATCCCTCCCACCCGGTAGACTTCCATC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCTCCCACC"
    },
    {
        "question": "Using the DNA sequence 'TCTTTCAGCGATAATCCCTCCCACCCGGTAGACTTCCATC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTTTCAGCGATAATCCCTCCCACCCGGTAGACTTCCATC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SFSDNPSHPVDFH",
            "LSAIIPPTR",
            "FQR"
        ]
    },
    {
        "question": "For the protein sequence 'RHKGDDRHDMVCHIVKEEKSVH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RHKGDDRHDMVCHIVKEEKSVH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RHKGDDRHDMVCHIVKEEKSVH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'RHKGDDRHDMVCHIVKEEKSVH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHKGDDRHDMVCHIVKEEKSVH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            6
        ]
    },
    {
        "question": "For the protein sequence 'RHKGDDRHDMVCHIVKEEKSVH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHKGDDRHDMVCHIVKEEKSVH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'RHKGDDRHDMVCHIVKEEKSVH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHKGDDRHDMVCHIVKEEKSVH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'CGACTGGACCGGAAGGGTCGGGGGTACATGCGGGAACTAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGACTGGACCGGAAGGGTCGGGGGTACATGCGGGAACTAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGTCGGGGG"
    },
    {
        "question": "Using the DNA sequence 'CGACTGGACCGGAAGGGTCGGGGGTACATGCGGGAACTAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGACTGGACCGGAAGGGTCGGGGGTACATGCGGGAACTAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLDRKGRGYMREL",
            "DWTGRVGGTCGN",
            "TGPEGSGVHAGT"
        ]
    },
    {
        "question": "For the protein sequence 'RYFDIGQEIFFRKWHSLQFTFH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RYFDIGQEIFFRKWHSLQFTFH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RYFDIGQEIFFRKWHSLQFTFH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'RYFDIGQEIFFRKWHSLQFTFH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RYFDIGQEIFFRKWHSLQFTFH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            8
        ]
    },
    {
        "question": "For the protein sequence 'RYFDIGQEIFFRKWHSLQFTFH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RYFDIGQEIFFRKWHSLQFTFH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'RYFDIGQEIFFRKWHSLQFTFH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RYFDIGQEIFFRKWHSLQFTFH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CTGGGTTGAACTCTACCACCCAACCAGCGAATAAGCAGGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTGGGTTGAACTCTACCACCCAACCAGCGAATAAGCAGGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCACCCAACC"
    },
    {
        "question": "Using the DNA sequence 'CTGGGTTGAACTCTACCACCCAACCAGCGAATAAGCAGGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTGGGTTGAACTCTACCACCCAACCAGCGAATAAGCAGGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LG",
            "WVELYHPTSE",
            "GLNSTTQPANKQ"
        ]
    },
    {
        "question": "For the protein sequence 'NELAPVTHAWKFVVPRCCWLAP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NELAPVTHAWKFVVPRCCWLAP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NELAPVTHAWKFVVPRCCWLAP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'NELAPVTHAWKFVVPRCCWLAP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NELAPVTHAWKFVVPRCCWLAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            11
        ]
    },
    {
        "question": "For the protein sequence 'NELAPVTHAWKFVVPRCCWLAP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NELAPVTHAWKFVVPRCCWLAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'NELAPVTHAWKFVVPRCCWLAP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NELAPVTHAWKFVVPRCCWLAP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.375
    },
    {
        "question": "Given the DNA sequence 'CGAAATCGAAGGCGATACGTGGTGTAAGGTCGGTCTACAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGAAATCGAAGGCGATACGTGGTGTAAGGTCGGTCTACAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATCGAAGGCG"
    },
    {
        "question": "Using the DNA sequence 'CGAAATCGAAGGCGATACGTGGTGTAAGGTCGGTCTACAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGAAATCGAAGGCGATACGTGGTGTAAGGTCGGTCTACAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RNRRRYVV",
            "EIEGDTWCKVGLH",
            "KSKAIRGVRSVY"
        ]
    },
    {
        "question": "For the protein sequence 'EEVRQYLVYWNCWAWCDLHQDE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EEVRQYLVYWNCWAWCDLHQDE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EEVRQYLVYWNCWAWCDLHQDE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'EEVRQYLVYWNCWAWCDLHQDE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EEVRQYLVYWNCWAWCDLHQDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'EEVRQYLVYWNCWAWCDLHQDE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EEVRQYLVYWNCWAWCDLHQDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'EEVRQYLVYWNCWAWCDLHQDE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EEVRQYLVYWNCWAWCDLHQDE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GAGGACCAGACTAGTGCTTAGATCTATCCTTTTAGCGGTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAGGACCAGACTAGTGCTTAGATCTATCCTTTTAGCGGTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGGACCAGA"
    },
    {
        "question": "Using the DNA sequence 'GAGGACCAGACTAGTGCTTAGATCTATCCTTTTAGCGGTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAGGACCAGACTAGTGCTTAGATCTATCCTTTTAGCGGTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "EDQTSA",
            "RTRLVLRSILLAV",
            "GPD"
        ]
    },
    {
        "question": "For the protein sequence 'PPHCQHAIMWDFTAHNLIGVRP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PPHCQHAIMWDFTAHNLIGVRP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PPHCQHAIMWDFTAHNLIGVRP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'PPHCQHAIMWDFTAHNLIGVRP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPHCQHAIMWDFTAHNLIGVRP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            6
        ]
    },
    {
        "question": "For the protein sequence 'PPHCQHAIMWDFTAHNLIGVRP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPHCQHAIMWDFTAHNLIGVRP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'PPHCQHAIMWDFTAHNLIGVRP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPHCQHAIMWDFTAHNLIGVRP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'ATAAGCGCGCGCGTCGCGAACGATCTCTTAGGTTCCCGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATAAGCGCGCGCGTCGCGAACGATCTCTTAGGTTCCCGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGCGCGCGCG"
    },
    {
        "question": "Using the DNA sequence 'ATAAGCGCGCGCGTCGCGAACGATCTCTTAGGTTCCCGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATAAGCGCGCGCGTCGCGAACGATCTCTTAGGTTCCCGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ISARVANDLLGSR",
            "",
            "KRARRERSLRFP"
        ]
    },
    {
        "question": "For the protein sequence 'GCPSFCDEYWFWKFEAIYRDSY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GCPSFCDEYWFWKFEAIYRDSY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GCPSFCDEYWFWKFEAIYRDSY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'GCPSFCDEYWFWKFEAIYRDSY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GCPSFCDEYWFWKFEAIYRDSY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            8
        ]
    },
    {
        "question": "For the protein sequence 'GCPSFCDEYWFWKFEAIYRDSY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GCPSFCDEYWFWKFEAIYRDSY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'GCPSFCDEYWFWKFEAIYRDSY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GCPSFCDEYWFWKFEAIYRDSY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GTGGCCGGGATCATCGTCGTCAGCGCGCCGCCTTGGTTGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTGGCCGGGATCATCGTCGTCAGCGCGCCGCCTTGGTTGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGCGCCGCC"
    },
    {
        "question": "Using the DNA sequence 'GTGGCCGGGATCATCGTCGTCAGCGCGCCGCCTTGGTTGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTGGCCGGGATCATCGTCGTCAGCGCGCCGCCTTGGTTGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VAGIIVVSAPPWL",
            "WPGSSSSARRLGW",
            "GRDHRRQRAALV"
        ]
    },
    {
        "question": "For the protein sequence 'LDNSWNFMNPRAICMMWLKHCQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LDNSWNFMNPRAICMMWLKHCQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LDNSWNFMNPRAICMMWLKHCQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'LDNSWNFMNPRAICMMWLKHCQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDNSWNFMNPRAICMMWLKHCQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            11
        ]
    },
    {
        "question": "For the protein sequence 'LDNSWNFMNPRAICMMWLKHCQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDNSWNFMNPRAICMMWLKHCQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'LDNSWNFMNPRAICMMWLKHCQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDNSWNFMNPRAICMMWLKHCQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'AACCATATTGCCAGCAATGACCATAAAGCCTGAGAACTCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AACCATATTGCCAGCAATGACCATAAAGCCTGAGAACTCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCAGCAATG"
    },
    {
        "question": "Using the DNA sequence 'AACCATATTGCCAGCAATGACCATAAAGCCTGAGAACTCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AACCATATTGCCAGCAATGACCATAAAGCCTGAGAACTCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NHIASNDHKA",
            "TILPAMTIKPENS",
            "PYCQQ"
        ]
    },
    {
        "question": "For the protein sequence 'QKFSPGSCNCNSAPTYEFQRFQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QKFSPGSCNCNSAPTYEFQRFQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QKFSPGSCNCNSAPTYEFQRFQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'QKFSPGSCNCNSAPTYEFQRFQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QKFSPGSCNCNSAPTYEFQRFQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            12
        ]
    },
    {
        "question": "For the protein sequence 'QKFSPGSCNCNSAPTYEFQRFQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QKFSPGSCNCNSAPTYEFQRFQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'QKFSPGSCNCNSAPTYEFQRFQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QKFSPGSCNCNSAPTYEFQRFQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GCACCCCGCCGTCTGCGGGCAGATGGTCTTATAGTAGCTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCACCCCGCCGTCTGCGGGCAGATGGTCTTATAGTAGCTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCACCCCGCC"
    },
    {
        "question": "Using the DNA sequence 'GCACCCCGCCGTCTGCGGGCAGATGGTCTTATAGTAGCTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCACCCCGCCGTCTGCGGGCAGATGGTCTTATAGTAGCTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "APRRLRADGLIVA",
            "HPAVCGQMVL",
            "TPPSAGRWSYSS"
        ]
    },
    {
        "question": "For the protein sequence 'AHDTKDNMWAGFLDVTSPDQVT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AHDTKDNMWAGFLDVTSPDQVT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AHDTKDNMWAGFLDVTSPDQVT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'AHDTKDNMWAGFLDVTSPDQVT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AHDTKDNMWAGFLDVTSPDQVT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            6
        ]
    },
    {
        "question": "For the protein sequence 'AHDTKDNMWAGFLDVTSPDQVT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AHDTKDNMWAGFLDVTSPDQVT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'AHDTKDNMWAGFLDVTSPDQVT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AHDTKDNMWAGFLDVTSPDQVT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CTTTAACGGTCTTCTGAACAGGGCATTGGCCTGACAAGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTTAACGGTCTTCTGAACAGGGCATTGGCCTGACAAGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGCATTGGC"
    },
    {
        "question": "Using the DNA sequence 'CTTTAACGGTCTTCTGAACAGGGCATTGGCCTGACAAGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTTAACGGTCTTCTGAACAGGGCATTGGCCTGACAAGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "L",
            "FNGLLNRALA",
            "LTVF"
        ]
    },
    {
        "question": "For the protein sequence 'QGFQQTIHQLQDIIPHSHAHIT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QGFQQTIHQLQDIIPHSHAHIT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QGFQQTIHQLQDIIPHSHAHIT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'QGFQQTIHQLQDIIPHSHAHIT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFQQTIHQLQDIIPHSHAHIT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            12
        ]
    },
    {
        "question": "For the protein sequence 'QGFQQTIHQLQDIIPHSHAHIT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFQQTIHQLQDIIPHSHAHIT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'QGFQQTIHQLQDIIPHSHAHIT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFQQTIHQLQDIIPHSHAHIT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AGGCTACGGTCGTTGTAGCGAAAGGTTCTCTTGCACATGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGGCTACGGTCGTTGTAGCGAAAGGTTCTCTTGCACATGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCTACGGTC"
    },
    {
        "question": "Using the DNA sequence 'AGGCTACGGTCGTTGTAGCGAAAGGTTCTCTTGCACATGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGGCTACGGTCGTTGTAGCGAAAGGTTCTCTTGCACATGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLRSL",
            "GYGRCSERFSCTC",
            "ATVVVAKGSLAH"
        ]
    },
    {
        "question": "For the protein sequence 'CSQDQQTSLQGIHASQLMFGSC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CSQDQQTSLQGIHASQLMFGSC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CSQDQQTSLQGIHASQLMFGSC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'CSQDQQTSLQGIHASQLMFGSC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSQDQQTSLQGIHASQLMFGSC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            11
        ]
    },
    {
        "question": "For the protein sequence 'CSQDQQTSLQGIHASQLMFGSC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSQDQQTSLQGIHASQLMFGSC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'CSQDQQTSLQGIHASQLMFGSC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CSQDQQTSLQGIHASQLMFGSC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GACATTACGCATTGTCCGCGGAAACGAAAGCCAGGGAGCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GACATTACGCATTGTCCGCGGAAACGAAAGCCAGGGAGCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCAGGGAGC"
    },
    {
        "question": "Using the DNA sequence 'GACATTACGCATTGTCCGCGGAAACGAAAGCCAGGGAGCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GACATTACGCATTGTCCGCGGAAACGAAAGCCAGGGAGCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DITHCPRKRKPGS",
            "TLRIVRGNESQGA",
            "HYALSAETKARE"
        ]
    },
    {
        "question": "For the protein sequence 'PEFTNPEKWKSHHEHIHTSRLC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PEFTNPEKWKSHHEHIHTSRLC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PEFTNPEKWKSHHEHIHTSRLC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'PEFTNPEKWKSHHEHIHTSRLC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PEFTNPEKWKSHHEHIHTSRLC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            9
        ]
    },
    {
        "question": "For the protein sequence 'PEFTNPEKWKSHHEHIHTSRLC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PEFTNPEKWKSHHEHIHTSRLC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'PEFTNPEKWKSHHEHIHTSRLC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PEFTNPEKWKSHHEHIHTSRLC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 2.142857142857143
    },
    {
        "question": "Given the DNA sequence 'GCCTCCTGTGCCGACGACGCATTTGCAGATGGCGCATAGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCCTCCTGTGCCGACGACGCATTTGCAGATGGCGCATAGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCGACGACG"
    },
    {
        "question": "Using the DNA sequence 'GCCTCCTGTGCCGACGACGCATTTGCAGATGGCGCATAGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCCTCCTGTGCCGACGACGCATTTGCAGATGGCGCATAGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASCADDAFADGA",
            "PPVPTTHLQMAHR",
            "LLCRRRICRWRI"
        ]
    },
    {
        "question": "For the protein sequence 'SYHDTSHNKVIMMHHYECCCNI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SYHDTSHNKVIMMHHYECCCNI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SYHDTSHNKVIMMHHYECCCNI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'SYHDTSHNKVIMMHHYECCCNI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SYHDTSHNKVIMMHHYECCCNI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            12
        ]
    },
    {
        "question": "For the protein sequence 'SYHDTSHNKVIMMHHYECCCNI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SYHDTSHNKVIMMHHYECCCNI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'SYHDTSHNKVIMMHHYECCCNI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SYHDTSHNKVIMMHHYECCCNI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'AAAGCTCTGTCTGGGGGCAAAGGGTGGCATGGTGCAGTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAAGCTCTGTCTGGGGGCAAAGGGTGGCATGGTGCAGTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCTGGGGGC"
    },
    {
        "question": "Using the DNA sequence 'AAAGCTCTGTCTGGGGGCAAAGGGTGGCATGGTGCAGTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAAGCTCTGTCTGGGGGCAAAGGGTGGCATGGTGCAGTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KALSGGKGWHGAV",
            "KLCLGAKGGMVQC",
            "SSVWGQRVAWCS"
        ]
    },
    {
        "question": "For the protein sequence 'VYAEEAERVRLDKDDPYVGKPP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VYAEEAERVRLDKDDPYVGKPP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VYAEEAERVRLDKDDPYVGKPP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'VYAEEAERVRLDKDDPYVGKPP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYAEEAERVRLDKDDPYVGKPP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            5
        ]
    },
    {
        "question": "For the protein sequence 'VYAEEAERVRLDKDDPYVGKPP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYAEEAERVRLDKDDPYVGKPP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'VYAEEAERVRLDKDDPYVGKPP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYAEEAERVRLDKDDPYVGKPP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TTACGTATGTGCTGCAAGGTAATTTACCTAACACCAACTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTACGTATGTGCTGCAAGGTAATTTACCTAACACCAACTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCTGCAAG"
    },
    {
        "question": "Using the DNA sequence 'TTACGTATGTGCTGCAAGGTAATTTACCTAACACCAACTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTACGTATGTGCTGCAAGGTAATTTACCTAACACCAACTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LRMCCKVIYLTPT",
            "YVCAAR",
            "TYVLQGNLPNTN"
        ]
    },
    {
        "question": "For the protein sequence 'KMTRMTMVMKKSICKMTLQIKG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KMTRMTMVMKKSICKMTLQIKG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KMTRMTMVMKKSICKMTLQIKG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'KMTRMTMVMKKSICKMTLQIKG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KMTRMTMVMKKSICKMTLQIKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            10
        ]
    },
    {
        "question": "For the protein sequence 'KMTRMTMVMKKSICKMTLQIKG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KMTRMTMVMKKSICKMTLQIKG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'KMTRMTMVMKKSICKMTLQIKG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KMTRMTMVMKKSICKMTLQIKG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TCTAAATATTAAGACCCTCCCCTCACCGCTATCACATGAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTAAATATTAAGACCCTCCCCTCACCGCTATCACATGAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCCTCCCC"
    },
    {
        "question": "Using the DNA sequence 'TCTAAATATTAAGACCCTCCCCTCACCGCTATCACATGAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTAAATATTAAGACCCTCCCCTCACCGCTATCACATGAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SKY",
            "LNIKTLPSPLSHD",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'VWDEPCKIYALLKNAVAEQFET', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VWDEPCKIYALLKNAVAEQFET\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VWDEPCKIYALLKNAVAEQFET\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'VWDEPCKIYALLKNAVAEQFET', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDEPCKIYALLKNAVAEQFET\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            2
        ]
    },
    {
        "question": "For the protein sequence 'VWDEPCKIYALLKNAVAEQFET', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDEPCKIYALLKNAVAEQFET\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'VWDEPCKIYALLKNAVAEQFET', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VWDEPCKIYALLKNAVAEQFET\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GAGCGGTTTGTTAGCCAAAACGTGAACTCCCGTATAATCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAGCGGTTTGTTAGCCAAAACGTGAACTCCCGTATAATCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGCGGTTTG"
    },
    {
        "question": "Using the DNA sequence 'GAGCGGTTTGTTAGCCAAAACGTGAACTCCCGTATAATCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAGCGGTTTGTTAGCCAAAACGTGAACTCCCGTATAATCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ERFVSQNVNSRII",
            "SGLLAKT",
            "AVC"
        ]
    },
    {
        "question": "For the protein sequence 'NVEPTFWYYNRTQPLKKKLMIE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NVEPTFWYYNRTQPLKKKLMIE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NVEPTFWYYNRTQPLKKKLMIE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'NVEPTFWYYNRTQPLKKKLMIE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVEPTFWYYNRTQPLKKKLMIE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            3
        ]
    },
    {
        "question": "For the protein sequence 'NVEPTFWYYNRTQPLKKKLMIE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVEPTFWYYNRTQPLKKKLMIE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'NVEPTFWYYNRTQPLKKKLMIE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVEPTFWYYNRTQPLKKKLMIE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TACCATAAGACTTAGAGGGATACAGACGACGAATTTTCCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TACCATAAGACTTAGAGGGATACAGACGACGAATTTTCCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACAGACGACG"
    },
    {
        "question": "Using the DNA sequence 'TACCATAAGACTTAGAGGGATACAGACGACGAATTTTCCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TACCATAAGACTTAGAGGGATACAGACGACGAATTTTCCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YHKT",
            "TIRLRGIQTTNFP",
            "P"
        ]
    },
    {
        "question": "For the protein sequence 'TWAFRPWIPADNYEKEMFMSCG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TWAFRPWIPADNYEKEMFMSCG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TWAFRPWIPADNYEKEMFMSCG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'TWAFRPWIPADNYEKEMFMSCG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TWAFRPWIPADNYEKEMFMSCG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            1
        ]
    },
    {
        "question": "For the protein sequence 'TWAFRPWIPADNYEKEMFMSCG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TWAFRPWIPADNYEKEMFMSCG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'TWAFRPWIPADNYEKEMFMSCG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TWAFRPWIPADNYEKEMFMSCG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GACCGTATGGAGTCGCAACTAACCCAAAAGTTAATTCCGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GACCGTATGGAGTCGCAACTAACCCAAAAGTTAATTCCGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCGTATGG"
    },
    {
        "question": "Using the DNA sequence 'GACCGTATGGAGTCGCAACTAACCCAAAAGTTAATTCCGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GACCGTATGGAGTCGCAACTAACCCAAAAGTTAATTCCGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DRMESQLTQKLIP",
            "TVWSRN",
            "PYGVATNPKVNS"
        ]
    },
    {
        "question": "For the protein sequence 'WGFGDNYAYEVKGIRTDPKFNP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WGFGDNYAYEVKGIRTDPKFNP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WGFGDNYAYEVKGIRTDPKFNP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'WGFGDNYAYEVKGIRTDPKFNP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGFGDNYAYEVKGIRTDPKFNP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            5
        ]
    },
    {
        "question": "For the protein sequence 'WGFGDNYAYEVKGIRTDPKFNP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGFGDNYAYEVKGIRTDPKFNP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'WGFGDNYAYEVKGIRTDPKFNP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGFGDNYAYEVKGIRTDPKFNP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GAGCAGCTTTAGGAAGGTGGCGGACTGCTGTCCACTGTTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAGCAGCTTTAGGAAGGTGGCGGACTGCTGTCCACTGTTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTGGCGGAC"
    },
    {
        "question": "Using the DNA sequence 'GAGCAGCTTTAGGAAGGTGGCGGACTGCTGTCCACTGTTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAGCAGCTTTAGGAAGGTGGCGGACTGCTGTCCACTGTTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "EQL",
            "SSFRKVADCCPLF",
            "AALGRWRTAVHC"
        ]
    },
    {
        "question": "For the protein sequence 'HGHWPKCDTGCRKPPLIYIWNE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HGHWPKCDTGCRKPPLIYIWNE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HGHWPKCDTGCRKPPLIYIWNE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'HGHWPKCDTGCRKPPLIYIWNE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGHWPKCDTGCRKPPLIYIWNE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            12
        ]
    },
    {
        "question": "For the protein sequence 'HGHWPKCDTGCRKPPLIYIWNE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGHWPKCDTGCRKPPLIYIWNE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'HGHWPKCDTGCRKPPLIYIWNE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HGHWPKCDTGCRKPPLIYIWNE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GGCAACACCCTGGCGGGTTATCACGCCCCCACACAATTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGCAACACCCTGGCGGGTTATCACGCCCCCACACAATTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCTGGCGGG"
    },
    {
        "question": "Using the DNA sequence 'GGCAACACCCTGGCGGGTTATCACGCCCCCACACAATTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGCAACACCCTGGCGGGTTATCACGCCCCCACACAATTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GNTLAGYHAPTQL",
            "ATPWRVITPPHNC",
            "QHPGGLSRPHTI"
        ]
    },
    {
        "question": "For the protein sequence 'HWGYAWGRPYMQNPGWGPFDWM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HWGYAWGRPYMQNPGWGPFDWM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HWGYAWGRPYMQNPGWGPFDWM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'HWGYAWGRPYMQNPGWGPFDWM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HWGYAWGRPYMQNPGWGPFDWM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            0
        ]
    },
    {
        "question": "For the protein sequence 'HWGYAWGRPYMQNPGWGPFDWM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HWGYAWGRPYMQNPGWGPFDWM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'HWGYAWGRPYMQNPGWGPFDWM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HWGYAWGRPYMQNPGWGPFDWM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'TCTCCCTTGCCACTCGAACGTGAGATAATTGCGGAGCGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTCCCTTGCCACTCGAACGTGAGATAATTGCGGAGCGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGCGGAGCGC"
    },
    {
        "question": "Using the DNA sequence 'TCTCCCTTGCCACTCGAACGTGAGATAATTGCGGAGCGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTCCCTTGCCACTCGAACGTGAGATAATTGCGGAGCGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SPLPLEREIIAER",
            "LPCHSNVR",
            "SLATRT"
        ]
    },
    {
        "question": "For the protein sequence 'HEERPYLKKQHITAFAHKWEQM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HEERPYLKKQHITAFAHKWEQM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HEERPYLKKQHITAFAHKWEQM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'HEERPYLKKQHITAFAHKWEQM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEERPYLKKQHITAFAHKWEQM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            9
        ]
    },
    {
        "question": "For the protein sequence 'HEERPYLKKQHITAFAHKWEQM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEERPYLKKQHITAFAHKWEQM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'HEERPYLKKQHITAFAHKWEQM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEERPYLKKQHITAFAHKWEQM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'AGTGCTCGAGCGTCTGAAATATGGGGATGCTTTGAGCGGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGTGCTCGAGCGTCTGAAATATGGGGATGCTTTGAGCGGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCTCGAGC"
    },
    {
        "question": "Using the DNA sequence 'AGTGCTCGAGCGTCTGAAATATGGGGATGCTTTGAGCGGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGTGCTCGAGCGTCTGAAATATGGGGATGCTTTGAGCGGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SARASEIWGCFER",
            "VLERLKYGDALSG",
            "CSSV"
        ]
    },
    {
        "question": "For the protein sequence 'RNIINYRPMWNNCESIFSCNER', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RNIINYRPMWNNCESIFSCNER\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RNIINYRPMWNNCESIFSCNER\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'RNIINYRPMWNNCESIFSCNER', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RNIINYRPMWNNCESIFSCNER\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'RNIINYRPMWNNCESIFSCNER', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RNIINYRPMWNNCESIFSCNER\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'RNIINYRPMWNNCESIFSCNER', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RNIINYRPMWNNCESIFSCNER\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTGATGTCTTAATTTCCGCTGGATAAAAAGTACGGAAAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTGATGTCTTAATTTCCGCTGGATAAAAAGTACGGAAAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TTTCCGCTGG"
    },
    {
        "question": "Using the DNA sequence 'CTGATGTCTTAATTTCCGCTGGATAAAAAGTACGGAAAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTGATGTCTTAATTTCCGCTGGATAAAAAGTACGGAAAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LMS",
            "",
            "DVLISAG"
        ]
    },
    {
        "question": "For the protein sequence 'FLMQHTGEEHRNFLPGPSIDSD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FLMQHTGEEHRNFLPGPSIDSD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FLMQHTGEEHRNFLPGPSIDSD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'FLMQHTGEEHRNFLPGPSIDSD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FLMQHTGEEHRNFLPGPSIDSD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            7
        ]
    },
    {
        "question": "For the protein sequence 'FLMQHTGEEHRNFLPGPSIDSD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FLMQHTGEEHRNFLPGPSIDSD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'FLMQHTGEEHRNFLPGPSIDSD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FLMQHTGEEHRNFLPGPSIDSD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCGAGGCCGAACACCGCTTTTTGTGGCGGTGGTTGGAAGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGAGGCCGAACACCGCTTTTTGTGGCGGTGGTTGGAAGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGGCGGTGG"
    },
    {
        "question": "Using the DNA sequence 'TCGAGGCCGAACACCGCTTTTTGTGGCGGTGGTTGGAAGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGAGGCCGAACACCGCTTTTTGTGGCGGTGGTTGGAAGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SRPNTAFCGGGWK",
            "RGRTPLFVAVVGR",
            "EAEHRFLWRWLE"
        ]
    },
    {
        "question": "For the protein sequence 'HEKTEKTFIRCCTAHQTWMDGK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HEKTEKTFIRCCTAHQTWMDGK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HEKTEKTFIRCCTAHQTWMDGK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'HEKTEKTFIRCCTAHQTWMDGK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEKTEKTFIRCCTAHQTWMDGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            5
        ]
    },
    {
        "question": "For the protein sequence 'HEKTEKTFIRCCTAHQTWMDGK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEKTEKTFIRCCTAHQTWMDGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'HEKTEKTFIRCCTAHQTWMDGK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HEKTEKTFIRCCTAHQTWMDGK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GGTAAACCTAGACCAGTACGGCGGTGCCAACCGGTTACTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTAAACCTAGACCAGTACGGCGGTGCCAACCGGTTACTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGCGGTGCC"
    },
    {
        "question": "Using the DNA sequence 'GGTAAACCTAGACCAGTACGGCGGTGCCAACCGGTTACTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTAAACCTAGACCAGTACGGCGGTGCCAACCGGTTACTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GKPRPVRRCQPVT",
            "VNLDQYGGANRLL",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'ANWASCSDFPHFHLFITQLWMK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ANWASCSDFPHFHLFITQLWMK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ANWASCSDFPHFHLFITQLWMK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'ANWASCSDFPHFHLFITQLWMK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ANWASCSDFPHFHLFITQLWMK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            8
        ]
    },
    {
        "question": "For the protein sequence 'ANWASCSDFPHFHLFITQLWMK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ANWASCSDFPHFHLFITQLWMK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'ANWASCSDFPHFHLFITQLWMK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ANWASCSDFPHFHLFITQLWMK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GCATCTTGGACCCTTTAATTTTTCTGGGGGCGATGGGGCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCATCTTGGACCCTTTAATTTTTCTGGGGGCGATGGGGCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCTGGGGGCG"
    },
    {
        "question": "Using the DNA sequence 'GCATCTTGGACCCTTTAATTTTTCTGGGGGCGATGGGGCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCATCTTGGACCCTTTAATTTTTCTGGGGGCGATGGGGCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASWTL",
            "HLGPFNFSGGDGA",
            "ILDPLIFLGAMG"
        ]
    },
    {
        "question": "For the protein sequence 'YPVVHMDGLLNYDVKHDRNNEP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YPVVHMDGLLNYDVKHDRNNEP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YPVVHMDGLLNYDVKHDRNNEP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'YPVVHMDGLLNYDVKHDRNNEP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YPVVHMDGLLNYDVKHDRNNEP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            3
        ]
    },
    {
        "question": "For the protein sequence 'YPVVHMDGLLNYDVKHDRNNEP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YPVVHMDGLLNYDVKHDRNNEP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'YPVVHMDGLLNYDVKHDRNNEP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YPVVHMDGLLNYDVKHDRNNEP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTAGACAGGCCAGCCTTTCAGCGGGATCGATTTCCAGTGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAGACAGGCCAGCCTTTCAGCGGGATCGATTTCCAGTGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAGGCCAGCC"
    },
    {
        "question": "Using the DNA sequence 'CTAGACAGGCCAGCCTTTCAGCGGGATCGATTTCCAGTGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAGACAGGCCAGCCTTTCAGCGGGATCGATTTCCAGTGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LDRPAFQRDRFPV",
            "",
            "RQASLSAGSISS"
        ]
    },
    {
        "question": "For the protein sequence 'PTGHGSAHYWYALYRMIFPTTL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PTGHGSAHYWYALYRMIFPTTL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PTGHGSAHYWYALYRMIFPTTL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'PTGHGSAHYWYALYRMIFPTTL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PTGHGSAHYWYALYRMIFPTTL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            7
        ]
    },
    {
        "question": "For the protein sequence 'PTGHGSAHYWYALYRMIFPTTL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PTGHGSAHYWYALYRMIFPTTL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'PTGHGSAHYWYALYRMIFPTTL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PTGHGSAHYWYALYRMIFPTTL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TGCATGAAAGGTTGAAGACCTCGCGATTGCTATGTACCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGCATGAAAGGTTGAAGACCTCGCGATTGCTATGTACCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGACCTCGCG"
    },
    {
        "question": "Using the DNA sequence 'TGCATGAAAGGTTGAAGACCTCGCGATTGCTATGTACCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGCATGAAAGGTTGAAGACCTCGCGATTGCTATGTACCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CMKG",
            "A",
            "HERLKTSRLLCT"
        ]
    },
    {
        "question": "For the protein sequence 'AKRVYTLTWEPFAWDSCIESIC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AKRVYTLTWEPFAWDSCIESIC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AKRVYTLTWEPFAWDSCIESIC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'AKRVYTLTWEPFAWDSCIESIC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AKRVYTLTWEPFAWDSCIESIC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            3
        ]
    },
    {
        "question": "For the protein sequence 'AKRVYTLTWEPFAWDSCIESIC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AKRVYTLTWEPFAWDSCIESIC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'AKRVYTLTWEPFAWDSCIESIC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AKRVYTLTWEPFAWDSCIESIC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'AGATGCAGGGGCGAACGTTCTTCTTTGTCCCGTATGAAAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGATGCAGGGGCGAACGTTCTTCTTTGTCCCGTATGAAAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGCAGGGGCG"
    },
    {
        "question": "Using the DNA sequence 'AGATGCAGGGGCGAACGTTCTTCTTTGTCCCGTATGAAAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGATGCAGGGGCGAACGTTCTTCTTTGTCCCGTATGAAAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RCRGERSSLSRMK",
            "DAGANVLLCPV",
            "MQGRTFFFVPYE"
        ]
    },
    {
        "question": "For the protein sequence 'ECQAFSDEQFGHCMYHFCVTIV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ECQAFSDEQFGHCMYHFCVTIV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ECQAFSDEQFGHCMYHFCVTIV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'ECQAFSDEQFGHCMYHFCVTIV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECQAFSDEQFGHCMYHFCVTIV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            11
        ]
    },
    {
        "question": "For the protein sequence 'ECQAFSDEQFGHCMYHFCVTIV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECQAFSDEQFGHCMYHFCVTIV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'ECQAFSDEQFGHCMYHFCVTIV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECQAFSDEQFGHCMYHFCVTIV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'AAGAGAGGGGTATTAGTGCGCGCCATTCATCCGGAGTGCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAGAGAGGGGTATTAGTGCGCGCCATTCATCCGGAGTGCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGTGCGCGCC"
    },
    {
        "question": "Using the DNA sequence 'AAGAGAGGGGTATTAGTGCGCGCCATTCATCCGGAGTGCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAGAGAGGGGTATTAGTGCGCGCCATTCATCCGGAGTGCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KRGVLVRAIHPEC",
            "REGY",
            "ERGISARHSSGV"
        ]
    },
    {
        "question": "For the protein sequence 'EHQRMTRSSAGGGRGAEMMGEN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EHQRMTRSSAGGGRGAEMMGEN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EHQRMTRSSAGGGRGAEMMGEN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'EHQRMTRSSAGGGRGAEMMGEN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EHQRMTRSSAGGGRGAEMMGEN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            12
        ]
    },
    {
        "question": "For the protein sequence 'EHQRMTRSSAGGGRGAEMMGEN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EHQRMTRSSAGGGRGAEMMGEN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'EHQRMTRSSAGGGRGAEMMGEN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EHQRMTRSSAGGGRGAEMMGEN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TATCTCCAGCCTAACCTTGCGCGATCCCGCGACTATGCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TATCTCCAGCCTAACCTTGCGCGATCCCGCGACTATGCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGCGATCCC"
    },
    {
        "question": "Using the DNA sequence 'TATCTCCAGCCTAACCTTGCGCGATCCCGCGACTATGCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TATCTCCAGCCTAACCTTGCGCGATCCCGCGACTATGCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YLQPNLARSRDYA",
            "ISSLTLRDPATMH",
            "SPA"
        ]
    },
    {
        "question": "For the protein sequence 'IAALHCVICSIDIWDFRVMLHY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IAALHCVICSIDIWDFRVMLHY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IAALHCVICSIDIWDFRVMLHY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'IAALHCVICSIDIWDFRVMLHY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IAALHCVICSIDIWDFRVMLHY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            0
        ]
    },
    {
        "question": "For the protein sequence 'IAALHCVICSIDIWDFRVMLHY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IAALHCVICSIDIWDFRVMLHY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'IAALHCVICSIDIWDFRVMLHY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IAALHCVICSIDIWDFRVMLHY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'CTATGTCACCGGGGACGAACAGTATACTAAACTCCGTCTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTATGTCACCGGGGACGAACAGTATACTAAACTCCGTCTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCACCGGGG"
    },
    {
        "question": "Using the DNA sequence 'CTATGTCACCGGGGACGAACAGTATACTAAACTCCGTCTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTATGTCACCGGGGACGAACAGTATACTAAACTCCGTCTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LCHRGRTVY",
            "YVTGDEQYTKLRL",
            "MSPGTNSILNSV"
        ]
    },
    {
        "question": "For the protein sequence 'WQAVMSYRTLMPLGPYMERHIE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WQAVMSYRTLMPLGPYMERHIE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WQAVMSYRTLMPLGPYMERHIE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'WQAVMSYRTLMPLGPYMERHIE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQAVMSYRTLMPLGPYMERHIE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            1
        ]
    },
    {
        "question": "For the protein sequence 'WQAVMSYRTLMPLGPYMERHIE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQAVMSYRTLMPLGPYMERHIE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'WQAVMSYRTLMPLGPYMERHIE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQAVMSYRTLMPLGPYMERHIE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TGTGCGCGAGCTTCTTGTGCGTCCACTGAGAATCCCTCTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTGCGCGAGCTTCTTGTGCGTCCACTGAGAATCCCTCTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCGCGAGC"
    },
    {
        "question": "Using the DNA sequence 'TGTGCGCGAGCTTCTTGTGCGTCCACTGAGAATCCCTCTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTGCGCGAGCTTCTTGTGCGTCCACTGAGAATCCCTCTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CARASCASTENPS",
            "VRELLVRPLRIPL",
            "CASFLCVH"
        ]
    },
    {
        "question": "For the protein sequence 'RSPKHECGMMHPGGNEHSNAQT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RSPKHECGMMHPGGNEHSNAQT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RSPKHECGMMHPGGNEHSNAQT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'RSPKHECGMMHPGGNEHSNAQT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RSPKHECGMMHPGGNEHSNAQT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            3
        ]
    },
    {
        "question": "For the protein sequence 'RSPKHECGMMHPGGNEHSNAQT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RSPKHECGMMHPGGNEHSNAQT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'RSPKHECGMMHPGGNEHSNAQT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RSPKHECGMMHPGGNEHSNAQT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GACGAGCGGCGGGGACTTCTTGTGACTTTCGGATTATGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GACGAGCGGCGGGGACTTCTTGTGACTTTCGGATTATGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGAGCGGCGG"
    },
    {
        "question": "Using the DNA sequence 'GACGAGCGGCGGGGACTTCTTGTGACTTTCGGATTATGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GACGAGCGGCGGGGACTTCTTGTGACTTTCGGATTATGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DERRGLLVTFGL",
            "TSGGDFL",
            "RAAGTSCDFRIM"
        ]
    },
    {
        "question": "For the protein sequence 'NLRYRSVQKNYQQRWSLEEYIS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NLRYRSVQKNYQQRWSLEEYIS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NLRYRSVQKNYQQRWSLEEYIS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'NLRYRSVQKNYQQRWSLEEYIS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLRYRSVQKNYQQRWSLEEYIS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            9
        ]
    },
    {
        "question": "For the protein sequence 'NLRYRSVQKNYQQRWSLEEYIS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLRYRSVQKNYQQRWSLEEYIS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'NLRYRSVQKNYQQRWSLEEYIS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NLRYRSVQKNYQQRWSLEEYIS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 3.4
    },
    {
        "question": "Given the DNA sequence 'CCATAATGGTGAGGGAGCTGAGATGATGCAAGATATATGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCATAATGGTGAGGGAGCTGAGATGATGCAAGATATATGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTGAGGGAG"
    },
    {
        "question": "Using the DNA sequence 'CCATAATGGTGAGGGAGCTGAGATGATGCAAGATATATGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCATAATGGTGAGGGAGCTGAGATGATGCAAGATATATGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "P",
            "HNGEGAEMMQDI",
            "IMVRELR"
        ]
    },
    {
        "question": "For the protein sequence 'LASEVTHTQGNAQNAQYCADLN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LASEVTHTQGNAQNAQYCADLN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LASEVTHTQGNAQNAQYCADLN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'LASEVTHTQGNAQNAQYCADLN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LASEVTHTQGNAQNAQYCADLN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            11
        ]
    },
    {
        "question": "For the protein sequence 'LASEVTHTQGNAQNAQYCADLN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LASEVTHTQGNAQNAQYCADLN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'LASEVTHTQGNAQNAQYCADLN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LASEVTHTQGNAQNAQYCADLN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTAGAGATTGTGGATGGATACCGCATTGGGGCACCCTGCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAGAGATTGTGGATGGATACCGCATTGGGGCACCCTGCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGGGGCACCC"
    },
    {
        "question": "Using the DNA sequence 'CTAGAGATTGTGGATGGATACCGCATTGGGGCACCCTGCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAGAGATTGTGGATGGATACCGCATTGGGGCACCCTGCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LEIVDGYRIGAPC",
            "",
            "RDCGWIPHWGTL"
        ]
    },
    {
        "question": "For the protein sequence 'GIFLPNCGNNSEEMKCAWFYRY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GIFLPNCGNNSEEMKCAWFYRY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GIFLPNCGNNSEEMKCAWFYRY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'GIFLPNCGNNSEEMKCAWFYRY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GIFLPNCGNNSEEMKCAWFYRY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'GIFLPNCGNNSEEMKCAWFYRY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GIFLPNCGNNSEEMKCAWFYRY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'GIFLPNCGNNSEEMKCAWFYRY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GIFLPNCGNNSEEMKCAWFYRY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CGCGCGAAGACTTGTCTCATCTGACTAATTGGTCAATGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGCGCGAAGACTTGTCTCATCTGACTAATTGGTCAATGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCGCGAAGA"
    },
    {
        "question": "Using the DNA sequence 'CGCGCGAAGACTTGTCTCATCTGACTAATTGGTCAATGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGCGCGAAGACTTGTCTCATCTGACTAATTGGTCAATGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RAKTCLI",
            "ARRLVSSD",
            "REDLSHLTNWSM"
        ]
    },
    {
        "question": "For the protein sequence 'RPWEKREDRTECGPPMIDRSCA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RPWEKREDRTECGPPMIDRSCA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RPWEKREDRTECGPPMIDRSCA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'RPWEKREDRTECGPPMIDRSCA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RPWEKREDRTECGPPMIDRSCA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            6
        ]
    },
    {
        "question": "For the protein sequence 'RPWEKREDRTECGPPMIDRSCA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RPWEKREDRTECGPPMIDRSCA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'RPWEKREDRTECGPPMIDRSCA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RPWEKREDRTECGPPMIDRSCA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GTCATAGTGTAAAAGTGCGAAAGTAAACGCCGGACAAGGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTCATAGTGTAAAAGTGCGAAAGTAAACGCCGGACAAGGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AACGCCGGAC"
    },
    {
        "question": "Using the DNA sequence 'GTCATAGTGTAAAAGTGCGAAAGTAAACGCCGGACAAGGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTCATAGTGTAAAAGTGCGAAAGTAAACGCCGGACAAGGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VIV",
            "S",
            "HSVKVRK"
        ]
    },
    {
        "question": "For the protein sequence 'LHHQGNCDKQDWNIWLIIQRGQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LHHQGNCDKQDWNIWLIIQRGQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LHHQGNCDKQDWNIWLIIQRGQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'LHHQGNCDKQDWNIWLIIQRGQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHHQGNCDKQDWNIWLIIQRGQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            11
        ]
    },
    {
        "question": "For the protein sequence 'LHHQGNCDKQDWNIWLIIQRGQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHHQGNCDKQDWNIWLIIQRGQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'LHHQGNCDKQDWNIWLIIQRGQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHHQGNCDKQDWNIWLIIQRGQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CAGGTTGGCAATCAGCCATTGGGTTAGACGTCTTACGAGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAGGTTGGCAATCAGCCATTGGGTTAGACGTCTTACGAGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAGGTTGGCA"
    },
    {
        "question": "Using the DNA sequence 'CAGGTTGGCAATCAGCCATTGGGTTAGACGTCTTACGAGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAGGTTGGCAATCAGCCATTGGGTTAGACGTCTTACGAGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QVGNQPLG",
            "RLAISHWVRRLTS",
            "GWQSAIGLDVLR"
        ]
    },
    {
        "question": "For the protein sequence 'CLTHYQFVSKHHGFSGQTDWVK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CLTHYQFVSKHHGFSGQTDWVK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CLTHYQFVSKHHGFSGQTDWVK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'CLTHYQFVSKHHGFSGQTDWVK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CLTHYQFVSKHHGFSGQTDWVK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            1
        ]
    },
    {
        "question": "For the protein sequence 'CLTHYQFVSKHHGFSGQTDWVK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CLTHYQFVSKHHGFSGQTDWVK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'CLTHYQFVSKHHGFSGQTDWVK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CLTHYQFVSKHHGFSGQTDWVK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTTAACAAGGCTTGCAACATAATCGCCGGATCCGAAGCTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTAACAAGGCTTGCAACATAATCGCCGGATCCGAAGCTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCCGGATCC"
    },
    {
        "question": "Using the DNA sequence 'CTTAACAAGGCTTGCAACATAATCGCCGGATCCGAAGCTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTAACAAGGCTTGCAACATAATCGCCGGATCCGAAGCTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LNKACNIIAGSEA",
            "LTRLAT",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'FTGMNWDFEYRPEKDDKIAVAT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FTGMNWDFEYRPEKDDKIAVAT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FTGMNWDFEYRPEKDDKIAVAT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'FTGMNWDFEYRPEKDDKIAVAT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FTGMNWDFEYRPEKDDKIAVAT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'FTGMNWDFEYRPEKDDKIAVAT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FTGMNWDFEYRPEKDDKIAVAT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'FTGMNWDFEYRPEKDDKIAVAT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FTGMNWDFEYRPEKDDKIAVAT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCGGCTTTCTATCAGATGAACTTACCCAGGTCGGATAATC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGGCTTTCTATCAGATGAACTTACCCAGGTCGGATAATC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCAGGTCGG"
    },
    {
        "question": "Using the DNA sequence 'TCGGCTTTCTATCAGATGAACTTACCCAGGTCGGATAATC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGGCTTTCTATCAGATGAACTTACCCAGGTCGGATAATC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SAFYQMNLPRSDN",
            "RLSIR",
            "GFLSDELTQVG"
        ]
    },
    {
        "question": "For the protein sequence 'HCTDTKWKAVFNMLQIVLQSAL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HCTDTKWKAVFNMLQIVLQSAL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HCTDTKWKAVFNMLQIVLQSAL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'HCTDTKWKAVFNMLQIVLQSAL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HCTDTKWKAVFNMLQIVLQSAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            10
        ]
    },
    {
        "question": "For the protein sequence 'HCTDTKWKAVFNMLQIVLQSAL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HCTDTKWKAVFNMLQIVLQSAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'HCTDTKWKAVFNMLQIVLQSAL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HCTDTKWKAVFNMLQIVLQSAL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GTCTAGCGTTTAAAGCAGTCTGGGCGACAGGCAAGGCTGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTCTAGCGTTTAAAGCAGTCTGGGCGACAGGCAAGGCTGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGCGACAGG"
    },
    {
        "question": "Using the DNA sequence 'GTCTAGCGTTTAAAGCAGTCTGGGCGACAGGCAAGGCTGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTCTAGCGTTTAAAGCAGTCTGGGCGACAGGCAAGGCTGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "V",
            "SSV",
            "LAFKAVWATGKA"
        ]
    },
    {
        "question": "For the protein sequence 'MDSEKKESIRYCFSYDDVPAWH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MDSEKKESIRYCFSYDDVPAWH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MDSEKKESIRYCFSYDDVPAWH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'MDSEKKESIRYCFSYDDVPAWH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDSEKKESIRYCFSYDDVPAWH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            9
        ]
    },
    {
        "question": "For the protein sequence 'MDSEKKESIRYCFSYDDVPAWH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDSEKKESIRYCFSYDDVPAWH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'MDSEKKESIRYCFSYDDVPAWH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MDSEKKESIRYCFSYDDVPAWH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GGACAAACCCTTGTACAGCGAGGCTGAAAGCGCCTTATGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGACAAACCCTTGTACAGCGAGGCTGAAAGCGCCTTATGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACAGCGAGGC"
    },
    {
        "question": "Using the DNA sequence 'GGACAAACCCTTGTACAGCGAGGCTGAAAGCGCCTTATGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGACAAACCCTTGTACAGCGAGGCTGAAAGCGCCTTATGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GQTLVQRG",
            "DKPLYSEAESAL",
            "TNPCTARLKAPY"
        ]
    },
    {
        "question": "For the protein sequence 'SHHPRYSSPAPGGFCHDDNIAA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SHHPRYSSPAPGGFCHDDNIAA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SHHPRYSSPAPGGFCHDDNIAA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'SHHPRYSSPAPGGFCHDDNIAA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SHHPRYSSPAPGGFCHDDNIAA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            8
        ]
    },
    {
        "question": "For the protein sequence 'SHHPRYSSPAPGGFCHDDNIAA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SHHPRYSSPAPGGFCHDDNIAA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'SHHPRYSSPAPGGFCHDDNIAA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SHHPRYSSPAPGGFCHDDNIAA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TAGTGTGGTATGAGGCTTACTTCACCTTAGCTGTCTGGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAGTGTGGTATGAGGCTTACTTCACCTTAGCTGTCTGGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTGTCTGGC"
    },
    {
        "question": "Using the DNA sequence 'TAGTGTGGTATGAGGCTTACTTCACCTTAGCTGTCTGGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAGTGTGGTATGAGGCTTACTTCACCTTAGCTGTCTGGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "SVV",
            "VWYEAYFTLAVW"
        ]
    },
    {
        "question": "For the protein sequence 'SSRQCNWLYMSGYMKMYSHIRF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SSRQCNWLYMSGYMKMYSHIRF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SSRQCNWLYMSGYMKMYSHIRF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'SSRQCNWLYMSGYMKMYSHIRF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SSRQCNWLYMSGYMKMYSHIRF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            1
        ]
    },
    {
        "question": "For the protein sequence 'SSRQCNWLYMSGYMKMYSHIRF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SSRQCNWLYMSGYMKMYSHIRF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'SSRQCNWLYMSGYMKMYSHIRF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SSRQCNWLYMSGYMKMYSHIRF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GATGGGGCAAGACACTATATACTCACCATTGCGGGCTATC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GATGGGGCAAGACACTATATACTCACCATTGCGGGCTATC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGGCAAGAC"
    },
    {
        "question": "Using the DNA sequence 'GATGGGGCAAGACACTATATACTCACCATTGCGGGCTATC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GATGGGGCAAGACACTATATACTCACCATTGCGGGCTATC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DGARHYILTIAGY",
            "MGQDTIYSPLRAI",
            "WGKTLYTHHCGL"
        ]
    },
    {
        "question": "For the protein sequence 'VAQKGAAINYRPKWMFAALGCT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VAQKGAAINYRPKWMFAALGCT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VAQKGAAINYRPKWMFAALGCT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'VAQKGAAINYRPKWMFAALGCT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAQKGAAINYRPKWMFAALGCT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            8
        ]
    },
    {
        "question": "For the protein sequence 'VAQKGAAINYRPKWMFAALGCT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAQKGAAINYRPKWMFAALGCT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'VAQKGAAINYRPKWMFAALGCT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAQKGAAINYRPKWMFAALGCT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'TTCCTAGGGCCTACCCTGACTGGATATTTTCATATGTCGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTCCTAGGGCCTACCCTGACTGGATATTTTCATATGTCGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGCCTACCC"
    },
    {
        "question": "Using the DNA sequence 'TTCCTAGGGCCTACCCTGACTGGATATTTTCATATGTCGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTCCTAGGGCCTACCCTGACTGGATATTTTCATATGTCGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "FLGPTLTGYFHMS",
            "S",
            "PRAYPDWIFSYV"
        ]
    },
    {
        "question": "For the protein sequence 'NWEEMFVELRMGSLFNCHYLYR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NWEEMFVELRMGSLFNCHYLYR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NWEEMFVELRMGSLFNCHYLYR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'NWEEMFVELRMGSLFNCHYLYR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWEEMFVELRMGSLFNCHYLYR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            11
        ]
    },
    {
        "question": "For the protein sequence 'NWEEMFVELRMGSLFNCHYLYR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWEEMFVELRMGSLFNCHYLYR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'NWEEMFVELRMGSLFNCHYLYR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NWEEMFVELRMGSLFNCHYLYR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'AACGTTTGATCGATCCGGGGACTGTTTGCTTACTACGATC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AACGTTTGATCGATCCGGGGACTGTTTGCTTACTACGATC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGATCCGGGG"
    },
    {
        "question": "Using the DNA sequence 'AACGTTTGATCGATCCGGGGACTGTTTGCTTACTACGATC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AACGTTTGATCGATCCGGGGACTGTTTGCTTACTACGATC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NV",
            "TFDRSGDCLLTTI",
            "RLIDPGTVCLLR"
        ]
    },
    {
        "question": "For the protein sequence 'CWVLPFRLEEPSPSAVSRGCCE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CWVLPFRLEEPSPSAVSRGCCE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CWVLPFRLEEPSPSAVSRGCCE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'CWVLPFRLEEPSPSAVSRGCCE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CWVLPFRLEEPSPSAVSRGCCE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            0
        ]
    },
    {
        "question": "For the protein sequence 'CWVLPFRLEEPSPSAVSRGCCE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CWVLPFRLEEPSPSAVSRGCCE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'CWVLPFRLEEPSPSAVSRGCCE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CWVLPFRLEEPSPSAVSRGCCE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'TCCACAGCCAGTATAGGCCGAATAGAATGTGAGCGCATCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCCACAGCCAGTATAGGCCGAATAGAATGTGAGCGCATCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCACAGCCAG"
    },
    {
        "question": "Using the DNA sequence 'TCCACAGCCAGTATAGGCCGAATAGAATGTGAGCGCATCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCCACAGCCAGTATAGGCCGAATAGAATGTGAGCGCATCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "STASIGRIECERI",
            "PQPV",
            "HSQYRPNRM"
        ]
    },
    {
        "question": "For the protein sequence 'TLMNGFPQSADPIKKRCKEKYW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TLMNGFPQSADPIKKRCKEKYW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TLMNGFPQSADPIKKRCKEKYW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "I"
    },
    {
        "question": "Given the protein sequence 'TLMNGFPQSADPIKKRCKEKYW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TLMNGFPQSADPIKKRCKEKYW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            0
        ]
    },
    {
        "question": "For the protein sequence 'TLMNGFPQSADPIKKRCKEKYW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TLMNGFPQSADPIKKRCKEKYW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'TLMNGFPQSADPIKKRCKEKYW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TLMNGFPQSADPIKKRCKEKYW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'ACCATCTGCAGATATCGGAGTTTCCATCCCAACTTGGGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACCATCTGCAGATATCGGAGTTTCCATCCCAACTTGGGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCATCTGCAG"
    },
    {
        "question": "Using the DNA sequence 'ACCATCTGCAGATATCGGAGTTTCCATCCCAACTTGGGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACCATCTGCAGATATCGGAGTTTCCATCCCAACTTGGGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "TICRYRSFHPNLG",
            "PSADIGVSIPTWE",
            "HLQISEFPSQLG"
        ]
    },
    {
        "question": "For the protein sequence 'GWYMEGTNKKLYLSTLVVSRAK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GWYMEGTNKKLYLSTLVVSRAK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GWYMEGTNKKLYLSTLVVSRAK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'GWYMEGTNKKLYLSTLVVSRAK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GWYMEGTNKKLYLSTLVVSRAK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            10
        ]
    },
    {
        "question": "For the protein sequence 'GWYMEGTNKKLYLSTLVVSRAK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GWYMEGTNKKLYLSTLVVSRAK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'GWYMEGTNKKLYLSTLVVSRAK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GWYMEGTNKKLYLSTLVVSRAK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TACCATGGGTGGTTTTTCTAAAAATACGGTAACCCCTTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TACCATGGGTGGTTTTTCTAAAAATACGGTAACCCCTTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCATGGGTGG"
    },
    {
        "question": "Using the DNA sequence 'TACCATGGGTGGTTTTTCTAAAAATACGGTAACCCCTTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TACCATGGGTGGTTTTTCTAAAAATACGGTAACCCCTTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "YHGWFF",
            "TMGGFSKNTVTPS",
            "PWVVFLKIR"
        ]
    },
    {
        "question": "For the protein sequence 'AYDMIESIDKMYHGWSHHLQRR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AYDMIESIDKMYHGWSHHLQRR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AYDMIESIDKMYHGWSHHLQRR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'AYDMIESIDKMYHGWSHHLQRR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AYDMIESIDKMYHGWSHHLQRR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            9
        ]
    },
    {
        "question": "For the protein sequence 'AYDMIESIDKMYHGWSHHLQRR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AYDMIESIDKMYHGWSHHLQRR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'AYDMIESIDKMYHGWSHHLQRR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AYDMIESIDKMYHGWSHHLQRR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'AGATATGCTTTTCACGTGGATTGGGAACGAGCTGAATGTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGATATGCTTTTCACGTGGATTGGGAACGAGCTGAATGTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGAACGAGC"
    },
    {
        "question": "Using the DNA sequence 'AGATATGCTTTTCACGTGGATTGGGAACGAGCTGAATGTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGATATGCTTTTCACGTGGATTGGGAACGAGCTGAATGTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RYAFHVDWERAEC",
            "DMLFTWIGNELNV",
            "ICFSRGLGTS"
        ]
    },
    {
        "question": "For the protein sequence 'FMNDKPGSCCSPTSNDTQACHG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FMNDKPGSCCSPTSNDTQACHG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FMNDKPGSCCSPTSNDTQACHG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'FMNDKPGSCCSPTSNDTQACHG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMNDKPGSCCSPTSNDTQACHG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            3
        ]
    },
    {
        "question": "For the protein sequence 'FMNDKPGSCCSPTSNDTQACHG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMNDKPGSCCSPTSNDTQACHG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'FMNDKPGSCCSPTSNDTQACHG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FMNDKPGSCCSPTSNDTQACHG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'ACACTAGAATGATCGACGTGCTGCAACTCAAAACGTTGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACACTAGAATGATCGACGTGCTGCAACTCAAAACGTTGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGACGTGCTG"
    },
    {
        "question": "Using the DNA sequence 'ACACTAGAATGATCGACGTGCTGCAACTCAAAACGTTGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACACTAGAATGATCGACGTGCTGCAACTCAAAACGTTGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "TLE",
            "H",
            "TRMIDVLQLKTL"
        ]
    },
    {
        "question": "For the protein sequence 'SPEMWRCTDQLPQNCPKMVPYI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SPEMWRCTDQLPQNCPKMVPYI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SPEMWRCTDQLPQNCPKMVPYI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'SPEMWRCTDQLPQNCPKMVPYI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPEMWRCTDQLPQNCPKMVPYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            1
        ]
    },
    {
        "question": "For the protein sequence 'SPEMWRCTDQLPQNCPKMVPYI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPEMWRCTDQLPQNCPKMVPYI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'SPEMWRCTDQLPQNCPKMVPYI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPEMWRCTDQLPQNCPKMVPYI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GGGTTTGGCAATCTCTTTAAAGAAACTTGTCATAGTCATA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGGTTTGGCAATCTCTTTAAAGAAACTTGTCATAGTCATA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGTTTGGCA"
    },
    {
        "question": "Using the DNA sequence 'GGGTTTGGCAATCTCTTTAAAGAAACTTGTCATAGTCATA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGGTTTGGCAATCTCTTTAAAGAAACTTGTCATAGTCATA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GFGNLFKETCHSH",
            "GLAISLKKLVIVI",
            "VWQSL"
        ]
    },
    {
        "question": "For the protein sequence 'EDRHWVRLIYDQLHIALQGQRH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EDRHWVRLIYDQLHIALQGQRH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EDRHWVRLIYDQLHIALQGQRH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'EDRHWVRLIYDQLHIALQGQRH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDRHWVRLIYDQLHIALQGQRH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            2
        ]
    },
    {
        "question": "For the protein sequence 'EDRHWVRLIYDQLHIALQGQRH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDRHWVRLIYDQLHIALQGQRH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'EDRHWVRLIYDQLHIALQGQRH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EDRHWVRLIYDQLHIALQGQRH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GGTCAGCTAAAACTGGGTGCTTGAAATACAGTTGCTTCCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTCAGCTAAAACTGGGTGCTTGAAATACAGTTGCTTCCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AACTGGGTGC"
    },
    {
        "question": "Using the DNA sequence 'GGTCAGCTAAAACTGGGTGCTTGAAATACAGTTGCTTCCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTCAGCTAAAACTGGGTGCTTGAAATACAGTTGCTTCCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GQLKLGA",
            "VS",
            "SAKTGCLKYSCF"
        ]
    },
    {
        "question": "For the protein sequence 'TFQCPFIKASATSHWCRTTDQN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TFQCPFIKASATSHWCRTTDQN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TFQCPFIKASATSHWCRTTDQN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'TFQCPFIKASATSHWCRTTDQN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFQCPFIKASATSHWCRTTDQN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            0
        ]
    },
    {
        "question": "For the protein sequence 'TFQCPFIKASATSHWCRTTDQN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFQCPFIKASATSHWCRTTDQN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'TFQCPFIKASATSHWCRTTDQN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TFQCPFIKASATSHWCRTTDQN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AATTCAGTGTATTAAGATACTGTATATTTGATTCTACCCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AATTCAGTGTATTAAGATACTGTATATTTGATTCTACCCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GATTCTACCC"
    },
    {
        "question": "Using the DNA sequence 'AATTCAGTGTATTAAGATACTGTATATTTGATTCTACCCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AATTCAGTGTATTAAGATACTGTATATTTGATTCTACCCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NSVY",
            "IQCIKILYI",
            "FSVLRYCIFDST"
        ]
    },
    {
        "question": "For the protein sequence 'LICPDAIFNVSKEVRCCNCNLI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LICPDAIFNVSKEVRCCNCNLI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LICPDAIFNVSKEVRCCNCNLI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "I"
    },
    {
        "question": "Given the protein sequence 'LICPDAIFNVSKEVRCCNCNLI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LICPDAIFNVSKEVRCCNCNLI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            10
        ]
    },
    {
        "question": "For the protein sequence 'LICPDAIFNVSKEVRCCNCNLI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LICPDAIFNVSKEVRCCNCNLI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'LICPDAIFNVSKEVRCCNCNLI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LICPDAIFNVSKEVRCCNCNLI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'AACGACAGTCTATAGGTTTTTTTGAGCTCTATCCCTAACG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AACGACAGTCTATAGGTTTTTTTGAGCTCTATCCCTAACG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTCTATCCC"
    },
    {
        "question": "Using the DNA sequence 'AACGACAGTCTATAGGTTTTTTTGAGCTCTATCCCTAACG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AACGACAGTCTATAGGTTTTTTTGAGCTCTATCCCTAACG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NDSL",
            "TTVYRFF",
            "RQSIGFFELYP"
        ]
    },
    {
        "question": "For the protein sequence 'LHESCFLNFPVGQDLFAEPEAC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LHESCFLNFPVGQDLFAEPEAC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LHESCFLNFPVGQDLFAEPEAC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'LHESCFLNFPVGQDLFAEPEAC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHESCFLNFPVGQDLFAEPEAC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            3
        ]
    },
    {
        "question": "For the protein sequence 'LHESCFLNFPVGQDLFAEPEAC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHESCFLNFPVGQDLFAEPEAC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LHESCFLNFPVGQDLFAEPEAC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHESCFLNFPVGQDLFAEPEAC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'GCTTGGTTTGTGTGTTGTTACCCACGGTATTCTACGCCAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCTTGGTTTGTGTGTTGTTACCCACGGTATTCTACGCCAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTTACCCACG"
    },
    {
        "question": "Using the DNA sequence 'GCTTGGTTTGTGTGTTGTTACCCACGGTATTCTACGCCAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCTTGGTTTGTGTGTTGTTACCCACGGTATTCTACGCCAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "AWFVCCYPRYSTP",
            "LGLCVVTHGILRQ",
            "LVCVLLPTVFYA"
        ]
    },
    {
        "question": "For the protein sequence 'YEHTTDQFEMIEGTMTSIIAGE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YEHTTDQFEMIEGTMTSIIAGE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YEHTTDQFEMIEGTMTSIIAGE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'YEHTTDQFEMIEGTMTSIIAGE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YEHTTDQFEMIEGTMTSIIAGE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            12
        ]
    },
    {
        "question": "For the protein sequence 'YEHTTDQFEMIEGTMTSIIAGE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YEHTTDQFEMIEGTMTSIIAGE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'YEHTTDQFEMIEGTMTSIIAGE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YEHTTDQFEMIEGTMTSIIAGE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TGGCGGCTGTATACATTCCTCTCGGGCGCATTGTGTCTGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGCGGCTGTATACATTCCTCTCGGGCGCATTGTGTCTGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTCTCGGGC"
    },
    {
        "question": "Using the DNA sequence 'TGGCGGCTGTATACATTCCTCTCGGGCGCATTGTGTCTGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGCGGCTGTATACATTCCTCTCGGGCGCATTGTGTCTGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WRLYTFLSGALCL",
            "GGCIHSSRAHCVC",
            "AAVYIPLGRIVS"
        ]
    },
    {
        "question": "For the protein sequence 'QTCSCCQMFCNFWWTMPVWIMD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QTCSCCQMFCNFWWTMPVWIMD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QTCSCCQMFCNFWWTMPVWIMD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'QTCSCCQMFCNFWWTMPVWIMD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTCSCCQMFCNFWWTMPVWIMD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            6
        ]
    },
    {
        "question": "For the protein sequence 'QTCSCCQMFCNFWWTMPVWIMD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTCSCCQMFCNFWWTMPVWIMD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'QTCSCCQMFCNFWWTMPVWIMD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTCSCCQMFCNFWWTMPVWIMD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'ATAAACTAATGACGCAAGTCCTGAGGGGCTGTTAGCCCCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATAAACTAATGACGCAAGTCCTGAGGGGCTGTTAGCCCCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTGAGGGGC"
    },
    {
        "question": "Using the DNA sequence 'ATAAACTAATGACGCAAGTCCTGAGGGGCTGTTAGCCCCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATAAACTAATGACGCAAGTCCTGAGGGGCTGTTAGCCCCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "IN",
            "",
            "KLMTQVLRGC"
        ]
    },
    {
        "question": "For the protein sequence 'CATLLGDNCLMKWMITNRVRAL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CATLLGDNCLMKWMITNRVRAL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CATLLGDNCLMKWMITNRVRAL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'CATLLGDNCLMKWMITNRVRAL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CATLLGDNCLMKWMITNRVRAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            7
        ]
    },
    {
        "question": "For the protein sequence 'CATLLGDNCLMKWMITNRVRAL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CATLLGDNCLMKWMITNRVRAL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'CATLLGDNCLMKWMITNRVRAL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CATLLGDNCLMKWMITNRVRAL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'GAGCGACGTACATGGGTCAAGAAACCCCAGTTTGTTTCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAGCGACGTACATGGGTCAAGAAACCCCAGTTTGTTTCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGCGACGTA"
    },
    {
        "question": "Using the DNA sequence 'GAGCGACGTACATGGGTCAAGAAACCCCAGTTTGTTTCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAGCGACGTACATGGGTCAAGAAACCCCAGTTTGTTTCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ERRTWVKKPQFVS",
            "SDVHGSRNPSLFH",
            "ATYMGQETPVCF"
        ]
    },
    {
        "question": "For the protein sequence 'VGHWGWYWIVWCTANSQTDVGM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VGHWGWYWIVWCTANSQTDVGM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VGHWGWYWIVWCTANSQTDVGM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'VGHWGWYWIVWCTANSQTDVGM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VGHWGWYWIVWCTANSQTDVGM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            5
        ]
    },
    {
        "question": "For the protein sequence 'VGHWGWYWIVWCTANSQTDVGM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VGHWGWYWIVWCTANSQTDVGM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'VGHWGWYWIVWCTANSQTDVGM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VGHWGWYWIVWCTANSQTDVGM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'AAAATCGACCGGACTTAGTTGCATGCACAAGACCGGTCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAAATCGACCGGACTTAGTTGCATGCACAAGACCGGTCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGACCGGAC"
    },
    {
        "question": "Using the DNA sequence 'AAAATCGACCGGACTTAGTTGCATGCACAAGACCGGTCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAAATCGACCGGACTTAGTTGCATGCACAAGACCGGTCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KIDRT",
            "KSTGLSCMHKTGR",
            "NRPDLVACTRPV"
        ]
    },
    {
        "question": "For the protein sequence 'SPFMASCHYPRIEYLIGLGIYY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SPFMASCHYPRIEYLIGLGIYY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SPFMASCHYPRIEYLIGLGIYY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'SPFMASCHYPRIEYLIGLGIYY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPFMASCHYPRIEYLIGLGIYY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            1
        ]
    },
    {
        "question": "For the protein sequence 'SPFMASCHYPRIEYLIGLGIYY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPFMASCHYPRIEYLIGLGIYY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'SPFMASCHYPRIEYLIGLGIYY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SPFMASCHYPRIEYLIGLGIYY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'AACTAATGCAACGGTGCTCAACTATAAGTTGATCCGTATA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AACTAATGCAACGGTGCTCAACTATAAGTTGATCCGTATA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCAACGGTGC"
    },
    {
        "question": "Using the DNA sequence 'AACTAATGCAACGGTGCTCAACTATAAGTTGATCCGTATA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AACTAATGCAACGGTGCTCAACTATAAGTTGATCCGTATA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "N",
            "TNATVLNYKLIRI",
            "LMQRCSTIS"
        ]
    },
    {
        "question": "For the protein sequence 'PVWMTDQYCSKIFMQWLGQKEA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PVWMTDQYCSKIFMQWLGQKEA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PVWMTDQYCSKIFMQWLGQKEA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'PVWMTDQYCSKIFMQWLGQKEA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PVWMTDQYCSKIFMQWLGQKEA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            10
        ]
    },
    {
        "question": "For the protein sequence 'PVWMTDQYCSKIFMQWLGQKEA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PVWMTDQYCSKIFMQWLGQKEA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'PVWMTDQYCSKIFMQWLGQKEA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PVWMTDQYCSKIFMQWLGQKEA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CTCGGTTCCGCTCCTCTGATAGTTGAAAGTACTACTGTAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCGGTTCCGCTCCTCTGATAGTTGAAAGTACTACTGTAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTCGGTTCCG"
    },
    {
        "question": "Using the DNA sequence 'CTCGGTTCCGCTCCTCTGATAGTTGAAAGTACTACTGTAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCGGTTCCGCTCCTCTGATAGTTGAAAGTACTACTGTAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LGSAPLIVESTTV",
            "SVPLL",
            "RFRSSDS"
        ]
    },
    {
        "question": "For the protein sequence 'ADQFDMNTTPKSGDCEGMGDHI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ADQFDMNTTPKSGDCEGMGDHI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ADQFDMNTTPKSGDCEGMGDHI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'ADQFDMNTTPKSGDCEGMGDHI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADQFDMNTTPKSGDCEGMGDHI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            0
        ]
    },
    {
        "question": "For the protein sequence 'ADQFDMNTTPKSGDCEGMGDHI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADQFDMNTTPKSGDCEGMGDHI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'ADQFDMNTTPKSGDCEGMGDHI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ADQFDMNTTPKSGDCEGMGDHI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TGCAAATTACCATTGTTGTAGTCTTAGCAAAGGTGAATTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGCAAATTACCATTGTTGTAGTCTTAGCAAAGGTGAATTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGCAAAGGTG"
    },
    {
        "question": "Using the DNA sequence 'TGCAAATTACCATTGTTGTAGTCTTAGCAAAGGTGAATTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGCAAATTACCATTGTTGTAGTCTTAGCAAAGGTGAATTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CKLPLL",
            "ANYHCCSLSKGEF",
            "QITIVVVLAKVN"
        ]
    },
    {
        "question": "For the protein sequence 'ILNLHRGSKAPKRKKSFEGNGK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ILNLHRGSKAPKRKKSFEGNGK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ILNLHRGSKAPKRKKSFEGNGK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'ILNLHRGSKAPKRKKSFEGNGK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ILNLHRGSKAPKRKKSFEGNGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'ILNLHRGSKAPKRKKSFEGNGK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ILNLHRGSKAPKRKKSFEGNGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'ILNLHRGSKAPKRKKSFEGNGK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ILNLHRGSKAPKRKKSFEGNGK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TCGCTCTGTTAGACGTGAACTTTAAGGCTAGTAGGGTCGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGCTCTGTTAGACGTGAACTTTAAGGCTAGTAGGGTCGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTAGGGTCGC"
    },
    {
        "question": "Using the DNA sequence 'TCGCTCTGTTAGACGTGAACTTTAAGGCTAGTAGGGTCGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGCTCTGTTAGACGTGAACTTTAAGGCTAGTAGGGTCGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SLC",
            "RSVRREL",
            "ALLDVNFKASRV"
        ]
    },
    {
        "question": "For the protein sequence 'QPCEDPHPQTDQADAHQGIMVH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QPCEDPHPQTDQADAHQGIMVH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QPCEDPHPQTDQADAHQGIMVH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'QPCEDPHPQTDQADAHQGIMVH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPCEDPHPQTDQADAHQGIMVH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            12
        ]
    },
    {
        "question": "For the protein sequence 'QPCEDPHPQTDQADAHQGIMVH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPCEDPHPQTDQADAHQGIMVH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'QPCEDPHPQTDQADAHQGIMVH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QPCEDPHPQTDQADAHQGIMVH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TTTCTTGATAACGATGCTTTCAAAACGACTCAATGACGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTTCTTGATAACGATGCTTTCAAAACGACTCAATGACGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGATGCTTTC"
    },
    {
        "question": "Using the DNA sequence 'TTTCTTGATAACGATGCTTTCAAAACGACTCAATGACGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTTCTTGATAACGATGCTTTCAAAACGACTCAATGACGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "FLDNDAFKTTQ",
            "FLITMLSKRLNDA",
            "S"
        ]
    },
    {
        "question": "For the protein sequence 'QWPCQIKLHPPKIYMKRMMNPW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QWPCQIKLHPPKIYMKRMMNPW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QWPCQIKLHPPKIYMKRMMNPW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'QWPCQIKLHPPKIYMKRMMNPW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPCQIKLHPPKIYMKRMMNPW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            0
        ]
    },
    {
        "question": "For the protein sequence 'QWPCQIKLHPPKIYMKRMMNPW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPCQIKLHPPKIYMKRMMNPW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'QWPCQIKLHPPKIYMKRMMNPW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPCQIKLHPPKIYMKRMMNPW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'GGATGTCTGATATGGCTCTACTGTGTGAGCCGTCTTCCGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGATGTCTGATATGGCTCTACTGTGTGAGCCGTCTTCCGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGTGAGCCG"
    },
    {
        "question": "Using the DNA sequence 'GGATGTCTGATATGGCTCTACTGTGTGAGCCGTCTTCCGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGATGTCTGATATGGCTCTACTGTGTGAGCCGTCTTCCGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GCLIWLYCVSRLP",
            "DV",
            "MSDMALLCEPSS"
        ]
    },
    {
        "question": "For the protein sequence 'DACYQMFFNAPSANCHIYHGQD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DACYQMFFNAPSANCHIYHGQD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DACYQMFFNAPSANCHIYHGQD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'DACYQMFFNAPSANCHIYHGQD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DACYQMFFNAPSANCHIYHGQD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'DACYQMFFNAPSANCHIYHGQD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DACYQMFFNAPSANCHIYHGQD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'DACYQMFFNAPSANCHIYHGQD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DACYQMFFNAPSANCHIYHGQD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GGAGAAGAACGAAACTGAACTCCTAGGCGGGGGAGAATTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGAGAAGAACGAAACTGAACTCCTAGGCGGGGGAGAATTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCGGGGGAG"
    },
    {
        "question": "Using the DNA sequence 'GGAGAAGAACGAAACTGAACTCCTAGGCGGGGGAGAATTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGAGAAGAACGAAACTGAACTCCTAGGCGGGGGAGAATTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GEERN",
            "EKNETELLGGGEL",
            "RRTKLNS"
        ]
    },
    {
        "question": "For the protein sequence 'KSKIIYTASFSDETHGKTQDDT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KSKIIYTASFSDETHGKTQDDT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KSKIIYTASFSDETHGKTQDDT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'KSKIIYTASFSDETHGKTQDDT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KSKIIYTASFSDETHGKTQDDT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            4
        ]
    },
    {
        "question": "For the protein sequence 'KSKIIYTASFSDETHGKTQDDT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KSKIIYTASFSDETHGKTQDDT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'KSKIIYTASFSDETHGKTQDDT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KSKIIYTASFSDETHGKTQDDT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 3.4
    },
    {
        "question": "Given the DNA sequence 'GGATATGGCACTGCTATACATCCAGAGCTAACAGAATTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGATATGGCACTGCTATACATCCAGAGCTAACAGAATTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATGGCACTGC"
    },
    {
        "question": "Using the DNA sequence 'GGATATGGCACTGCTATACATCCAGAGCTAACAGAATTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGATATGGCACTGCTATACATCCAGAGCTAACAGAATTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GYGTAIHPELTEF",
            "DMALLYIQS",
            "IWHCYTSRANRI"
        ]
    },
    {
        "question": "For the protein sequence 'PLDRCSCWDFTTCPDCFVLCHM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PLDRCSCWDFTTCPDCFVLCHM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PLDRCSCWDFTTCPDCFVLCHM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'PLDRCSCWDFTTCPDCFVLCHM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLDRCSCWDFTTCPDCFVLCHM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            4
        ]
    },
    {
        "question": "For the protein sequence 'PLDRCSCWDFTTCPDCFVLCHM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLDRCSCWDFTTCPDCFVLCHM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'PLDRCSCWDFTTCPDCFVLCHM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLDRCSCWDFTTCPDCFVLCHM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'TCGAGAATAATCCTAACTTATGCTTGTCGGAACGGACAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGAGAATAATCCTAACTTATGCTTGTCGGAACGGACAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCGGAACGG"
    },
    {
        "question": "Using the DNA sequence 'TCGAGAATAATCCTAACTTATGCTTGTCGGAACGGACAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGAGAATAATCCTAACTTATGCTTGTCGGAACGGACAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SRIILTYACRNGQ",
            "RE",
            "ENNPNLCLSERT"
        ]
    },
    {
        "question": "For the protein sequence 'IARFFAMQTHWFRGNTIKFAST', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IARFFAMQTHWFRGNTIKFAST\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IARFFAMQTHWFRGNTIKFAST\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'IARFFAMQTHWFRGNTIKFAST', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IARFFAMQTHWFRGNTIKFAST\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            5
        ]
    },
    {
        "question": "For the protein sequence 'IARFFAMQTHWFRGNTIKFAST', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IARFFAMQTHWFRGNTIKFAST\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'IARFFAMQTHWFRGNTIKFAST', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IARFFAMQTHWFRGNTIKFAST\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TGAGCTTGTTTGAGGCACCACGAGATTATTAAAACTCTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGAGCTTGTTTGAGGCACCACGAGATTATTAAAACTCTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGGCACCAC"
    },
    {
        "question": "Using the DNA sequence 'TGAGCTTGTTTGAGGCACCACGAGATTATTAAAACTCTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGAGCTTGTTTGAGGCACCACGAGATTATTAAAACTCTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "ELV",
            "SLFEAPRDY"
        ]
    },
    {
        "question": "For the protein sequence 'QGFDNRVEVSWNYMYAVHEHVW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QGFDNRVEVSWNYMYAVHEHVW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QGFDNRVEVSWNYMYAVHEHVW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'QGFDNRVEVSWNYMYAVHEHVW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFDNRVEVSWNYMYAVHEHVW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            7
        ]
    },
    {
        "question": "For the protein sequence 'QGFDNRVEVSWNYMYAVHEHVW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFDNRVEVSWNYMYAVHEHVW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'QGFDNRVEVSWNYMYAVHEHVW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QGFDNRVEVSWNYMYAVHEHVW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GCCATTTACTCCGGCATACCGACTTATTCACCTGACTTAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCCATTTACTCCGGCATACCGACTTATTCACCTGACTTAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGGCATACC"
    },
    {
        "question": "Using the DNA sequence 'GCCATTTACTCCGGCATACCGACTTATTCACCTGACTTAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCCATTTACTCCGGCATACCGACTTATTCACCTGACTTAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "AIYSGIPTYSPDL",
            "PFTPAYRLIHLT",
            "HLLRHTDLFT"
        ]
    },
    {
        "question": "For the protein sequence 'FDLVMNNVNMKSCVWLWDAQVD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FDLVMNNVNMKSCVWLWDAQVD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FDLVMNNVNMKSCVWLWDAQVD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'FDLVMNNVNMKSCVWLWDAQVD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDLVMNNVNMKSCVWLWDAQVD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            11
        ]
    },
    {
        "question": "For the protein sequence 'FDLVMNNVNMKSCVWLWDAQVD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDLVMNNVNMKSCVWLWDAQVD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'FDLVMNNVNMKSCVWLWDAQVD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDLVMNNVNMKSCVWLWDAQVD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CAACCTTTCGGGTCCCGATAGGATACCGGCTGGATAGTAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAACCTTTCGGGTCCCGATAGGATACCGGCTGGATAGTAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGGGTCCCG"
    },
    {
        "question": "Using the DNA sequence 'CAACCTTTCGGGTCCCGATAGGATACCGGCTGGATAGTAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAACCTTTCGGGTCCCGATAGGATACCGGCTGGATAGTAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QPFGSR",
            "NLSGPDRIPAG",
            "TFRVPIGYRLDS"
        ]
    },
    {
        "question": "For the protein sequence 'DMQQIYEQKILIEWPNNPQALS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DMQQIYEQKILIEWPNNPQALS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DMQQIYEQKILIEWPNNPQALS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'DMQQIYEQKILIEWPNNPQALS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DMQQIYEQKILIEWPNNPQALS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            8
        ]
    },
    {
        "question": "For the protein sequence 'DMQQIYEQKILIEWPNNPQALS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DMQQIYEQKILIEWPNNPQALS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'DMQQIYEQKILIEWPNNPQALS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DMQQIYEQKILIEWPNNPQALS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'AATATATCGACTGCCCCACCTGTCACATTCGATTTGTCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AATATATCGACTGCCCCACCTGTCACATTCGATTTGTCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGACTGCCCC"
    },
    {
        "question": "Using the DNA sequence 'AATATATCGACTGCCCCACCTGTCACATTCGATTTGTCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AATATATCGACTGCCCCACCTGTCACATTCGATTTGTCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NISTAPPVTFDLS",
            "IYRLPHLSHSICQ",
            "YIDCPTCHIRFV"
        ]
    },
    {
        "question": "For the protein sequence 'LYLFNPWTDVVPPRIMTKSGSW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LYLFNPWTDVVPPRIMTKSGSW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LYLFNPWTDVVPPRIMTKSGSW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'LYLFNPWTDVVPPRIMTKSGSW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYLFNPWTDVVPPRIMTKSGSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            1
        ]
    },
    {
        "question": "For the protein sequence 'LYLFNPWTDVVPPRIMTKSGSW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYLFNPWTDVVPPRIMTKSGSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LYLFNPWTDVVPPRIMTKSGSW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYLFNPWTDVVPPRIMTKSGSW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'AAAAATCGGGGGAGTAAATCCAATTCTACCTTTCGAGTAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAAAATCGGGGGAGTAAATCCAATTCTACCTTTCGAGTAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATCGGGGGAG"
    },
    {
        "question": "Using the DNA sequence 'AAAAATCGGGGGAGTAAATCCAATTCTACCTTTCGAGTAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAAAATCGGGGGAGTAAATCCAATTCTACCTTTCGAGTAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KNRGSKSNSTFRV",
            "KIGGVNPILPFE",
            "KSGE"
        ]
    },
    {
        "question": "For the protein sequence 'GFCALFCIPPTPANVWFHSHYV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GFCALFCIPPTPANVWFHSHYV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GFCALFCIPPTPANVWFHSHYV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'GFCALFCIPPTPANVWFHSHYV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GFCALFCIPPTPANVWFHSHYV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            0
        ]
    },
    {
        "question": "For the protein sequence 'GFCALFCIPPTPANVWFHSHYV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GFCALFCIPPTPANVWFHSHYV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'GFCALFCIPPTPANVWFHSHYV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GFCALFCIPPTPANVWFHSHYV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.375
    },
    {
        "question": "Given the DNA sequence 'CCCTTTCGCCTCTAGGGAACAAGACAAAAAATTGGCTATT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCCTTTCGCCTCTAGGGAACAAGACAAAAAATTGGCTATT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCTTTCGCC"
    },
    {
        "question": "Using the DNA sequence 'CCCTTTCGCCTCTAGGGAACAAGACAAAAAATTGGCTATT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCCTTTCGCCTCTAGGGAACAAGACAAAAAATTGGCTATT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PFRL",
            "PFASREQDKKLAI",
            "LSPLGNKTKNWL"
        ]
    },
    {
        "question": "For the protein sequence 'YSRWMPPPNIQMPSYLLLCWRS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YSRWMPPPNIQMPSYLLLCWRS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YSRWMPPPNIQMPSYLLLCWRS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'YSRWMPPPNIQMPSYLLLCWRS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YSRWMPPPNIQMPSYLLLCWRS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            12
        ]
    },
    {
        "question": "For the protein sequence 'YSRWMPPPNIQMPSYLLLCWRS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YSRWMPPPNIQMPSYLLLCWRS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'YSRWMPPPNIQMPSYLLLCWRS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YSRWMPPPNIQMPSYLLLCWRS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'AGGTACTGATGGCTTCACTAATGCCGGGTCGTGGTGACAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGGTACTGATGGCTTCACTAATGCCGGGTCGTGGTGACAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGCCGGGTCG"
    },
    {
        "question": "Using the DNA sequence 'AGGTACTGATGGCTTCACTAATGCCGGGTCGTGGTGACAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGGTACTGATGGCTTCACTAATGCCGGGTCGTGGTGACAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RY",
            "GTDGFTNAGSW",
            "VLMASLMPGRGD"
        ]
    },
    {
        "question": "For the protein sequence 'QLFDAQNRRLNWKECELNAIMG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QLFDAQNRRLNWKECELNAIMG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QLFDAQNRRLNWKECELNAIMG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'QLFDAQNRRLNWKECELNAIMG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QLFDAQNRRLNWKECELNAIMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            6
        ]
    },
    {
        "question": "For the protein sequence 'QLFDAQNRRLNWKECELNAIMG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QLFDAQNRRLNWKECELNAIMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'QLFDAQNRRLNWKECELNAIMG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QLFDAQNRRLNWKECELNAIMG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TAATGCCCCCATACGCTGGGTGCTCGACCTGTGCATTGTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAATGCCCCCATACGCTGGGTGCTCGACCTGTGCATTGTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCTGGGTGC"
    },
    {
        "question": "Using the DNA sequence 'TAATGCCCCCATACGCTGGGTGCTCGACCTGTGCATTGTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAATGCCCCCATACGCTGGGTGCTCGACCTGTGCATTGTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "NAPIRWVLDLCIV",
            "MPPYAGCSTCAL"
        ]
    },
    {
        "question": "For the protein sequence 'IEYNDDICERCWQGITFLCLTG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IEYNDDICERCWQGITFLCLTG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IEYNDDICERCWQGITFLCLTG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'IEYNDDICERCWQGITFLCLTG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IEYNDDICERCWQGITFLCLTG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            11
        ]
    },
    {
        "question": "For the protein sequence 'IEYNDDICERCWQGITFLCLTG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IEYNDDICERCWQGITFLCLTG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'IEYNDDICERCWQGITFLCLTG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IEYNDDICERCWQGITFLCLTG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TTAAGGAAAAGCAGGCGCTCGGGTGGATGGACGTCCTCCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTAAGGAAAAGCAGGCGCTCGGGTGGATGGACGTCCTCCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCGCTCGGG"
    },
    {
        "question": "Using the DNA sequence 'TTAAGGAAAAGCAGGCGCTCGGGTGGATGGACGTCCTCCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTAAGGAAAAGCAGGCGCTCGGGTGGATGGACGTCCTCCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LRKSRRSGGWTSS",
            "",
            "KEKQALGWMDVL"
        ]
    },
    {
        "question": "For the protein sequence 'KIFNNFSLHVICYWLMKEDDDN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KIFNNFSLHVICYWLMKEDDDN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KIFNNFSLHVICYWLMKEDDDN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'KIFNNFSLHVICYWLMKEDDDN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KIFNNFSLHVICYWLMKEDDDN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'KIFNNFSLHVICYWLMKEDDDN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KIFNNFSLHVICYWLMKEDDDN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'KIFNNFSLHVICYWLMKEDDDN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KIFNNFSLHVICYWLMKEDDDN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TGTTAAAATCCTCCTGTATAGCCCTCAGGCAGGGCCGCAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTTAAAATCCTCCTGTATAGCCCTCAGGCAGGGCCGCAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCAGGGCCG"
    },
    {
        "question": "Using the DNA sequence 'TGTTAAAATCCTCCTGTATAGCCCTCAGGCAGGGCCGCAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTTAAAATCCTCCTGTATAGCCCTCAGGCAGGGCCGCAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "C",
            "VKILLYSPQAGPH",
            "LKSSCIALRQGR"
        ]
    },
    {
        "question": "For the protein sequence 'EMGVGVDWCWVIRFAAWQLMYH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EMGVGVDWCWVIRFAAWQLMYH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EMGVGVDWCWVIRFAAWQLMYH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "M"
    },
    {
        "question": "Given the protein sequence 'EMGVGVDWCWVIRFAAWQLMYH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EMGVGVDWCWVIRFAAWQLMYH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            8
        ]
    },
    {
        "question": "For the protein sequence 'EMGVGVDWCWVIRFAAWQLMYH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EMGVGVDWCWVIRFAAWQLMYH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'EMGVGVDWCWVIRFAAWQLMYH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EMGVGVDWCWVIRFAAWQLMYH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.375
    },
    {
        "question": "Given the DNA sequence 'AGGTTGACACCATCTACGTAGGTAGTTCGCTTTGGTATGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGGTTGACACCATCTACGTAGGTAGTTCGCTTTGGTATGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTTGACACC"
    },
    {
        "question": "Using the DNA sequence 'AGGTTGACACCATCTACGTAGGTAGTTCGCTTTGGTATGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGGTTGACACCATCTACGTAGGTAGTTCGCTTTGGTATGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RLTPST",
            "G",
            "VDTIYVGSSLWY"
        ]
    },
    {
        "question": "For the protein sequence 'FDQFIYAFGMSGHYGACEFPWD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FDQFIYAFGMSGHYGACEFPWD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FDQFIYAFGMSGHYGACEFPWD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'FDQFIYAFGMSGHYGACEFPWD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDQFIYAFGMSGHYGACEFPWD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            2
        ]
    },
    {
        "question": "For the protein sequence 'FDQFIYAFGMSGHYGACEFPWD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDQFIYAFGMSGHYGACEFPWD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'FDQFIYAFGMSGHYGACEFPWD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FDQFIYAFGMSGHYGACEFPWD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'TGGCAGTTTAACACGCAGGCCAGAAACCACCCGCGCACGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGCAGTTTAACACGCAGGCCAGAAACCACCCGCGCACGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCACCCGCGC"
    },
    {
        "question": "Using the DNA sequence 'TGGCAGTTTAACACGCAGGCCAGAAACCACCCGCGCACGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGCAGTTTAACACGCAGGCCAGAAACCACCCGCGCACGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WQFNTQARNHPRT",
            "GSLTRRPETTRAR",
            "AV"
        ]
    },
    {
        "question": "For the protein sequence 'ARIWPEWFDKTPGMFEVYHDGM', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ARIWPEWFDKTPGMFEVYHDGM\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ARIWPEWFDKTPGMFEVYHDGM\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'ARIWPEWFDKTPGMFEVYHDGM', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ARIWPEWFDKTPGMFEVYHDGM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            11
        ]
    },
    {
        "question": "For the protein sequence 'ARIWPEWFDKTPGMFEVYHDGM', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ARIWPEWFDKTPGMFEVYHDGM\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'ARIWPEWFDKTPGMFEVYHDGM', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ARIWPEWFDKTPGMFEVYHDGM\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TGGGTGCGTTAGCCCCGATTTCTTTGATATCATGTCACTA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGGTGCGTTAGCCCCGATTTCTTTGATATCATGTCACTA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGTTAGCCC"
    },
    {
        "question": "Using the DNA sequence 'TGGGTGCGTTAGCCCCGATTTCTTTGATATCATGTCACTA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGGTGCGTTAGCCCCGATTTCTTTGATATCATGTCACTA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WVR",
            "GCVSPDFFDIMSL",
            "GALAPISLISCH"
        ]
    },
    {
        "question": "For the protein sequence 'LVECVCQYFECSTADPYEYIAP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LVECVCQYFECSTADPYEYIAP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LVECVCQYFECSTADPYEYIAP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'LVECVCQYFECSTADPYEYIAP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVECVCQYFECSTADPYEYIAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            2
        ]
    },
    {
        "question": "For the protein sequence 'LVECVCQYFECSTADPYEYIAP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVECVCQYFECSTADPYEYIAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'LVECVCQYFECSTADPYEYIAP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LVECVCQYFECSTADPYEYIAP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CCGCCCAGTTTGGAAGACGAACCGATTTGCATAAACAGAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGCCCAGTTTGGAAGACGAACCGATTTGCATAAACAGAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGCCCAGTT"
    },
    {
        "question": "Using the DNA sequence 'CCGCCCAGTTTGGAAGACGAACCGATTTGCATAAACAGAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGCCCAGTTTGGAAGACGAACCGATTTGCATAAACAGAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PPSLEDEPICINR",
            "RPVWKTNRFA",
            "AQFGRRTDLHKQ"
        ]
    },
    {
        "question": "For the protein sequence 'FYERMYICTFHGVTTQRTIYAD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FYERMYICTFHGVTTQRTIYAD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FYERMYICTFHGVTTQRTIYAD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'FYERMYICTFHGVTTQRTIYAD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYERMYICTFHGVTTQRTIYAD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            4
        ]
    },
    {
        "question": "For the protein sequence 'FYERMYICTFHGVTTQRTIYAD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYERMYICTFHGVTTQRTIYAD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'FYERMYICTFHGVTTQRTIYAD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FYERMYICTFHGVTTQRTIYAD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AAACTTCTTACAACCGAAGGTCCGATGACAGTACTAGACT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AAACTTCTTACAACCGAAGGTCCGATGACAGTACTAGACT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGAAGGTCC"
    },
    {
        "question": "Using the DNA sequence 'AAACTTCTTACAACCGAAGGTCCGATGACAGTACTAGACT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AAACTTCTTACAACCGAAGGTCCGATGACAGTACTAGACT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "KLLTTEGPMTVLD",
            "NFLQPKVR",
            "TSYNRRSDDSTR"
        ]
    },
    {
        "question": "For the protein sequence 'HYHKWWRSDMELSHLHTQMMKW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HYHKWWRSDMELSHLHTQMMKW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HYHKWWRSDMELSHLHTQMMKW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'HYHKWWRSDMELSHLHTQMMKW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HYHKWWRSDMELSHLHTQMMKW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            8
        ]
    },
    {
        "question": "For the protein sequence 'HYHKWWRSDMELSHLHTQMMKW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HYHKWWRSDMELSHLHTQMMKW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'HYHKWWRSDMELSHLHTQMMKW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HYHKWWRSDMELSHLHTQMMKW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CACTGTGGAGCGTATGTATAGGTCCACTCTCACGCCTCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CACTGTGGAGCGTATGTATAGGTCCACTCTCACGCCTCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTGTGGAGCG"
    },
    {
        "question": "Using the DNA sequence 'CACTGTGGAGCGTATGTATAGGTCCACTCTCACGCCTCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CACTGTGGAGCGTATGTATAGGTCCACTCTCACGCCTCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "HCGAYV",
            "TVERMYRSTLTPP",
            "LWSVCIGPLSRL"
        ]
    },
    {
        "question": "For the protein sequence 'REFTGCRYIHWDTWRPRWFCYC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"REFTGCRYIHWDTWRPRWFCYC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"REFTGCRYIHWDTWRPRWFCYC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'REFTGCRYIHWDTWRPRWFCYC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"REFTGCRYIHWDTWRPRWFCYC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            2
        ]
    },
    {
        "question": "For the protein sequence 'REFTGCRYIHWDTWRPRWFCYC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"REFTGCRYIHWDTWRPRWFCYC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'REFTGCRYIHWDTWRPRWFCYC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"REFTGCRYIHWDTWRPRWFCYC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'AGTATAATAATCAGTTACTAACCAAGTGTGCAGTGTACAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGTATAATAATCAGTTACTAACCAAGTGTGCAGTGTACAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCAAGTGTGC"
    },
    {
        "question": "Using the DNA sequence 'AGTATAATAATCAGTTACTAACCAAGTGTGCAGTGTACAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGTATAATAATCAGTTACTAACCAAGTGTGCAGTGTACAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SIIISY",
            "V",
            "YNNQLLTKCAVY"
        ]
    },
    {
        "question": "For the protein sequence 'VYPITWWNVGKSPFHLTLMHAP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VYPITWWNVGKSPFHLTLMHAP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VYPITWWNVGKSPFHLTLMHAP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'VYPITWWNVGKSPFHLTLMHAP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYPITWWNVGKSPFHLTLMHAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            0
        ]
    },
    {
        "question": "For the protein sequence 'VYPITWWNVGKSPFHLTLMHAP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYPITWWNVGKSPFHLTLMHAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'VYPITWWNVGKSPFHLTLMHAP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VYPITWWNVGKSPFHLTLMHAP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'ATGAGTGACATGGAGTACACTACCCGGACACATTACATCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGAGTGACATGGAGTACACTACCCGGACACATTACATCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CACTACCCGG"
    },
    {
        "question": "Using the DNA sequence 'ATGAGTGACATGGAGTACACTACCCGGACACATTACATCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGAGTGACATGGAGTACACTACCCGGACACATTACATCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MSDMEYTTRTHYI",
            "",
            "E"
        ]
    },
    {
        "question": "For the protein sequence 'TAPLHSRQCHPDTGMVTYKTHI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TAPLHSRQCHPDTGMVTYKTHI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TAPLHSRQCHPDTGMVTYKTHI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'TAPLHSRQCHPDTGMVTYKTHI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TAPLHSRQCHPDTGMVTYKTHI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            3
        ]
    },
    {
        "question": "For the protein sequence 'TAPLHSRQCHPDTGMVTYKTHI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TAPLHSRQCHPDTGMVTYKTHI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'TAPLHSRQCHPDTGMVTYKTHI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TAPLHSRQCHPDTGMVTYKTHI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GACACCGTTCGAGATAGAACACTCGCGGGGAATAACATGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GACACCGTTCGAGATAGAACACTCGCGGGGAATAACATGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CACTCGCGGG"
    },
    {
        "question": "Using the DNA sequence 'GACACCGTTCGAGATAGAACACTCGCGGGGAATAACATGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GACACCGTTCGAGATAGAACACTCGCGGGGAATAACATGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DTVRDRTLAGNNM",
            "TPFEIEHSRGITW",
            "HRSR"
        ]
    },
    {
        "question": "For the protein sequence 'WSDARCILDNVSTWNVACTGMG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WSDARCILDNVSTWNVACTGMG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WSDARCILDNVSTWNVACTGMG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "I"
    },
    {
        "question": "Given the protein sequence 'WSDARCILDNVSTWNVACTGMG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WSDARCILDNVSTWNVACTGMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            10
        ]
    },
    {
        "question": "For the protein sequence 'WSDARCILDNVSTWNVACTGMG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WSDARCILDNVSTWNVACTGMG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'WSDARCILDNVSTWNVACTGMG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WSDARCILDNVSTWNVACTGMG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TCGGTGGTAGAAAATGTCCGGTGTTTGACCGCCGATATGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGGTGGTAGAAAATGTCCGGTGTTTGACCGCCGATATGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TTGACCGCCG"
    },
    {
        "question": "Using the DNA sequence 'TCGGTGGTAGAAAATGTCCGGTGTTTGACCGCCGATATGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGGTGGTAGAAAATGTCCGGTGTTTGACCGCCGATATGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SVVENVRCLTADM",
            "RW",
            "GGRKCPVFDRRY"
        ]
    },
    {
        "question": "For the protein sequence 'QFCEWNAGPHPMCFKDVDRDYF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QFCEWNAGPHPMCFKDVDRDYF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QFCEWNAGPHPMCFKDVDRDYF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'QFCEWNAGPHPMCFKDVDRDYF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFCEWNAGPHPMCFKDVDRDYF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            6
        ]
    },
    {
        "question": "For the protein sequence 'QFCEWNAGPHPMCFKDVDRDYF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFCEWNAGPHPMCFKDVDRDYF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'QFCEWNAGPHPMCFKDVDRDYF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QFCEWNAGPHPMCFKDVDRDYF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TTTACTACTATCCTGGGAGTCATCTGGCAACCTTCTCTAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTTACTACTATCCTGGGAGTCATCTGGCAACCTTCTCTAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTGGGAGTC"
    },
    {
        "question": "Using the DNA sequence 'TTTACTACTATCCTGGGAGTCATCTGGCAACCTTCTCTAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTTACTACTATCCTGGGAGTCATCTGGCAACCTTCTCTAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "FTTILGVIWQPSL",
            "LLLSWESSGNLLY",
            "YYYPGSHLATFS"
        ]
    },
    {
        "question": "For the protein sequence 'SWHTHAPCKYWARCYIMFCEGI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SWHTHAPCKYWARCYIMFCEGI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SWHTHAPCKYWARCYIMFCEGI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'SWHTHAPCKYWARCYIMFCEGI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWHTHAPCKYWARCYIMFCEGI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            8
        ]
    },
    {
        "question": "For the protein sequence 'SWHTHAPCKYWARCYIMFCEGI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWHTHAPCKYWARCYIMFCEGI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'SWHTHAPCKYWARCYIMFCEGI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SWHTHAPCKYWARCYIMFCEGI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'ACTCACCCGCAGTCGAGGGCAATAAGACGGGTGGACATGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACTCACCCGCAGTCGAGGGCAATAAGACGGGTGGACATGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCCGCAGTCG"
    },
    {
        "question": "Using the DNA sequence 'ACTCACCCGCAGTCGAGGGCAATAAGACGGGTGGACATGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACTCACCCGCAGTCGAGGGCAATAAGACGGGTGGACATGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "THPQSRAIRRVDM",
            "LTRSRGQ",
            "SPAVEGNKTGGH"
        ]
    },
    {
        "question": "For the protein sequence 'EFVGFVHEGGFESYKQTMMGEE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EFVGFVHEGGFESYKQTMMGEE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EFVGFVHEGGFESYKQTMMGEE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'EFVGFVHEGGFESYKQTMMGEE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EFVGFVHEGGFESYKQTMMGEE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            0
        ]
    },
    {
        "question": "For the protein sequence 'EFVGFVHEGGFESYKQTMMGEE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EFVGFVHEGGFESYKQTMMGEE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'EFVGFVHEGGFESYKQTMMGEE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EFVGFVHEGGFESYKQTMMGEE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ATGCTCGTCTTTCCGCTAGCAGGTCTAGGTGAGAGAAACC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGCTCGTCTTTCCGCTAGCAGGTCTAGGTGAGAGAAACC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGCTAGCAG"
    },
    {
        "question": "Using the DNA sequence 'ATGCTCGTCTTTCCGCTAGCAGGTCTAGGTGAGAGAAACC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGCTCGTCTTTCCGCTAGCAGGTCTAGGTGAGAGAAACC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MLVFPLAGLGERN",
            "CSSFR",
            "ARLSASRSR"
        ]
    },
    {
        "question": "For the protein sequence 'YGKEAHLQRFSPNKQERHFLVY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YGKEAHLQRFSPNKQERHFLVY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YGKEAHLQRFSPNKQERHFLVY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'YGKEAHLQRFSPNKQERHFLVY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YGKEAHLQRFSPNKQERHFLVY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            4
        ]
    },
    {
        "question": "For the protein sequence 'YGKEAHLQRFSPNKQERHFLVY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YGKEAHLQRFSPNKQERHFLVY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'YGKEAHLQRFSPNKQERHFLVY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YGKEAHLQRFSPNKQERHFLVY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'ATATTATTTTGGTCCCTGGTCCAACCGCAACTATTCATAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATATTATTTTGGTCCCTGGTCCAACCGCAACTATTCATAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGGTCCCTGG"
    },
    {
        "question": "Using the DNA sequence 'ATATTATTTTGGTCCCTGGTCCAACCGCAACTATTCATAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATATTATTTTGGTCCCTGGTCCAACCGCAACTATTCATAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ILFWSLVQPQLFI",
            "YYFGPWSNRNYSY",
            "IILVPGPTATIH"
        ]
    },
    {
        "question": "For the protein sequence 'DKCSGWGQVDEYNMELLLCWPN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DKCSGWGQVDEYNMELLLCWPN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DKCSGWGQVDEYNMELLLCWPN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'DKCSGWGQVDEYNMELLLCWPN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DKCSGWGQVDEYNMELLLCWPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            10
        ]
    },
    {
        "question": "For the protein sequence 'DKCSGWGQVDEYNMELLLCWPN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DKCSGWGQVDEYNMELLLCWPN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'DKCSGWGQVDEYNMELLLCWPN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DKCSGWGQVDEYNMELLLCWPN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GGTCGGCCAAGAGTACTGCTCGTCCTCATAGGGAACGAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTCGGCCAAGAGTACTGCTCGTCCTCATAGGGAACGAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGTCGGCCAA"
    },
    {
        "question": "Using the DNA sequence 'GGTCGGCCAAGAGTACTGCTCGTCCTCATAGGGAACGAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTCGGCCAAGAGTACTGCTCGTCCTCATAGGGAACGAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GRPRVLLVLIGNE",
            "VGQEYCSSS",
            "SAKSTARPHRER"
        ]
    },
    {
        "question": "For the protein sequence 'WGLSYAIDRWSTQSRAHKEART', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WGLSYAIDRWSTQSRAHKEART\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WGLSYAIDRWSTQSRAHKEART\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'WGLSYAIDRWSTQSRAHKEART', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGLSYAIDRWSTQSRAHKEART\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            1
        ]
    },
    {
        "question": "For the protein sequence 'WGLSYAIDRWSTQSRAHKEART', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGLSYAIDRWSTQSRAHKEART\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'WGLSYAIDRWSTQSRAHKEART', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WGLSYAIDRWSTQSRAHKEART\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GTGGAGCACACATGGTACCGTTCTAATAGTGCAAGCGTCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTGGAGCACACATGGTACCGTTCTAATAGTGCAAGCGTCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCAAGCGTCG"
    },
    {
        "question": "Using the DNA sequence 'GTGGAGCACACATGGTACCGTTCTAATAGTGCAAGCGTCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTGGAGCACACATGGTACCGTTCTAATAGTGCAAGCGTCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VEHTWYRSNSASV",
            "WSTHGTVLIVQAS",
            "GAHMVPF"
        ]
    },
    {
        "question": "For the protein sequence 'IPYDACMVEWGVRRLEHQHVFC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IPYDACMVEWGVRRLEHQHVFC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IPYDACMVEWGVRRLEHQHVFC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'IPYDACMVEWGVRRLEHQHVFC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPYDACMVEWGVRRLEHQHVFC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            4
        ]
    },
    {
        "question": "For the protein sequence 'IPYDACMVEWGVRRLEHQHVFC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPYDACMVEWGVRRLEHQHVFC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'IPYDACMVEWGVRRLEHQHVFC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IPYDACMVEWGVRRLEHQHVFC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'ATATCTATGGAATTTCAAAGTCAAGTCCGTCAGGCACTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATATCTATGGAATTTCAAAGTCAAGTCCGTCAGGCACTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCCGTCAGG"
    },
    {
        "question": "Using the DNA sequence 'ATATCTATGGAATTTCAAAGTCAAGTCCGTCAGGCACTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATATCTATGGAATTTCAAAGTCAAGTCCGTCAGGCACTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ISMEFQSQVRQAL",
            "YLWNFKVKSVRHS",
            "IYGISKSSPSGT"
        ]
    },
    {
        "question": "For the protein sequence 'MCRNYPWKQFNSCGRQYRLTRN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MCRNYPWKQFNSCGRQYRLTRN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MCRNYPWKQFNSCGRQYRLTRN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'MCRNYPWKQFNSCGRQYRLTRN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MCRNYPWKQFNSCGRQYRLTRN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            1
        ]
    },
    {
        "question": "For the protein sequence 'MCRNYPWKQFNSCGRQYRLTRN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MCRNYPWKQFNSCGRQYRLTRN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'MCRNYPWKQFNSCGRQYRLTRN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MCRNYPWKQFNSCGRQYRLTRN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GGGTCGACTGTCAGAATGAGCGCTCCCTTGGTGTCCTAGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGGTCGACTGTCAGAATGAGCGCTCCCTTGGTGTCCTAGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GAGCGCTCCC"
    },
    {
        "question": "Using the DNA sequence 'GGGTCGACTGTCAGAATGAGCGCTCCCTTGGTGTCCTAGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGGTCGACTGTCAGAATGAGCGCTCCCTTGGTGTCCTAGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GSTVRMSAPLVS",
            "GRLSE",
            "VDCQNERSLGVL"
        ]
    },
    {
        "question": "For the protein sequence 'PIQTYHCPKRFNQRLREWDMSH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PIQTYHCPKRFNQRLREWDMSH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PIQTYHCPKRFNQRLREWDMSH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'PIQTYHCPKRFNQRLREWDMSH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PIQTYHCPKRFNQRLREWDMSH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'PIQTYHCPKRFNQRLREWDMSH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PIQTYHCPKRFNQRLREWDMSH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'PIQTYHCPKRFNQRLREWDMSH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PIQTYHCPKRFNQRLREWDMSH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CGGAATCTACCTATCTCCTGGTGTCGCTTGGACAATGCCG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGGAATCTACCTATCTCCTGGTGTCGCTTGGACAATGCCG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTGGTGTCG"
    },
    {
        "question": "Using the DNA sequence 'CGGAATCTACCTATCTCCTGGTGTCGCTTGGACAATGCCG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGGAATCTACCTATCTCCTGGTGTCGCTTGGACAATGCCG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RNLPISWCRLDNA",
            "GIYLSPGVAWTMP",
            "ESTYLLVSLGQC"
        ]
    },
    {
        "question": "For the protein sequence 'KYNSWYPWSPHMQQISVQRWDE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KYNSWYPWSPHMQQISVQRWDE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KYNSWYPWSPHMQQISVQRWDE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'KYNSWYPWSPHMQQISVQRWDE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KYNSWYPWSPHMQQISVQRWDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            2
        ]
    },
    {
        "question": "For the protein sequence 'KYNSWYPWSPHMQQISVQRWDE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KYNSWYPWSPHMQQISVQRWDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'KYNSWYPWSPHMQQISVQRWDE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KYNSWYPWSPHMQQISVQRWDE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'AGCCTGCTGTGTCGTCCACAGCGGTCCGACTTGTCCGCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGCCTGCTGTGTCGTCCACAGCGGTCCGACTTGTCCGCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAGCGGTCCG"
    },
    {
        "question": "Using the DNA sequence 'AGCCTGCTGTGTCGTCCACAGCGGTCCGACTTGTCCGCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGCCTGCTGTGTCGTCCACAGCGGTCCGACTTGTCCGCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SLLCRPQRSDLSA",
            "ACCVVHSGPTCPQ",
            "PAVSSTAVRLVR"
        ]
    },
    {
        "question": "For the protein sequence 'FCNCDWQQDHPRWWKGNVHLTD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FCNCDWQQDHPRWWKGNVHLTD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FCNCDWQQDHPRWWKGNVHLTD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'FCNCDWQQDHPRWWKGNVHLTD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FCNCDWQQDHPRWWKGNVHLTD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            0
        ]
    },
    {
        "question": "For the protein sequence 'FCNCDWQQDHPRWWKGNVHLTD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FCNCDWQQDHPRWWKGNVHLTD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'FCNCDWQQDHPRWWKGNVHLTD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FCNCDWQQDHPRWWKGNVHLTD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'GGCTCAGGAGTTGTTGCGTTATGGCATTTGTAACACCGAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGCTCAGGAGTTGTTGCGTTATGGCATTTGTAACACCGAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCTCAGGAG"
    },
    {
        "question": "Using the DNA sequence 'GGCTCAGGAGTTGTTGCGTTATGGCATTTGTAACACCGAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGCTCAGGAGTTGTTGCGTTATGGCATTTGTAACACCGAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GSGVVALWHL",
            "AQELLRYGICNTD",
            "LRSCCVMAFVTP"
        ]
    },
    {
        "question": "For the protein sequence 'ECSRASQSECDIGDESMKEAAP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ECSRASQSECDIGDESMKEAAP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ECSRASQSECDIGDESMKEAAP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'ECSRASQSECDIGDESMKEAAP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECSRASQSECDIGDESMKEAAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            4
        ]
    },
    {
        "question": "For the protein sequence 'ECSRASQSECDIGDESMKEAAP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECSRASQSECDIGDESMKEAAP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'ECSRASQSECDIGDESMKEAAP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ECSRASQSECDIGDESMKEAAP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TGTGGGGATAATGGCGGAGGTAGCTCCTACATCCCGGTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTGGGGATAATGGCGGAGGTAGCTCCTACATCCCGGTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATGGCGGAGG"
    },
    {
        "question": "Using the DNA sequence 'TGTGGGGATAATGGCGGAGGTAGCTCCTACATCCCGGTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTGGGGATAATGGCGGAGGTAGCTCCTACATCCCGGTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CGDNGGGSSYIPV",
            "VGIMAEVAPTSRS",
            "WG"
        ]
    },
    {
        "question": "For the protein sequence 'LEIFACKLPWFIMDVYFYTDSL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LEIFACKLPWFIMDVYFYTDSL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LEIFACKLPWFIMDVYFYTDSL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'LEIFACKLPWFIMDVYFYTDSL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LEIFACKLPWFIMDVYFYTDSL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            9
        ]
    },
    {
        "question": "For the protein sequence 'LEIFACKLPWFIMDVYFYTDSL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LEIFACKLPWFIMDVYFYTDSL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'LEIFACKLPWFIMDVYFYTDSL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LEIFACKLPWFIMDVYFYTDSL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'CAATATAGCATATCACAGGTAGTTAACGCTAATGGCTCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAATATAGCATATCACAGGTAGTTAACGCTAATGGCTCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGCTAATGGC"
    },
    {
        "question": "Using the DNA sequence 'CAATATAGCATATCACAGGTAGTTAACGCTAATGGCTCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAATATAGCATATCACAGGTAGTTAACGCTAATGGCTCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QYSISQVVNANGS",
            "NIAYHR",
            "I"
        ]
    },
    {
        "question": "For the protein sequence 'CYTPNLGVIETRLTVATRACSW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CYTPNLGVIETRLTVATRACSW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CYTPNLGVIETRLTVATRACSW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'CYTPNLGVIETRLTVATRACSW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CYTPNLGVIETRLTVATRACSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            0
        ]
    },
    {
        "question": "For the protein sequence 'CYTPNLGVIETRLTVATRACSW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CYTPNLGVIETRLTVATRACSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'CYTPNLGVIETRLTVATRACSW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CYTPNLGVIETRLTVATRACSW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CCATTCGATTCCCACTTATCCGGCAGAGTAGGAATGGACC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCATTCGATTCCCACTTATCCGGCAGAGTAGGAATGGACC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCCGGCAGAG"
    },
    {
        "question": "Using the DNA sequence 'CCATTCGATTCCCACTTATCCGGCAGAGTAGGAATGGACC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCATTCGATTCCCACTTATCCGGCAGAGTAGGAATGGACC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PFDSHLSGRVGMD",
            "HSIPTYPAE",
            "IRFPLIRQSRNG"
        ]
    },
    {
        "question": "For the protein sequence 'GTNAHYDLDCIKCPSNMAVGEK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GTNAHYDLDCIKCPSNMAVGEK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GTNAHYDLDCIKCPSNMAVGEK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "D"
    },
    {
        "question": "Given the protein sequence 'GTNAHYDLDCIKCPSNMAVGEK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTNAHYDLDCIKCPSNMAVGEK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            4
        ]
    },
    {
        "question": "For the protein sequence 'GTNAHYDLDCIKCPSNMAVGEK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTNAHYDLDCIKCPSNMAVGEK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'GTNAHYDLDCIKCPSNMAVGEK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GTNAHYDLDCIKCPSNMAVGEK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GGTATCGTTCGCTCGATTCCGAAGCTGGAACATGTGTGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTATCGTTCGCTCGATTCCGAAGCTGGAACATGTGTGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTTCGCTCG"
    },
    {
        "question": "Using the DNA sequence 'GGTATCGTTCGCTCGATTCCGAAGCTGGAACATGTGTGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTATCGTTCGCTCGATTCCGAAGCTGGAACATGTGTGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GIVRSIPKLEHV",
            "VSFARFRSWNMCE",
            "YRSLDSEAGTCV"
        ]
    },
    {
        "question": "For the protein sequence 'LYMLNWTTVTLTAIGCPNEYQS', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LYMLNWTTVTLTAIGCPNEYQS\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LYMLNWTTVTLTAIGCPNEYQS\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'LYMLNWTTVTLTAIGCPNEYQS', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYMLNWTTVTLTAIGCPNEYQS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            0
        ]
    },
    {
        "question": "For the protein sequence 'LYMLNWTTVTLTAIGCPNEYQS', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYMLNWTTVTLTAIGCPNEYQS\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LYMLNWTTVTLTAIGCPNEYQS', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LYMLNWTTVTLTAIGCPNEYQS\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GCCGGCAATCTTTTAGGTTGATACAGATGAGTTACACCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCCGGCAATCTTTTAGGTTGATACAGATGAGTTACACCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCGGCAATC"
    },
    {
        "question": "Using the DNA sequence 'GCCGGCAATCTTTTAGGTTGATACAGATGAGTTACACCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCCGGCAATCTTTTAGGTTGATACAGATGAGTTACACCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "AGNLLG",
            "PAIF",
            "RQSFRLIQMSYT"
        ]
    },
    {
        "question": "For the protein sequence 'GSRVEESWPIFNKRHDMKWMRE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GSRVEESWPIFNKRHDMKWMRE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GSRVEESWPIFNKRHDMKWMRE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'GSRVEESWPIFNKRHDMKWMRE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GSRVEESWPIFNKRHDMKWMRE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            4
        ]
    },
    {
        "question": "For the protein sequence 'GSRVEESWPIFNKRHDMKWMRE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GSRVEESWPIFNKRHDMKWMRE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'GSRVEESWPIFNKRHDMKWMRE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GSRVEESWPIFNKRHDMKWMRE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CGGCATACTAAGTTGGCTGCCACGATCACCCTTAGTCCTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGGCATACTAAGTTGGCTGCCACGATCACCCTTAGTCCTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCTGCCACG"
    },
    {
        "question": "Using the DNA sequence 'CGGCATACTAAGTTGGCTGCCACGATCACCCTTAGTCCTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGGCATACTAAGTTGGCTGCCACGATCACCCTTAGTCCTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RHTKLAATITLSP",
            "GILSWLPRSPLVL",
            "AY"
        ]
    },
    {
        "question": "For the protein sequence 'DLAKALNWDETWQVDAEWECTD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DLAKALNWDETWQVDAEWECTD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DLAKALNWDETWQVDAEWECTD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'DLAKALNWDETWQVDAEWECTD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DLAKALNWDETWQVDAEWECTD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            12
        ]
    },
    {
        "question": "For the protein sequence 'DLAKALNWDETWQVDAEWECTD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DLAKALNWDETWQVDAEWECTD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'DLAKALNWDETWQVDAEWECTD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DLAKALNWDETWQVDAEWECTD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCTCGCCTATGACCCCTCTGCAATTATCGTACAATCTGGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTCGCCTATGACCCCTCTGCAATTATCGTACAATCTGGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCCCTCTG"
    },
    {
        "question": "Using the DNA sequence 'TCTCGCCTATGACCCCTCTGCAATTATCGTACAATCTGGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTCGCCTATGACCCCTCTGCAATTATCGTACAATCTGGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SRL",
            "LAYDPSAIIVQSG",
            "SPMTPLQLSYNL"
        ]
    },
    {
        "question": "For the protein sequence 'HTLNKDHMCRPYTFPWADDIIL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"HTLNKDHMCRPYTFPWADDIIL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"HTLNKDHMCRPYTFPWADDIIL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'HTLNKDHMCRPYTFPWADDIIL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HTLNKDHMCRPYTFPWADDIIL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            6
        ]
    },
    {
        "question": "For the protein sequence 'HTLNKDHMCRPYTFPWADDIIL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HTLNKDHMCRPYTFPWADDIIL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'HTLNKDHMCRPYTFPWADDIIL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"HTLNKDHMCRPYTFPWADDIIL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'ACTTTTTTTGTCTAGCTGAGCATGCCCAGGTCGGTCGCAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACTTTTTTTGTCTAGCTGAGCATGCCCAGGTCGGTCGCAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCCCAGGTCG"
    },
    {
        "question": "Using the DNA sequence 'ACTTTTTTTGTCTAGCTGAGCATGCCCAGGTCGGTCGCAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACTTTTTTTGTCTAGCTGAGCATGCCCAGGTCGGTCGCAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "TFFV",
            "LFLSS",
            "FFCLAEHAQVGR"
        ]
    },
    {
        "question": "For the protein sequence 'CFAYADFGAMAYCCCIVFKDMF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CFAYADFGAMAYCCCIVFKDMF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CFAYADFGAMAYCCCIVFKDMF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'CFAYADFGAMAYCCCIVFKDMF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CFAYADFGAMAYCCCIVFKDMF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            9
        ]
    },
    {
        "question": "For the protein sequence 'CFAYADFGAMAYCCCIVFKDMF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CFAYADFGAMAYCCCIVFKDMF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'CFAYADFGAMAYCCCIVFKDMF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CFAYADFGAMAYCCCIVFKDMF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.29411764705882354
    },
    {
        "question": "Given the DNA sequence 'CTTTAACATGCGCTAATCCATGGGGGCCTGCTTCTAGGTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTTAACATGCGCTAATCCATGGGGGCCTGCTTCTAGGTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGGGGCCTGC"
    },
    {
        "question": "Using the DNA sequence 'CTTTAACATGCGCTAATCCATGGGGGCCTGCTTCTAGGTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTTAACATGCGCTAATCCATGGGGGCCTGCTTCTAGGTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "L",
            "FNMR",
            "LTCANPWGPASR"
        ]
    },
    {
        "question": "For the protein sequence 'VTEMTSWDCKMLCTITNGPLNF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VTEMTSWDCKMLCTITNGPLNF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VTEMTSWDCKMLCTITNGPLNF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'VTEMTSWDCKMLCTITNGPLNF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VTEMTSWDCKMLCTITNGPLNF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            5
        ]
    },
    {
        "question": "For the protein sequence 'VTEMTSWDCKMLCTITNGPLNF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VTEMTSWDCKMLCTITNGPLNF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'VTEMTSWDCKMLCTITNGPLNF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VTEMTSWDCKMLCTITNGPLNF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CCTCCTTCACTCGGGGTAGTCTAGAATTTAATTACATAAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCTCCTTCACTCGGGGTAGTCTAGAATTTAATTACATAAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCACTCGGGG"
    },
    {
        "question": "Using the DNA sequence 'CCTCCTTCACTCGGGGTAGTCTAGAATTTAATTACATAAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCTCCTTCACTCGGGGTAGTCTAGAATTTAATTACATAAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PPSLGVV",
            "LLHSG",
            "SFTRGSLEFNYI"
        ]
    },
    {
        "question": "For the protein sequence 'QYTVVIFHIMQHAIHDQRRYQT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QYTVVIFHIMQHAIHDQRRYQT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QYTVVIFHIMQHAIHDQRRYQT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'QYTVVIFHIMQHAIHDQRRYQT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QYTVVIFHIMQHAIHDQRRYQT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            1
        ]
    },
    {
        "question": "For the protein sequence 'QYTVVIFHIMQHAIHDQRRYQT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QYTVVIFHIMQHAIHDQRRYQT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'QYTVVIFHIMQHAIHDQRRYQT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QYTVVIFHIMQHAIHDQRRYQT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CCTCAACGGCCATTGACAAGGGCTATATGCGCTACCCAGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCTCAACGGCCATTGACAAGGGCTATATGCGCTACCCAGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTCAACGGC"
    },
    {
        "question": "Using the DNA sequence 'CCTCAACGGCCATTGACAAGGGCTATATGCGCTACCCAGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCTCAACGGCCATTGACAAGGGCTATATGCGCTACCCAGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PQRPLTRAICATQ",
            "LNGH",
            "STAIDKGYMRYP"
        ]
    },
    {
        "question": "For the protein sequence 'MPDDTNMTSVEDHLFRECWIIT', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MPDDTNMTSVEDHLFRECWIIT\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MPDDTNMTSVEDHLFRECWIIT\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'MPDDTNMTSVEDHLFRECWIIT', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MPDDTNMTSVEDHLFRECWIIT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            12
        ]
    },
    {
        "question": "For the protein sequence 'MPDDTNMTSVEDHLFRECWIIT', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MPDDTNMTSVEDHLFRECWIIT\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'MPDDTNMTSVEDHLFRECWIIT', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MPDDTNMTSVEDHLFRECWIIT\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TCGCAATGCATGCACAGCAGGATTCGATGCGGTTGCCTTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCGCAATGCATGCACAGCAGGATTCGATGCGGTTGCCTTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCACAGCAGG"
    },
    {
        "question": "Using the DNA sequence 'TCGCAATGCATGCACAGCAGGATTCGATGCGGTTGCCTTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCGCAATGCATGCACAGCAGGATTCGATGCGGTTGCCTTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SQCMHSRIRCGCL",
            "RNACTAGFDAVAF",
            "AMHAQQDSMRLP"
        ]
    },
    {
        "question": "For the protein sequence 'YRCRLTREGHEAWRGMPQNDGG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"YRCRLTREGHEAWRGMPQNDGG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"YRCRLTREGHEAWRGMPQNDGG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'YRCRLTREGHEAWRGMPQNDGG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YRCRLTREGHEAWRGMPQNDGG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            7
        ]
    },
    {
        "question": "For the protein sequence 'YRCRLTREGHEAWRGMPQNDGG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YRCRLTREGHEAWRGMPQNDGG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'YRCRLTREGHEAWRGMPQNDGG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"YRCRLTREGHEAWRGMPQNDGG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CACCTAGCTAAATACAACCATGGGACGATCATGACGTACC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CACCTAGCTAAATACAACCATGGGACGATCATGACGTACC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCATGGGACG"
    },
    {
        "question": "Using the DNA sequence 'CACCTAGCTAAATACAACCATGGGACGATCATGACGTACC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CACCTAGCTAAATACAACCATGGGACGATCATGACGTACC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "HLAKYNHGTIMTY",
            "T",
            "PS"
        ]
    },
    {
        "question": "For the protein sequence 'ATLWRQPDIRMTGEFWAVMEIW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ATLWRQPDIRMTGEFWAVMEIW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ATLWRQPDIRMTGEFWAVMEIW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'ATLWRQPDIRMTGEFWAVMEIW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ATLWRQPDIRMTGEFWAVMEIW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            9
        ]
    },
    {
        "question": "For the protein sequence 'ATLWRQPDIRMTGEFWAVMEIW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ATLWRQPDIRMTGEFWAVMEIW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'ATLWRQPDIRMTGEFWAVMEIW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ATLWRQPDIRMTGEFWAVMEIW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'CTCTATGTACTGTTCAGCGGGCGTATGTGCTGGTAACCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCTATGTACTGTTCAGCGGGCGTATGTGCTGGTAACCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCAGCGGGCG"
    },
    {
        "question": "Using the DNA sequence 'CTCTATGTACTGTTCAGCGGGCGTATGTGCTGGTAACCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCTATGTACTGTTCAGCGGGCGTATGTGCTGGTAACCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LYVLFSGRMCW",
            "SMYCSAGVCAGNR",
            "LCTVQRAYVLVT"
        ]
    },
    {
        "question": "For the protein sequence 'AFGPLFDPDKTRNMFYPTTIWK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"AFGPLFDPDKTRNMFYPTTIWK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"AFGPLFDPDKTRNMFYPTTIWK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'AFGPLFDPDKTRNMFYPTTIWK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AFGPLFDPDKTRNMFYPTTIWK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            12
        ]
    },
    {
        "question": "For the protein sequence 'AFGPLFDPDKTRNMFYPTTIWK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AFGPLFDPDKTRNMFYPTTIWK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'AFGPLFDPDKTRNMFYPTTIWK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"AFGPLFDPDKTRNMFYPTTIWK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CCTGCACCAAAACTGCTGTGCAACCCGGAACACTATTCTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCTGCACCAAAACTGCTGTGCAACCCGGAACACTATTCTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTGCAACCCG"
    },
    {
        "question": "Using the DNA sequence 'CCTGCACCAAAACTGCTGTGCAACCCGGAACACTATTCTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCTGCACCAAAACTGCTGTGCAACCCGGAACACTATTCTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PAPKLLCNPEHYS",
            "LHQNCCATRNTIL",
            "CTKTAVQPGTLF"
        ]
    },
    {
        "question": "For the protein sequence 'RHGIRCQDYNDKEYLCPAGEKH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RHGIRCQDYNDKEYLCPAGEKH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RHGIRCQDYNDKEYLCPAGEKH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'RHGIRCQDYNDKEYLCPAGEKH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHGIRCQDYNDKEYLCPAGEKH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            0
        ]
    },
    {
        "question": "For the protein sequence 'RHGIRCQDYNDKEYLCPAGEKH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHGIRCQDYNDKEYLCPAGEKH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'RHGIRCQDYNDKEYLCPAGEKH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RHGIRCQDYNDKEYLCPAGEKH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GCACCTTGTCCGACCCAATCGGAAATGCCTCATCTAACCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCACCTTGTCCGACCCAATCGGAAATGCCTCATCTAACCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TGTCCGACCC"
    },
    {
        "question": "Using the DNA sequence 'GCACCTTGTCCGACCCAATCGGAAATGCCTCATCTAACCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCACCTTGTCCGACCCAATCGGAAATGCCTCATCTAACCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "APCPTQSEMPHLT",
            "HLVRPNRKCLI",
            "TLSDPIGNASSN"
        ]
    },
    {
        "question": "For the protein sequence 'RKMEQMDKAAGSHMYNHDKAAK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RKMEQMDKAAGSHMYNHDKAAK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RKMEQMDKAAGSHMYNHDKAAK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'RKMEQMDKAAGSHMYNHDKAAK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RKMEQMDKAAGSHMYNHDKAAK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            7
        ]
    },
    {
        "question": "For the protein sequence 'RKMEQMDKAAGSHMYNHDKAAK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RKMEQMDKAAGSHMYNHDKAAK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'RKMEQMDKAAGSHMYNHDKAAK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RKMEQMDKAAGSHMYNHDKAAK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'ACTCATACTTCGTCTGACTCGATCTCGGCTCGCTTTTCTT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACTCATACTTCGTCTGACTCGATCTCGGCTCGCTTTTCTT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTCGGCTCGC"
    },
    {
        "question": "Using the DNA sequence 'ACTCATACTTCGTCTGACTCGATCTCGGCTCGCTTTTCTT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACTCATACTTCGTCTGACTCGATCTCGGCTCGCTTTTCTT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "THTSSDSISARFS",
            "LILRLTRSRLAFL",
            "SYFV"
        ]
    },
    {
        "question": "For the protein sequence 'DAGARLCNLLCYYCPIVSFSPG', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DAGARLCNLLCYYCPIVSFSPG\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DAGARLCNLLCYYCPIVSFSPG\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'DAGARLCNLLCYYCPIVSFSPG', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DAGARLCNLLCYYCPIVSFSPG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            10
        ]
    },
    {
        "question": "For the protein sequence 'DAGARLCNLLCYYCPIVSFSPG', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DAGARLCNLLCYYCPIVSFSPG\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'DAGARLCNLLCYYCPIVSFSPG', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DAGARLCNLLCYYCPIVSFSPG\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'AACGGAAAACTCGCGTTGGGATCAGATGCTGTGATAGGTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AACGGAAAACTCGCGTTGGGATCAGATGCTGTGATAGGTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTCGCGTTGG"
    },
    {
        "question": "Using the DNA sequence 'AACGGAAAACTCGCGTTGGGATCAGATGCTGTGATAGGTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AACGGAAAACTCGCGTTGGGATCAGATGCTGTGATAGGTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NGKLALGSDAVIG",
            "TENSRWDQML",
            "RKTRVGIRCCDR"
        ]
    },
    {
        "question": "For the protein sequence 'WRSCFTREWGQGWQCSVWLKRW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WRSCFTREWGQGWQCSVWLKRW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WRSCFTREWGQGWQCSVWLKRW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'WRSCFTREWGQGWQCSVWLKRW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRSCFTREWGQGWQCSVWLKRW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            11
        ]
    },
    {
        "question": "For the protein sequence 'WRSCFTREWGQGWQCSVWLKRW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRSCFTREWGQGWQCSVWLKRW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'WRSCFTREWGQGWQCSVWLKRW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRSCFTREWGQGWQCSVWLKRW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'ATGTTGCGGTGCTCTTTGACGGGTATTGTCGATTTTTACT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGTTGCGGTGCTCTTTGACGGGTATTGTCGATTTTTACT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTTGCGGTGC"
    },
    {
        "question": "Using the DNA sequence 'ATGTTGCGGTGCTCTTTGACGGGTATTGTCGATTTTTACT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGTTGCGGTGCTCTTTGACGGGTATTGTCGATTTTTACT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MLRCSLTGIVDFY",
            "CCGAL",
            "VAVLFDGYCRFL"
        ]
    },
    {
        "question": "For the protein sequence 'VAITEMNQQVSETLNDKVIPRW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VAITEMNQQVSETLNDKVIPRW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VAITEMNQQVSETLNDKVIPRW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'VAITEMNQQVSETLNDKVIPRW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAITEMNQQVSETLNDKVIPRW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            9,
            0
        ]
    },
    {
        "question": "For the protein sequence 'VAITEMNQQVSETLNDKVIPRW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAITEMNQQVSETLNDKVIPRW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 9
    },
    {
        "question": "Given the protein sequence 'VAITEMNQQVSETLNDKVIPRW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VAITEMNQQVSETLNDKVIPRW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CGCAGCTCAACTGCGCGTGAAGAACACGTAGGATCAGACC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGCAGCTCAACTGCGCGTGAAGAACACGTAGGATCAGACC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAACTGCGCG"
    },
    {
        "question": "Using the DNA sequence 'CGCAGCTCAACTGCGCGTGAAGAACACGTAGGATCAGACC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGCAGCTCAACTGCGCGTGAAGAACACGTAGGATCAGACC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RSSTAREEHVGSD",
            "AAQLRVKNT",
            "QLNCA"
        ]
    },
    {
        "question": "For the protein sequence 'TDTSEAHNHDQETLFLYCSMIA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TDTSEAHNHDQETLFLYCSMIA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TDTSEAHNHDQETLFLYCSMIA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'TDTSEAHNHDQETLFLYCSMIA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TDTSEAHNHDQETLFLYCSMIA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            12
        ]
    },
    {
        "question": "For the protein sequence 'TDTSEAHNHDQETLFLYCSMIA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TDTSEAHNHDQETLFLYCSMIA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'TDTSEAHNHDQETLFLYCSMIA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TDTSEAHNHDQETLFLYCSMIA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CAGCTCTCCCGCGGTCATCGGGCATTCGACCTAGTATGGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CAGCTCTCCCGCGGTCATCGGGCATTCGACCTAGTATGGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTCTCCCGC"
    },
    {
        "question": "Using the DNA sequence 'CAGCTCTCCCGCGGTCATCGGGCATTCGACCTAGTATGGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CAGCTCTCCCGCGGTCATCGGGCATTCGACCTAGTATGGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "QLSRGHRAFDLVW",
            "SSPAVIGHST",
            "ALPRSSGIRPSM"
        ]
    },
    {
        "question": "For the protein sequence 'THALEGCFQQAQEHLDVMQITF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"THALEGCFQQAQEHLDVMQITF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"THALEGCFQQAQEHLDVMQITF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'THALEGCFQQAQEHLDVMQITF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"THALEGCFQQAQEHLDVMQITF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            11
        ]
    },
    {
        "question": "For the protein sequence 'THALEGCFQQAQEHLDVMQITF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"THALEGCFQQAQEHLDVMQITF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'THALEGCFQQAQEHLDVMQITF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"THALEGCFQQAQEHLDVMQITF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GATAAGAGCATTTTGTCGGGAGCGCAAGGGGATAGGTAGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GATAAGAGCATTTTGTCGGGAGCGCAAGGGGATAGGTAGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCGGGAGCG"
    },
    {
        "question": "Using the DNA sequence 'GATAAGAGCATTTTGTCGGGAGCGCAAGGGGATAGGTAGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GATAAGAGCATTTTGTCGGGAGCGCAAGGGGATAGGTAGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DKSILSGAQGDR",
            "IRAFCRERKGIGS",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'KFDWWNPSPMKCSRKSRMLRKP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KFDWWNPSPMKCSRKSRMLRKP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KFDWWNPSPMKCSRKSRMLRKP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "N"
    },
    {
        "question": "Given the protein sequence 'KFDWWNPSPMKCSRKSRMLRKP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KFDWWNPSPMKCSRKSRMLRKP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            6
        ]
    },
    {
        "question": "For the protein sequence 'KFDWWNPSPMKCSRKSRMLRKP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KFDWWNPSPMKCSRKSRMLRKP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'KFDWWNPSPMKCSRKSRMLRKP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KFDWWNPSPMKCSRKSRMLRKP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'CTAAGGGCCGGGGAGACATGGCGCTGAGACCGTTTGGCGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTAAGGGCCGGGGAGACATGGCGCTGAGACCGTTTGGCGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGGGCCGGGG"
    },
    {
        "question": "Using the DNA sequence 'CTAAGGGCCGGGGAGACATGGCGCTGAGACCGTTTGGCGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTAAGGGCCGGGGAGACATGGCGCTGAGACCGTTTGGCGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LRAGETWR",
            "",
            "KGRGDMALRPFG"
        ]
    },
    {
        "question": "For the protein sequence 'IDHCKDCGWKQYMDYPPYQNIC', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IDHCKDCGWKQYMDYPPYQNIC\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IDHCKDCGWKQYMDYPPYQNIC\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "K"
    },
    {
        "question": "Given the protein sequence 'IDHCKDCGWKQYMDYPPYQNIC', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IDHCKDCGWKQYMDYPPYQNIC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            1
        ]
    },
    {
        "question": "For the protein sequence 'IDHCKDCGWKQYMDYPPYQNIC', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IDHCKDCGWKQYMDYPPYQNIC\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'IDHCKDCGWKQYMDYPPYQNIC', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IDHCKDCGWKQYMDYPPYQNIC\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TGGTCTAGCTAAATCGTCTGACCTATCGGAAAGAACAAAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGTCTAGCTAAATCGTCTGACCTATCGGAAAGAACAAAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCGTCTGACC"
    },
    {
        "question": "Using the DNA sequence 'TGGTCTAGCTAAATCGTCTGACCTATCGGAAAGAACAAAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGTCTAGCTAAATCGTCTGACCTATCGGAAAGAACAAAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WSS",
            "GLAKSSDLSERTN",
            "V"
        ]
    },
    {
        "question": "For the protein sequence 'IGWLVYNCFCQSYWMTHMQHQL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IGWLVYNCFCQSYWMTHMQHQL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IGWLVYNCFCQSYWMTHMQHQL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'IGWLVYNCFCQSYWMTHMQHQL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IGWLVYNCFCQSYWMTHMQHQL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            2
        ]
    },
    {
        "question": "For the protein sequence 'IGWLVYNCFCQSYWMTHMQHQL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IGWLVYNCFCQSYWMTHMQHQL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'IGWLVYNCFCQSYWMTHMQHQL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IGWLVYNCFCQSYWMTHMQHQL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'AGAGCGTCCTCGCCATGAACTCCAGAGCAGAATAAGCCTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGAGCGTCCTCGCCATGAACTCCAGAGCAGAATAAGCCTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGTCCTCGC"
    },
    {
        "question": "Using the DNA sequence 'AGAGCGTCCTCGCCATGAACTCCAGAGCAGAATAAGCCTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGAGCGTCCTCGCCATGAACTCCAGAGCAGAATAAGCCTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RASSP",
            "ERPRHELQSRISL",
            "SVLAMNSRAE"
        ]
    },
    {
        "question": "For the protein sequence 'MHMASEYYKDIPKEGYLIFLCD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MHMASEYYKDIPKEGYLIFLCD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MHMASEYYKDIPKEGYLIFLCD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'MHMASEYYKDIPKEGYLIFLCD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MHMASEYYKDIPKEGYLIFLCD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            12
        ]
    },
    {
        "question": "For the protein sequence 'MHMASEYYKDIPKEGYLIFLCD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MHMASEYYKDIPKEGYLIFLCD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'MHMASEYYKDIPKEGYLIFLCD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MHMASEYYKDIPKEGYLIFLCD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TAGTTAAGATTAAAGCCAGTGCTATTTGGTTTCCTGTATA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAGTTAAGATTAAAGCCAGTGCTATTTGGTTTCCTGTATA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AAGCCAGTGC"
    },
    {
        "question": "Using the DNA sequence 'TAGTTAAGATTAAAGCCAGTGCTATTTGGTTTCCTGTATA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAGTTAAGATTAAAGCCAGTGCTATTTGGTTTCCTGTATA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "S",
            "VKIKASAIWFPV"
        ]
    },
    {
        "question": "For the protein sequence 'LHANSWLIPWVQVWHRTGRMHH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LHANSWLIPWVQVWHRTGRMHH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LHANSWLIPWVQVWHRTGRMHH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "V"
    },
    {
        "question": "Given the protein sequence 'LHANSWLIPWVQVWHRTGRMHH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHANSWLIPWVQVWHRTGRMHH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            4
        ]
    },
    {
        "question": "For the protein sequence 'LHANSWLIPWVQVWHRTGRMHH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHANSWLIPWVQVWHRTGRMHH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LHANSWLIPWVQVWHRTGRMHH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LHANSWLIPWVQVWHRTGRMHH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'TCTGTTGCGATCTAGGCCGTAGCTTATGCTCGGTCTGAAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTGTTGCGATCTAGGCCGTAGCTTATGCTCGGTCTGAAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "AGGCCGTAGC"
    },
    {
        "question": "Using the DNA sequence 'TCTGTTGCGATCTAGGCCGTAGCTTATGCTCGGTCTGAAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTGTTGCGATCTAGGCCGTAGCTTATGCTCGGTCTGAAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SVAI",
            "LLRSRP",
            "CCDLGRSLCSV"
        ]
    },
    {
        "question": "For the protein sequence 'RAFHYSHCEIIQVWLRWMALDI', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RAFHYSHCEIIQVWLRWMALDI\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RAFHYSHCEIIQVWLRWMALDI\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'RAFHYSHCEIIQVWLRWMALDI', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RAFHYSHCEIIQVWLRWMALDI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            11
        ]
    },
    {
        "question": "For the protein sequence 'RAFHYSHCEIIQVWLRWMALDI', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RAFHYSHCEIIQVWLRWMALDI\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'RAFHYSHCEIIQVWLRWMALDI', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RAFHYSHCEIIQVWLRWMALDI\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TCTGTCGCAAGTTCTCCTACATATGCCTAGTGATTATCAT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCTGTCGCAAGTTCTCCTACATATGCCTAGTGATTATCAT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTGTCGCAAG"
    },
    {
        "question": "Using the DNA sequence 'TCTGTCGCAAGTTCTCCTACATATGCCTAGTGATTATCAT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCTGTCGCAAGTTCTCCTACATATGCCTAGTGATTATCAT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SVASSPTYA",
            "LSQVLLHMPSDYH",
            "CRKFSYICLVII"
        ]
    },
    {
        "question": "For the protein sequence 'QTKSNCAFLTQTADPVLQQSMY', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QTKSNCAFLTQTADPVLQQSMY\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QTKSNCAFLTQTADPVLQQSMY\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'QTKSNCAFLTQTADPVLQQSMY', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTKSNCAFLTQTADPVLQQSMY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            2
        ]
    },
    {
        "question": "For the protein sequence 'QTKSNCAFLTQTADPVLQQSMY', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTKSNCAFLTQTADPVLQQSMY\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'QTKSNCAFLTQTADPVLQQSMY', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTKSNCAFLTQTADPVLQQSMY\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AGAAGCAAACACACTGCAGGTCGTGGACTCCAATCCTTTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGAAGCAAACACACTGCAGGTCGTGGACTCCAATCCTTTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTGCAGGTCG"
    },
    {
        "question": "Using the DNA sequence 'AGAAGCAAACACACTGCAGGTCGTGGACTCCAATCCTTTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGAAGCAAACACACTGCAGGTCGTGGACTCCAATCCTTTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RSKHTAGRGLQSF",
            "EANTLQVVDSNPL",
            "KQTHCRSWTPIL"
        ]
    },
    {
        "question": "For the protein sequence 'NVLLHWMDGEAWAWSPTCWVWF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NVLLHWMDGEAWAWSPTCWVWF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NVLLHWMDGEAWAWSPTCWVWF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'NVLLHWMDGEAWAWSPTCWVWF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVLLHWMDGEAWAWSPTCWVWF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            0
        ]
    },
    {
        "question": "For the protein sequence 'NVLLHWMDGEAWAWSPTCWVWF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVLLHWMDGEAWAWSPTCWVWF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'NVLLHWMDGEAWAWSPTCWVWF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NVLLHWMDGEAWAWSPTCWVWF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.375
    },
    {
        "question": "Given the DNA sequence 'GCAAGCGCCACTATTTCCGGCTAGTATCGGAGTAATTAGC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCAAGCGCCACTATTTCCGGCTAGTATCGGAGTAATTAGC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCAAGCGCCA"
    },
    {
        "question": "Using the DNA sequence 'GCAAGCGCCACTATTTCCGGCTAGTATCGGAGTAATTAGC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCAAGCGCCACTATTTCCGGCTAGTATCGGAGTAATTAGC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASATISG",
            "QAPLFPASIGVIS",
            "KRHYFRLVSE"
        ]
    },
    {
        "question": "For the protein sequence 'IQSKQCGIVTASSHVSAHSPDE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"IQSKQCGIVTASSHVSAHSPDE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"IQSKQCGIVTASSHVSAHSPDE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'IQSKQCGIVTASSHVSAHSPDE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IQSKQCGIVTASSHVSAHSPDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            1,
            2
        ]
    },
    {
        "question": "For the protein sequence 'IQSKQCGIVTASSHVSAHSPDE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IQSKQCGIVTASSHVSAHSPDE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'IQSKQCGIVTASSHVSAHSPDE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"IQSKQCGIVTASSHVSAHSPDE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TCCTCTCAATGTACATAAACGGCATCGCCCTCACCGGGCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TCCTCTCAATGTACATAAACGGCATCGCCCTCACCGGGCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGCATCGCC"
    },
    {
        "question": "Using the DNA sequence 'TCCTCTCAATGTACATAAACGGCATCGCCCTCACCGGGCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TCCTCTCAATGTACATAAACGGCATCGCCCTCACCGGGCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "SSQCT",
            "PLNVHKRHRPHRA",
            "LSMYINGIALTG"
        ]
    },
    {
        "question": "For the protein sequence 'WRGDHACIAMWHANIIPCGFET', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WRGDHACIAMWHANIIPCGFET\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WRGDHACIAMWHANIIPCGFET\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'WRGDHACIAMWHANIIPCGFET', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRGDHACIAMWHANIIPCGFET\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            4
        ]
    },
    {
        "question": "For the protein sequence 'WRGDHACIAMWHANIIPCGFET', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRGDHACIAMWHANIIPCGFET\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'WRGDHACIAMWHANIIPCGFET', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WRGDHACIAMWHANIIPCGFET\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'CCATTCCTTGTAATTTGTAGCAGGATGCGAGAGGCCCTAC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCATTCCTTGTAATTTGTAGCAGGATGCGAGAGGCCCTAC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGAGAGGCC"
    },
    {
        "question": "Using the DNA sequence 'CCATTCCTTGTAATTTGTAGCAGGATGCGAGAGGCCCTAC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCATTCCTTGTAATTTGTAGCAGGATGCGAGAGGCCCTAC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PFLVICSRMREAL",
            "HSL",
            "IPCNL"
        ]
    },
    {
        "question": "For the protein sequence 'LDIKTRPCHWTLNIGMNNLPKQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"LDIKTRPCHWTLNIGMNNLPKQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"LDIKTRPCHWTLNIGMNNLPKQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'LDIKTRPCHWTLNIGMNNLPKQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDIKTRPCHWTLNIGMNNLPKQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'LDIKTRPCHWTLNIGMNNLPKQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDIKTRPCHWTLNIGMNNLPKQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'LDIKTRPCHWTLNIGMNNLPKQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"LDIKTRPCHWTLNIGMNNLPKQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TGCGTTCATCGGCCGAAGACCAAACACGCCTGCATGCAGA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGCGTTCATCGGCCGAAGACCAAACACGCCTGCATGCAGA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "TCATCGGCCG"
    },
    {
        "question": "Using the DNA sequence 'TGCGTTCATCGGCCGAAGACCAAACACGCCTGCATGCAGA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGCGTTCATCGGCCGAAGACCAAACACGCCTGCATGCAGA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CVHRPKTKHACMQ",
            "AFIGRRPNTPACR",
            "RSSAEDQTRLHA"
        ]
    },
    {
        "question": "For the protein sequence 'VKWVPKVQANFVMCDTCYPKGK', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VKWVPKVQANFVMCDTCYPKGK\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VKWVPKVQANFVMCDTCYPKGK\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'VKWVPKVQANFVMCDTCYPKGK', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VKWVPKVQANFVMCDTCYPKGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            2,
            8
        ]
    },
    {
        "question": "For the protein sequence 'VKWVPKVQANFVMCDTCYPKGK', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VKWVPKVQANFVMCDTCYPKGK\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'VKWVPKVQANFVMCDTCYPKGK', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VKWVPKVQANFVMCDTCYPKGK\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'CCGTAGCACATAGAGGACTGTTCTCAACAGGATTAATTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGTAGCACATAGAGGACTGTTCTCAACAGGATTAATTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGTAGCACA"
    },
    {
        "question": "Using the DNA sequence 'CCGTAGCACATAGAGGACTGTTCTCAACAGGATTAATTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGTAGCACATAGAGGACTGTTCTCAACAGGATTAATTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "P",
            "RST",
            "VAHRGLFSTGLI"
        ]
    },
    {
        "question": "For the protein sequence 'MMQYQSYTYPSSNQLMRFRAIR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MMQYQSYTYPSSNQLMRFRAIR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MMQYQSYTYPSSNQLMRFRAIR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'MMQYQSYTYPSSNQLMRFRAIR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MMQYQSYTYPSSNQLMRFRAIR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            12
        ]
    },
    {
        "question": "For the protein sequence 'MMQYQSYTYPSSNQLMRFRAIR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MMQYQSYTYPSSNQLMRFRAIR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'MMQYQSYTYPSSNQLMRFRAIR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MMQYQSYTYPSSNQLMRFRAIR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'TAGGCTGTCGGGCAAAGTTTATATACCGTCCACGAGGTCT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAGGCTGTCGGGCAAAGTTTATATACCGTCCACGAGGTCT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGCTGTCGGG"
    },
    {
        "question": "Using the DNA sequence 'TAGGCTGTCGGGCAAAGTTTATATACCGTCCACGAGGTCT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAGGCTGTCGGGCAAAGTTTATATACCGTCCACGAGGTCT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "RLSGKVYIPSTRS",
            "GCRAKFIYRPRG"
        ]
    },
    {
        "question": "For the protein sequence 'QWPWMGIWEAKILMGRLSFQSQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QWPWMGIWEAKILMGRLSFQSQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QWPWMGIWEAKILMGRLSFQSQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'QWPWMGIWEAKILMGRLSFQSQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPWMGIWEAKILMGRLSFQSQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            1
        ]
    },
    {
        "question": "For the protein sequence 'QWPWMGIWEAKILMGRLSFQSQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPWMGIWEAKILMGRLSFQSQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'QWPWMGIWEAKILMGRLSFQSQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QWPWMGIWEAKILMGRLSFQSQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.5714285714285714
    },
    {
        "question": "Given the DNA sequence 'GGTGAAATTGATAGGTTTACCATTCTGACGGCAGACGGTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGTGAAATTGATAGGTTTACCATTCTGACGGCAGACGGTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGCAGACGG"
    },
    {
        "question": "Using the DNA sequence 'GGTGAAATTGATAGGTTTACCATTCTGACGGCAGACGGTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGTGAAATTGATAGGTTTACCATTCTGACGGCAGACGGTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GEIDRFTILTADG",
            "VKLIGLPF",
            ""
        ]
    },
    {
        "question": "For the protein sequence 'NMYYEYFYHDQIDFWPVGFPMP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"NMYYEYFYHDQIDFWPVGFPMP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"NMYYEYFYHDQIDFWPVGFPMP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'NMYYEYFYHDQIDFWPVGFPMP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NMYYEYFYHDQIDFWPVGFPMP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            0
        ]
    },
    {
        "question": "For the protein sequence 'NMYYEYFYHDQIDFWPVGFPMP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NMYYEYFYHDQIDFWPVGFPMP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'NMYYEYFYHDQIDFWPVGFPMP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"NMYYEYFYHDQIDFWPVGFPMP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'GAGTAGACAATCAGTGGACCCCAATATTTAACAAGTCATG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GAGTAGACAATCAGTGGACCCCAATATTTAACAAGTCATG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CAGTGGACCC"
    },
    {
        "question": "Using the DNA sequence 'GAGTAGACAATCAGTGGACCCCAATATTTAACAAGTCATG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GAGTAGACAATCAGTGGACCCCAATATTTAACAAGTCATG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "E",
            "SRQSVDPNI",
            "VDNQWTPIFNKS"
        ]
    },
    {
        "question": "For the protein sequence 'TKEMEIWIEKCHTEQGFPHQNH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TKEMEIWIEKCHTEQGFPHQNH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TKEMEIWIEKCHTEQGFPHQNH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "T"
    },
    {
        "question": "Given the protein sequence 'TKEMEIWIEKCHTEQGFPHQNH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TKEMEIWIEKCHTEQGFPHQNH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            5
        ]
    },
    {
        "question": "For the protein sequence 'TKEMEIWIEKCHTEQGFPHQNH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TKEMEIWIEKCHTEQGFPHQNH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'TKEMEIWIEKCHTEQGFPHQNH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TKEMEIWIEKCHTEQGFPHQNH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'ATGTATGCAAGGTACATGGAGAAACAAGGACTTAGTGAGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGTATGCAAGGTACATGGAGAAACAAGGACTTAGTGAGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTATGCAAGG"
    },
    {
        "question": "Using the DNA sequence 'ATGTATGCAAGGTACATGGAGAAACAAGGACTTAGTGAGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGTATGCAAGGTACATGGAGAAACAAGGACTTAGTGAGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MYARYMEKQGLSE",
            "CMQGTWRNKDLVS",
            "VCKVHGETRT"
        ]
    },
    {
        "question": "For the protein sequence 'QTWCPGQEWRNQFHASIAWRYP', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QTWCPGQEWRNQFHASIAWRYP\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QTWCPGQEWRNQFHASIAWRYP\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'QTWCPGQEWRNQFHASIAWRYP', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTWCPGQEWRNQFHASIAWRYP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            11
        ]
    },
    {
        "question": "For the protein sequence 'QTWCPGQEWRNQFHASIAWRYP', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTWCPGQEWRNQFHASIAWRYP\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'QTWCPGQEWRNQFHASIAWRYP', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QTWCPGQEWRNQFHASIAWRYP\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GATACTGCACCGTGTATACACTCCTGGTCAGCAAGCCACC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GATACTGCACCGTGTATACACTCCTGGTCAGCAAGCCACC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTGCACCGTG"
    },
    {
        "question": "Using the DNA sequence 'GATACTGCACCGTGTATACACTCCTGGTCAGCAAGCCACC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GATACTGCACCGTGTATACACTCCTGGTCAGCAAGCCACC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "DTAPCIHSWSASH",
            "ILHRVYTPGQQAT",
            "YCTVYTLLVSKP"
        ]
    },
    {
        "question": "For the protein sequence 'QSQHATCNLHMEKCMTVISKHQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QSQHATCNLHMEKCMTVISKHQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QSQHATCNLHMEKCMTVISKHQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'QSQHATCNLHMEKCMTVISKHQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QSQHATCNLHMEKCMTVISKHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            3
        ]
    },
    {
        "question": "For the protein sequence 'QSQHATCNLHMEKCMTVISKHQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QSQHATCNLHMEKCMTVISKHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'QSQHATCNLHMEKCMTVISKHQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QSQHATCNLHMEKCMTVISKHQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'GTGAAAAGACAAATCGTACACGCCTTTGCTTGAACCCTAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTGAAAAGACAAATCGTACACGCCTTTGCTTGAACCCTAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTACACGCC"
    },
    {
        "question": "Using the DNA sequence 'GTGAAAAGACAAATCGTACACGCCTTTGCTTGAACCCTAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTGAAAAGACAAATCGTACACGCCTTTGCTTGAACCCTAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VKRQIVHAFA",
            "",
            "EKTNRTRLCLNP"
        ]
    },
    {
        "question": "For the protein sequence 'TNHQEFRTPDDGLFNIAGMTGR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TNHQEFRTPDDGLFNIAGMTGR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TNHQEFRTPDDGLFNIAGMTGR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'TNHQEFRTPDDGLFNIAGMTGR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TNHQEFRTPDDGLFNIAGMTGR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            10
        ]
    },
    {
        "question": "For the protein sequence 'TNHQEFRTPDDGLFNIAGMTGR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TNHQEFRTPDDGLFNIAGMTGR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'TNHQEFRTPDDGLFNIAGMTGR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TNHQEFRTPDDGLFNIAGMTGR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'TTAGAGACCCGATCGTATGAGATACAAATGTTTTACAATT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TTAGAGACCCGATCGTATGAGATACAAATGTTTTACAATT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCCGATCG"
    },
    {
        "question": "Using the DNA sequence 'TTAGAGACCCGATCGTATGAGATACAAATGTTTTACAATT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TTAGAGACCCGATCGTATGAGATACAAATGTTTTACAATT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LETRSYEIQMFYN",
            "",
            "RDPIV"
        ]
    },
    {
        "question": "For the protein sequence 'KQEFWMNIIKTYADTLVNVEFN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"KQEFWMNIIKTYADTLVNVEFN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"KQEFWMNIIKTYADTLVNVEFN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'KQEFWMNIIKTYADTLVNVEFN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KQEFWMNIIKTYADTLVNVEFN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            2
        ]
    },
    {
        "question": "For the protein sequence 'KQEFWMNIIKTYADTLVNVEFN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KQEFWMNIIKTYADTLVNVEFN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'KQEFWMNIIKTYADTLVNVEFN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"KQEFWMNIIKTYADTLVNVEFN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    },
    {
        "question": "Given the DNA sequence 'ATGGCTGAGTGAGTTTATGTGGAGTCGTGCCCCTACGACG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ATGGCTGAGTGAGTTTATGTGGAGTCGTGCCCCTACGACG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCGTGCCCC"
    },
    {
        "question": "Using the DNA sequence 'ATGGCTGAGTGAGTTTATGTGGAGTCGTGCCCCTACGACG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ATGGCTGAGTGAGTTTATGTGGAGTCGTGCCCCTACGACG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "MAE",
            "WLSEFMWSRAPTT",
            "G"
        ]
    },
    {
        "question": "For the protein sequence 'EASTHDKATLQWKYWAMNQWFR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"EASTHDKATLQWKYWAMNQWFR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"EASTHDKATLQWKYWAMNQWFR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'EASTHDKATLQWKYWAMNQWFR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EASTHDKATLQWKYWAMNQWFR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            8
        ]
    },
    {
        "question": "For the protein sequence 'EASTHDKATLQWKYWAMNQWFR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EASTHDKATLQWKYWAMNQWFR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'EASTHDKATLQWKYWAMNQWFR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"EASTHDKATLQWKYWAMNQWFR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CCGCAGACACATATCGACAGTGACGCCGAACCATTTTGAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CCGCAGACACATATCGACAGTGACGCCGAACCATTTTGAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCGCAGACAC"
    },
    {
        "question": "Using the DNA sequence 'CCGCAGACACATATCGACAGTGACGCCGAACCATTTTGAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CCGCAGACACATATCGACAGTGACGCCGAACCATTTTGAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "PQTHIDSDAEPF",
            "RRHISTVTPNHFE",
            "ADTYRQ"
        ]
    },
    {
        "question": "For the protein sequence 'RDACMIMIVSRWWGYAKMADVW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RDACMIMIVSRWWGYAKMADVW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RDACMIMIVSRWWGYAKMADVW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "W"
    },
    {
        "question": "Given the protein sequence 'RDACMIMIVSRWWGYAKMADVW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RDACMIMIVSRWWGYAKMADVW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            6
        ]
    },
    {
        "question": "For the protein sequence 'RDACMIMIVSRWWGYAKMADVW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RDACMIMIVSRWWGYAKMADVW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'RDACMIMIVSRWWGYAKMADVW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RDACMIMIVSRWWGYAKMADVW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'TGTGCGACCTGCGAAATTCGGTGAGTGGGTACAGAACTGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTGCGACCTGCGAAATTCGGTGAGTGGGTACAGAACTGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGACCTGCG"
    },
    {
        "question": "Using the DNA sequence 'TGTGCGACCTGCGAAATTCGGTGAGTGGGTACAGAACTGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTGCGACCTGCGAAATTCGGTGAGTGGGTACAGAACTGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CATCEIR",
            "VRPAKFGEWVQNC",
            "CDLRNSVSGYRT"
        ]
    },
    {
        "question": "For the protein sequence 'WDYVWNYLNTQAKDFQALERLE', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WDYVWNYLNTQAKDFQALERLE\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WDYVWNYLNTQAKDFQALERLE\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "L"
    },
    {
        "question": "Given the protein sequence 'WDYVWNYLNTQAKDFQALERLE', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WDYVWNYLNTQAKDFQALERLE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            1
        ]
    },
    {
        "question": "For the protein sequence 'WDYVWNYLNTQAKDFQALERLE', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WDYVWNYLNTQAKDFQALERLE\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'WDYVWNYLNTQAKDFQALERLE', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WDYVWNYLNTQAKDFQALERLE\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'CTCGAATGCTCGTGGTCTAAGTCAACTTTCTTAGGTTAGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTCGAATGCTCGTGGTCTAAGTCAACTTTCTTAGGTTAGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCTCGTGGTC"
    },
    {
        "question": "Using the DNA sequence 'CTCGAATGCTCGTGGTCTAAGTCAACTTTCTTAGGTTAGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTCGAATGCTCGTGGTCTAAGTCAACTTTCTTAGGTTAGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LECSWSKSTFLG",
            "SNARGLSQLS",
            "RMLVV"
        ]
    },
    {
        "question": "For the protein sequence 'TVAPFSESQKMTADVSMFLDCL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"TVAPFSESQKMTADVSMFLDCL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"TVAPFSESQKMTADVSMFLDCL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'TVAPFSESQKMTADVSMFLDCL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TVAPFSESQKMTADVSMFLDCL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            4,
            11
        ]
    },
    {
        "question": "For the protein sequence 'TVAPFSESQKMTADVSMFLDCL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TVAPFSESQKMTADVSMFLDCL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'TVAPFSESQKMTADVSMFLDCL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"TVAPFSESQKMTADVSMFLDCL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CTTATCTTCGATACTTACTTTGAACACGTCAAGGTGACGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CTTATCTTCGATACTTACTTTGAACACGTCAAGGTGACGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CACGTCAAGG"
    },
    {
        "question": "Using the DNA sequence 'CTTATCTTCGATACTTACTTTGAACACGTCAAGGTGACGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CTTATCTTCGATACTTACTTTGAACACGTCAAGGTGACGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "LIFDTYFEHVKVT",
            "LSSILTLNTSR",
            "YLRYLL"
        ]
    },
    {
        "question": "For the protein sequence 'ELGHLEFVEYDIHKHLQCKPND', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"ELGHLEFVEYDIHKHLQCKPND\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"ELGHLEFVEYDIHKHLQCKPND\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "E"
    },
    {
        "question": "Given the protein sequence 'ELGHLEFVEYDIHKHLQCKPND', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ELGHLEFVEYDIHKHLQCKPND\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            1
        ]
    },
    {
        "question": "For the protein sequence 'ELGHLEFVEYDIHKHLQCKPND', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ELGHLEFVEYDIHKHLQCKPND\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 3
    },
    {
        "question": "Given the protein sequence 'ELGHLEFVEYDIHKHLQCKPND', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"ELGHLEFVEYDIHKHLQCKPND\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'AGGGTACGGTAGAGGACCCACGGGTCCACAATAGTAGGGT', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AGGGTACGGTAGAGGACCCACGGGTCCACAATAGTAGGGT\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GGACCCACGG"
    },
    {
        "question": "Using the DNA sequence 'AGGGTACGGTAGAGGACCCACGGGTCCACAATAGTAGGGT', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AGGGTACGGTAGAGGACCCACGGGTCCACAATAGTAGGGT\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RVR",
            "GYGRGPTGPQ",
            "GTVEDPRVHNSR"
        ]
    },
    {
        "question": "For the protein sequence 'WQECQLHVIPADCTYHSKVMSW', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WQECQLHVIPADCTYHSKVMSW\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WQECQLHVIPADCTYHSKVMSW\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "C"
    },
    {
        "question": "Given the protein sequence 'WQECQLHVIPADCTYHSKVMSW', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQECQLHVIPADCTYHSKVMSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            12,
            7
        ]
    },
    {
        "question": "For the protein sequence 'WQECQLHVIPADCTYHSKVMSW', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQECQLHVIPADCTYHSKVMSW\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'WQECQLHVIPADCTYHSKVMSW', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WQECQLHVIPADCTYHSKVMSW\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TAACCCCGTGGCTACGGATGTCACACGTCCCTCCATAGTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAACCCCGTGGCTACGGATGTCACACGTCCCTCCATAGTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ACCCCGTGGC"
    },
    {
        "question": "Using the DNA sequence 'TAACCCCGTGGCTACGGATGTCACACGTCCCTCCATAGTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAACCCCGTGGCTACGGATGTCACACGTCCCTCCATAGTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "NPVATDVTRPSIV",
            "TPWLRMSHVPP"
        ]
    },
    {
        "question": "For the protein sequence 'RLSQMAHPVWFEAGLPTETWAH', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"RLSQMAHPVWFEAGLPTETWAH\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"RLSQMAHPVWFEAGLPTETWAH\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'RLSQMAHPVWFEAGLPTETWAH', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RLSQMAHPVWFEAGLPTETWAH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            10,
            3
        ]
    },
    {
        "question": "For the protein sequence 'RLSQMAHPVWFEAGLPTETWAH', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RLSQMAHPVWFEAGLPTETWAH\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 10
    },
    {
        "question": "Given the protein sequence 'RLSQMAHPVWFEAGLPTETWAH', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"RLSQMAHPVWFEAGLPTETWAH\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.6923076923076923
    },
    {
        "question": "Given the DNA sequence 'TGGCTTCAGTTGGAGACCTAGCGAGGTTGGAACATGGCGG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGGCTTCAGTTGGAGACCTAGCGAGGTTGGAACATGGCGG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CCTAGCGAGG"
    },
    {
        "question": "Using the DNA sequence 'TGGCTTCAGTTGGAGACCTAGCGAGGTTGGAACATGGCGG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGGCTTCAGTTGGAGACCTAGCGAGGTTGGAACATGGCGG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "WLQLET",
            "GFSWRPSEVGTWR",
            "ASVGDLARLEHG"
        ]
    },
    {
        "question": "For the protein sequence 'GYNKYDHHNKHSRIYMHKPSSA', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"GYNKYDHHNKHSRIYMHKPSSA\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"GYNKYDHHNKHSRIYMHKPSSA\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "G"
    },
    {
        "question": "Given the protein sequence 'GYNKYDHHNKHSRIYMHKPSSA', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GYNKYDHHNKHSRIYMHKPSSA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            8
        ]
    },
    {
        "question": "For the protein sequence 'GYNKYDHHNKHSRIYMHKPSSA', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GYNKYDHHNKHSRIYMHKPSSA\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'GYNKYDHHNKHSRIYMHKPSSA', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"GYNKYDHHNKHSRIYMHKPSSA\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 3.4
    },
    {
        "question": "Given the DNA sequence 'AATATCCGCAGTCTTGATTTTACTGTACTACAAGGGTAAA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"AATATCCGCAGTCTTGATTTTACTGTACTACAAGGGTAAA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "ATCCGCAGTC"
    },
    {
        "question": "Using the DNA sequence 'AATATCCGCAGTCTTGATTTTACTGTACTACAAGGGTAAA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"AATATCCGCAGTCTTGATTTTACTGTACTACAAGGGTAAA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "NIRSLDFTVLQG",
            "ISAVLILLYYKGK",
            "YPQS"
        ]
    },
    {
        "question": "For the protein sequence 'SGRCYIDNATQDMNQEQCSFVL', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"SGRCYIDNATQDMNQEQCSFVL\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"SGRCYIDNATQDMNQEQCSFVL\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "A"
    },
    {
        "question": "Given the protein sequence 'SGRCYIDNATQDMNQEQCSFVL', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGRCYIDNATQDMNQEQCSFVL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            0
        ]
    },
    {
        "question": "For the protein sequence 'SGRCYIDNATQDMNQEQCSFVL', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGRCYIDNATQDMNQEQCSFVL\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 8
    },
    {
        "question": "Given the protein sequence 'SGRCYIDNATQDMNQEQCSFVL', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"SGRCYIDNATQDMNQEQCSFVL\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'GGCGGGAGAACAAGCCCTAACAACGTGGCGGGCTTTGACA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GGCGGGAGAACAAGCCCTAACAACGTGGCGGGCTTTGACA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGTGGCGGGC"
    },
    {
        "question": "Using the DNA sequence 'GGCGGGAGAACAAGCCCTAACAACGTGGCGGGCTTTGACA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GGCGGGAGAACAAGCCCTAACAACGTGGCGGGCTTTGACA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "GGRTSPNNVAGFD",
            "AGEQALTTWRALT",
            "RENKP"
        ]
    },
    {
        "question": "For the protein sequence 'WNDYCRITKMSPRYFYGCKDMR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"WNDYCRITKMSPRYFYGCKDMR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"WNDYCRITKMSPRYFYGCKDMR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'WNDYCRITKMSPRYFYGCKDMR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WNDYCRITKMSPRYFYGCKDMR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            12
        ]
    },
    {
        "question": "For the protein sequence 'WNDYCRITKMSPRYFYGCKDMR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WNDYCRITKMSPRYFYGCKDMR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'WNDYCRITKMSPRYFYGCKDMR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"WNDYCRITKMSPRYFYGCKDMR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'TGTCGCTCGTCTTGGTAGAACGCATAAGGTACCGGGTCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TGTCGCTCGTCTTGGTAGAACGCATAAGGTACCGGGTCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCGCTCGTC"
    },
    {
        "question": "Using the DNA sequence 'TGTCGCTCGTCTTGGTAGAACGCATAAGGTACCGGGTCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TGTCGCTCGTCTTGGTAGAACGCATAAGGTACCGGGTCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "CRSSW",
            "VARLGRTHKVPGP",
            "SLVLVERIRYRV"
        ]
    },
    {
        "question": "For the protein sequence 'FEFQWFDYFCKSHMAVYAKYWN', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"FEFQWFDYFCKSHMAVYAKYWN\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"FEFQWFDYFCKSHMAVYAKYWN\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'FEFQWFDYFCKSHMAVYAKYWN', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FEFQWFDYFCKSHMAVYAKYWN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            2
        ]
    },
    {
        "question": "For the protein sequence 'FEFQWFDYFCKSHMAVYAKYWN', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FEFQWFDYFCKSHMAVYAKYWN\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 4
    },
    {
        "question": "Given the protein sequence 'FEFQWFDYFCKSHMAVYAKYWN', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"FEFQWFDYFCKSHMAVYAKYWN\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'TAGAGCAACTTTGCCCCGGATACGGAAGTAGGCACGTTAG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"TAGAGCAACTTTGCCCCGGATACGGAAGTAGGCACGTTAG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTTTGCCCCG"
    },
    {
        "question": "Using the DNA sequence 'TAGAGCAACTTTGCCCCGGATACGGAAGTAGGCACGTTAG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"TAGAGCAACTTTGCCCCGGATACGGAAGTAGGCACGTTAG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "",
            "RATLPRIRK",
            "EQLCPGYGSRHV"
        ]
    },
    {
        "question": "For the protein sequence 'CEHFYDFLDYASARVIWFEQCD', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"CEHFYDFLDYASARVIWFEQCD\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"CEHFYDFLDYASARVIWFEQCD\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "F"
    },
    {
        "question": "Given the protein sequence 'CEHFYDFLDYASARVIWFEQCD', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CEHFYDFLDYASARVIWFEQCD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            3,
            1
        ]
    },
    {
        "question": "For the protein sequence 'CEHFYDFLDYASARVIWFEQCD', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CEHFYDFLDYASARVIWFEQCD\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'CEHFYDFLDYASARVIWFEQCD', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"CEHFYDFLDYASARVIWFEQCD\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.0
    },
    {
        "question": "Given the DNA sequence 'GCGAGTCACTACATACGTGTTAATCTCACCGCTATGTGTC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GCGAGTCACTACATACGTGTTAATCTCACCGCTATGTGTC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGAGTCACT"
    },
    {
        "question": "Using the DNA sequence 'GCGAGTCACTACATACGTGTTAATCTCACCGCTATGTGTC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GCGAGTCACTACATACGTGTTAATCTCACCGCTATGTGTC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "ASHYIRVNLTAMC",
            "RVTTYVLISPLCV",
            "ESLHTC"
        ]
    },
    {
        "question": "For the protein sequence 'PLLVQWHRSICGTCIMCQALSV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PLLVQWHRSICGTCIMCQALSV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PLLVQWHRSICGTCIMCQALSV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "H"
    },
    {
        "question": "Given the protein sequence 'PLLVQWHRSICGTCIMCQALSV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLLVQWHRSICGTCIMCQALSV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            6,
            8
        ]
    },
    {
        "question": "For the protein sequence 'PLLVQWHRSICGTCIMCQALSV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLLVQWHRSICGTCIMCQALSV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 1
    },
    {
        "question": "Given the protein sequence 'PLLVQWHRSICGTCIMCQALSV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PLLVQWHRSICGTCIMCQALSV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.4666666666666667
    },
    {
        "question": "Given the DNA sequence 'GTACGTGTTTGCACTTCCTGCCGAACTTCCATTCGCGCCA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"GTACGTGTTTGCACTTCCTGCCGAACTTCCATTCGCGCCA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CTTCCTGCCG"
    },
    {
        "question": "Using the DNA sequence 'GTACGTGTTTGCACTTCCTGCCGAACTTCCATTCGCGCCA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"GTACGTGTTTGCACTTCCTGCCGAACTTCCATTCGCGCCA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "VRVCTSCRTSIRA",
            "YVFALPAELPFAP",
            "TCLHFLPNFHSR"
        ]
    },
    {
        "question": "For the protein sequence 'VMGPWLLSPRVHTSQSFISEGR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"VMGPWLLSPRVHTSQSFISEGR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"VMGPWLLSPRVHTSQSFISEGR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "P"
    },
    {
        "question": "Given the protein sequence 'VMGPWLLSPRVHTSQSFISEGR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VMGPWLLSPRVHTSQSFISEGR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            8,
            5
        ]
    },
    {
        "question": "For the protein sequence 'VMGPWLLSPRVHTSQSFISEGR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VMGPWLLSPRVHTSQSFISEGR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 7
    },
    {
        "question": "Given the protein sequence 'VMGPWLLSPRVHTSQSFISEGR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"VMGPWLLSPRVHTSQSFISEGR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 0.8333333333333334
    },
    {
        "question": "Given the DNA sequence 'CGTGCGCGACCTGAACGCGTGCAGAGCGCCGCGCGAAGCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGTGCGCGACCTGAACGCGTGCAGAGCGCCGCGCGAAGCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GCGCCGCGCG"
    },
    {
        "question": "Using the DNA sequence 'CGTGCGCGACCTGAACGCGTGCAGAGCGCCGCGCGAAGCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGTGCGCGACCTGAACGCGTGCAGAGCGCCGCGCGAAGCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RARPERVQSAARS",
            "VRDLNACRAPREA",
            "CAT"
        ]
    },
    {
        "question": "For the protein sequence 'QRLEQKDRWEIAWPQTFFHEHF', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"QRLEQKDRWEIAWPQTFFHEHF\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"QRLEQKDRWEIAWPQTFFHEHF\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Q"
    },
    {
        "question": "Given the protein sequence 'QRLEQKDRWEIAWPQTFFHEHF', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QRLEQKDRWEIAWPQTFFHEHF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            0,
            11
        ]
    },
    {
        "question": "For the protein sequence 'QRLEQKDRWEIAWPQTFFHEHF', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QRLEQKDRWEIAWPQTFFHEHF\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 0
    },
    {
        "question": "Given the protein sequence 'QRLEQKDRWEIAWPQTFFHEHF', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"QRLEQKDRWEIAWPQTFFHEHF\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'ACGCATCGGGACCGACAGCTCCACCGTAAAGAGCCACCTG', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACGCATCGGGACCGACAGCTCCACCGTAAAGAGCCACCTG\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "CGGGACCGAC"
    },
    {
        "question": "Using the DNA sequence 'ACGCATCGGGACCGACAGCTCCACCGTAAAGAGCCACCTG', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACGCATCGGGACCGACAGCTCCACCGTAAAGAGCCACCTG\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "THRDRQLHRKEPP",
            "RIGTDSSTVKSHL",
            "ASGPTAPP"
        ]
    },
    {
        "question": "For the protein sequence 'DRSVVHPSMQFHEQHFFHFSHR', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"DRSVVHPSMQFHEQHFFHFSHR\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"DRSVVHPSMQFHEQHFFHFSHR\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "S"
    },
    {
        "question": "Given the protein sequence 'DRSVVHPSMQFHEQHFFHFSHR', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DRSVVHPSMQFHEQHFFHFSHR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            7,
            10
        ]
    },
    {
        "question": "For the protein sequence 'DRSVVHPSMQFHEQHFFHFSHR', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DRSVVHPSMQFHEQHFFHFSHR\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 6
    },
    {
        "question": "Given the protein sequence 'DRSVVHPSMQFHEQHFFHFSHR', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"DRSVVHPSMQFHEQHFFHFSHR\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.75
    },
    {
        "question": "Given the DNA sequence 'CGTTTTTGCGTCCTCCGTGGTAGGTTAGTCCGCCCGGACA', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"CGTTTTTGCGTCCTCCGTGGTAGGTTAGTCCGCCCGGACA\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GTCCGCCCGG"
    },
    {
        "question": "Using the DNA sequence 'CGTTTTTGCGTCCTCCGTGGTAGGTTAGTCCGCCCGGACA', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"CGTTTTTGCGTCCTCCGTGGTAGGTTAGTCCGCCCGGACA\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "RFCVLRGRLVRPD",
            "VFASSVVG",
            "FLRPPW"
        ]
    },
    {
        "question": "For the protein sequence 'PPDPRRNMGHKRKANFYTHNGV', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"PPDPRRNMGHKRKANFYTHNGV\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"PPDPRRNMGHKRKANFYTHNGV\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "R"
    },
    {
        "question": "Given the protein sequence 'PPDPRRNMGHKRKANFYTHNGV', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPDPRRNMGHKRKANFYTHNGV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            5,
            10
        ]
    },
    {
        "question": "For the protein sequence 'PPDPRRNMGHKRKANFYTHNGV', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPDPRRNMGHKRKANFYTHNGV\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 5
    },
    {
        "question": "Given the protein sequence 'PPDPRRNMGHKRKANFYTHNGV', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"PPDPRRNMGHKRKANFYTHNGV\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.4444444444444444
    },
    {
        "question": "Given the DNA sequence 'ACGAAACCTATGACCTTCGCGTTTGTTTCGCCCGATTTCC', which portion of the sequence has the highest GC content?",
        "code": "\nfrom Bio.Seq import Seq\nfrom Bio.SeqUtils import GC\n\ndna_sequence = Seq(\"ACGAAACCTATGACCTTCGCGTTTGTTTCGCCCGATTTCC\")\nwindow_size = 10\nhighest_gc = 0\nsegment_start = 0\nfor i in range(len(dna_sequence) - window_size + 1):\n    window_sequence = dna_sequence[i:i+window_size]\n    current_gc = GC(window_sequence)\n    if current_gc > highest_gc:\n        highest_gc = current_gc\n        segment_start = i\nsegment = dna_sequence[segment_start:segment_start+window_size]\nresult = segment\n    ",
        "answer": "GACCTTCGCG"
    },
    {
        "question": "Using the DNA sequence 'ACGAAACCTATGACCTTCGCGTTTGTTTCGCCCGATTTCC', which potential protein sequence(s) can be derived using the three possible reading frames on the forward strand?",
        "code": "\nfrom Bio.Seq import Seq\n\ndna_sequence = Seq(\"ACGAAACCTATGACCTTCGCGTTTGTTTCGCCCGATTTCC\")\nprotein_result = []\nfor frame in range(3):\n    protein = dna_sequence[frame:].translate(to_stop=True)\n    protein_result.append(protein)\nresult = protein_result\n    ",
        "answer": [
            "TKPMTFAFVSPDF",
            "RNL",
            "ETYDLRVCFARF"
        ]
    },
    {
        "question": "For the protein sequence 'MYAQQCWAEKMYMTNFNTTPAQ', which amino acid is predicted to be the most flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nanalysis = ProteinAnalysis(\"MYAQQCWAEKMYMTNFNTTPAQ\")\nflexibility_scores = analysis.flexibility()\nmost_flexible_aa = \"MYAQQCWAEKMYMTNFNTTPAQ\"[flexibility_scores.index(max(flexibility_scores))]\nresult = most_flexible_aa\n    ",
        "answer": "Y"
    },
    {
        "question": "Given the protein sequence 'MYAQQCWAEKMYMTNFNTTPAQ', which amino acid is predicted to be the most flexible and which one is the least flexible?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MYAQQCWAEKMYMTNFNTTPAQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nmost_flexible_index = flexibility_scores.index(max(flexibility_scores))\nleast_flexible_index = flexibility_scores.index(min(flexibility_scores))\n\nresult = most_flexible_index , least_flexible_index\n    ",
        "answer": [
            11,
            0
        ]
    },
    {
        "question": "For the protein sequence 'MYAQQCWAEKMYMTNFNTTPAQ', which segment of three consecutive amino acids has the highest average flexibility?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MYAQQCWAEKMYMTNFNTTPAQ\"\nanalysis = ProteinAnalysis(protein_sequence)\nflexibility_scores = analysis.flexibility()\n\nhighest_avg_flexibility = 0\nsegment_start = 0\n\nfor i in range(len(flexibility_scores) - 2):\n    avg_flexibility = sum(flexibility_scores[i:i+3]) / 3\n    if avg_flexibility > highest_avg_flexibility:\n        highest_avg_flexibility = avg_flexibility\n        segment_start = i\nresult = segment_start\n    ",
        "answer": 2
    },
    {
        "question": "Given the protein sequence 'MYAQQCWAEKMYMTNFNTTPAQ', how does the proportion of polar amino acids compare to the proportion of non-polar amino acids?",
        "code": "\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\nprotein_sequence = \"MYAQQCWAEKMYMTNFNTTPAQ\"\nanalysis = ProteinAnalysis(protein_sequence)\naa_count = analysis.count_amino_acids()\n\npolar_amino_acids = ['Q', 'N', 'H', 'K', 'D', 'E', 'S', 'T', 'R', 'Y']\npolar_count = sum(aa_count[aa] for aa in polar_amino_acids)\nnon_polar_count = sum(aa_count[aa] for aa in set(aa_count.keys()) - set(polar_amino_acids))\nresult = polar_count / non_polar_count\n    ",
        "answer": 1.2
    }
]